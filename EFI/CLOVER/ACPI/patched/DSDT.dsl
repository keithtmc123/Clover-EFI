/*
 * Intel ACPI Component Architecture
 * AML Disassembler version 20110623-64 [Jun 23 2011]
 * Copyright (c) 2000 - 2011 Intel Corporation
 * 
 * Disassembly of /Volumes/EFI/EFI/CLOVER/ACPI/origin/DSDT.aml, Fri Mar  4 04:38:04 2016
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x000212BB (135867)
 *     Revision         0x02
 *     Checksum         0x23
 *     OEM ID           "Apple "
 *     OEM Table ID     "A M I "
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20120913 (538052883)
 */

DefinitionBlock ("/Volumes/EFI/EFI/CLOVER/ACPI/origin/DSDT.aml", "DSDT", 2, "Apple ", "A M I ", 0x01072009)
{
    External (LLOW)
    External (LHIH)
    External (ALSE)
    External (P2WK)
    External (P2L6, MethodObj)    // 1 Arguments
    External (P2GP)
    External (P1WK)
    External (P1L6, MethodObj)    // 1 Arguments
    External (P1GP)
    External (P0WK)
    External (P0L6, MethodObj)    // 1 Arguments
    External (SGGP)
    External (AL6F, MethodObj)    // 0 Arguments
    External (GSMI)
    External (HLVT, MethodObj)    // 0 Arguments
    External (D1F2)
    External (D1F1)
    External (D1F0)
    External (SGMD)
    External (PDC7)
    External (PDC6)
    External (PDC5)
    External (PDC4)
    External (PDC3)
    External (PDC2)
    External (PDC1)
    External (PDC0)
    External (MDBG, IntObj)
    External (SDSM, IntObj)
    External (PS2X, MethodObj)    // 0 Arguments
    External (PS3X, MethodObj)    // 0 Arguments
    External (PS0X, MethodObj)    // 0 Arguments
    External (DIDX)
    External (M64B, IntObj)
    External (M64L, IntObj)
    External (M32B, IntObj)
    External (M32L, IntObj)
    External (\_GPE.P2L6)
    External (\_GPE.P1L6)
    External (\_GPE.P0L6)
    External (\_GPE.AL6F)
    External (\_GPE.HLVT)
    External (\_TZ_.TZ01)
    External (\_TZ_.TZ00)
    External (\_PR_.EPCS)
    External (\_PR_.ELNG, IntObj)
    External (\_PR_.EMNA, IntObj)
    External (\_PR_.DSAE)
    External (\_PR_.BGIA, IntObj)
    External (\_PR_.BGMS, IntObj)
    External (\_PR_.BGMA, IntObj)
    External (\_PR_.TRPF)
    External (\_PR_.TRPD)
    External (\_PR_.DTSF, IntObj)
    External (\_PR_.CPPC)
    External (\_SB_.IETM)
    External (\_PR_.DTSE)
    External (\_PR_.CPU0.LPSS)
    External (\_PR_.CPU0.TPSS)
    External (\_PR_.CPU0._PSS)
    External (\_PR_.CPU0._PPC)
    External (\_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (\_SB_.PCI0.GFX0.CLID)
    External (\_SB_.PCI0.GFX0.GSCI, MethodObj)    // 0 Arguments
    External (\_SB_.PCI0.GFX0.GSSE)
    External (\_SB_.PCI0.PEG2.HPME, MethodObj)    // 0 Arguments
    External (\_SB_.PCI0.PEG1.HPME, MethodObj)    // 0 Arguments
    External (\_SB_.PCI0.PEG0.HPME, MethodObj)    // 0 Arguments
    External (\_SB_.PCI0.XHC_.DUAM, MethodObj)    // 0 Arguments
    External (\_SB_.PCI0.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (\_SB_.PCI0.GFX0.IUEH, MethodObj)    // 1 Arguments
    External (\_SB_.PCI0.SAT0.SDSM)
    External (\_SB_.PCI0.XHC_.PS3X)
    External (\_SB_.PCI0.XHC_.PS0X)
    External (\_SB_.PCI0.GFX0.DD1F)
    External (\_SB_.PCI0.LPCB.H_EC.CHRG)
    External (\_SB_.PCI0.XHC_.RHUB.PS3X)
    External (\_SB_.PCI0.XHC_.RHUB.PS2X)
    External (\_SB_.PCI0.XHC_.RHUB.PS0X)
    External (\_SB_.PCI0.XHC_.RHUB.INIR, MethodObj)    // 0 Arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, Zero)
    Name (IO1L, Zero)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO3B, Zero)
    Name (IO3L, Zero)
    Name (IO4B, Zero)
    Name (IO4L, Zero)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (IOHW, 0x0290)
    Name (IOHB, 0x0290)
    Name (IOHL, 0x10)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x8000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (VTBS, 0xFED90000)
    Name (VTLN, 0x4000)
    Name (CPVD, Zero)
    Name (SMIP, 0xB2)
    Name (PMBA, 0x1800)
    Name (PMLN, 0x80)
    Name (SMCR, 0x1830)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (SMBL, 0x20)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTC, 0x60)
    Name (GPBA, 0x1C00)
    Name (GPLN, 0x0400)
    Name (PFTU, 0xB2)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x04)
    Name (FUWS, 0x03)
    Name (FEMD, 0x04)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, Zero)
    Name (SHPC, One)
    Name (PEPM, Zero)
    Name (PEER, Zero)
    Name (PECS, Zero)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (AMWV, 0x09)
    Name (SMIM, 0x80000009)
    Name (SS1, One)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Name (XHOF, Zero)
    OperationRegion (GNVS, SystemMemory, 0xAF9FC000, 0x05F5)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
                Offset (0x1E), 
                Offset (0x1F), 
                Offset (0x20), 
                Offset (0x21), 
                Offset (0x22), 
                Offset (0x23), 
                Offset (0x24), 
                Offset (0x25), 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        BID,    16, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        ATMC,   8, 
        PTMC,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   8, 
        BBID,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        OBF9,   8, 
        OBFA,   8, 
        OBFB,   8, 
        OBFC,   8, 
        OBFD,   8, 
        OBFE,   8, 
        OBFF,   8, 
        OBFG,   8, 
        OBFH,   8, 
        OBFI,   8, 
        OBFJ,   8, 
        OBFK,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        SADE,   8, 
        SACR,   8, 
        SAHT,   8, 
        CTDP,   8, 
        LPMP,   8, 
        LPMV,   8, 
        ECEU,   8, 
        TGFG,   16, 
        MEMD,   8, 
        ATRA,   8, 
        PTRA,   8, 
        MEMC,   8, 
        MEMH,   8, 
        FND1,   8, 
        FND2,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        DCMP,   8, 
        TRTV,   8, 
        LPOE,   8, 
        LPOP,   8, 
        LPOS,   8, 
        LPOW,   8, 
        LPER,   8, 
        PPSZ,   32, 
        DISE,   8, 
        BGMA,   64, 
        BGMS,   8, 
        BGIA,   16, 
        IRMC,   8, 
        NFCE,   8, 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        SEC0,   32, 
        SEC1,   32, 
        SEC2,   32, 
        SEC3,   32, 
        SEC4,   32, 
        SEC5,   32, 
        SEC6,   32, 
        SEC7,   32, 
        SEC8,   32, 
                Offset (0x1F4), 
        WIFD,   8, 
        WFAT,   8, 
        WFPT,   8, 
        WFCT,   8, 
        WFHT,   8, 
        PWRE,   8, 
        PWRP,   8, 
                Offset (0x203), 
        XHPR,   8, 
        RIC0,   8, 
        DVS0,   8, 
        DVS1,   8, 
        DVS2,   8, 
        DVS3,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        ECDB,   8, 
        P2ME,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        M0C0,   16, 
        M1C0,   16, 
        M2C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M2C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        TBSF,   8, 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        LANP,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        GN1E,   8, 
        G1AT,   8, 
        G1PT,   8, 
        G1CT,   8, 
        G1HT,   8, 
        GN2E,   8, 
        G2AT,   8, 
        G2PT,   8, 
        G2CT,   8, 
        G2HT,   8, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        SDWE,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        SOHP,   8, 
        GP5F,   8, 
        NOHP,   8, 
        TBSE,   8, 
        WKFN,   8, 
        PEPC,   32, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        WAND,   8, 
        WWAT,   8, 
        WWPT,   8, 
        WWCT,   8, 
        WWHT,   8, 
                Offset (0x2A3), 
        MPL0,   16, 
        CHGE,   8, 
        SAC3,   8, 
        MEM3,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        WFC3,   8, 
        G1C3,   8, 
        G2C3,   8, 
        IFC3,   8, 
        WWC3,   8, 
        WGC3,   8, 
        SPST,   8, 
        PERE,   8, 
                Offset (0x2B7), 
        GN3E,   8, 
        G3AT,   8, 
        G3PT,   8, 
        G3CT,   8, 
        G3HT,   8, 
        GN4E,   8, 
        G4AT,   8, 
        G4PT,   8, 
        G4CT,   8, 
        G4HT,   8, 
        GN5E,   8, 
        G5AT,   8, 
        G5PT,   8, 
        G5CT,   8, 
        G5HT,   8, 
        GN6E,   8, 
        G6AT,   8, 
        G6PT,   8, 
        G6CT,   8, 
        G6HT,   8, 
        ECLP,   8, 
        G3C3,   8, 
        G4C3,   8, 
        G5C3,   8, 
        G6C3,   8, 
        TSP1,   8, 
        TSP2,   8, 
        TSP3,   8, 
        TSP4,   8, 
        TSP5,   8, 
        TSP6,   8, 
        TSP7,   8, 
        TSP8,   8, 
        SSP1,   8, 
        SSP2,   8, 
        SSP3,   8, 
        SSP4,   8, 
        SSP5,   8, 
        SSP6,   8, 
        SSP7,   8, 
        SSP8,   8, 
        MEMS,   8, 
                Offset (0x2F8), 
        S1DE,   8, 
        S1AT,   8, 
        S1PT,   8, 
        S1CT,   8, 
        S1HT,   8, 
        S2DE,   8, 
        S2AT,   8, 
        S2PT,   8, 
        S2CT,   8, 
        S2HT,   8, 
        S3DE,   8, 
        S3AT,   8, 
        S3PT,   8, 
        S3CT,   8, 
        S3HT,   8, 
        S4DE,   8, 
        S4AT,   8, 
        S4PT,   8, 
        S4CT,   8, 
        S4HT,   8, 
        S5DE,   8, 
        S5AT,   8, 
        S5PT,   8, 
        S5CT,   8, 
        S5HT,   8, 
        S6DE,   8, 
        S6AT,   8, 
        S6PT,   8, 
        S6CT,   8, 
        S6HT,   8, 
        S7DE,   8, 
        S7AT,   8, 
        S7PT,   8, 
        S7CT,   8, 
        S7HT,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        S6S3,   8, 
        S7S3,   8, 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   16, 
        PTW1,   16, 
        PDT2,   8, 
        PLM2,   16, 
        PTW2,   16, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   16, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        DDT2,   8, 
        DDP2,   8, 
        DLI2,   16, 
        DPL2,   16, 
        DTW2,   16, 
        DMI2,   16, 
        DMA2,   16, 
        DMT2,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   16, 
        DOM2,   8, 
        LIM2,   16, 
        TIM2,   16, 
        DOM3,   8, 
        LIM3,   16, 
        TIM3,   16, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        WDM2,   8, 
        CID2,   16, 
                Offset (0x364), 
        APPE,   8, 
        MPL1,   16, 
        MPL2,   16, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLB,   8, 
        TPLH,   16, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        GEXN,   8, 
        TBTS,   8, 
        AICS,   8, 
        TARS,   8, 
        FPAT,   8, 
        FPEN,   8, 
        FPGN,   32, 
        FPLV,   8, 
        CPAD,   16, 
        CPAB,   8, 
        TNAT,   8, 
        CPGN,   32, 
        CF2T,   8, 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        USTP,   8, 
        SSHI,   16, 
        SSLI,   16, 
        SSDI,   16, 
        FMHI,   16, 
        FMLI,   16, 
        FMDI,   16, 
        FPHI,   16, 
        FPLI,   16, 
        FPDI,   16, 
        M0CI,   16, 
        M1CI,   16, 
        M0CS,   16, 
        M1CS,   16, 
        M0CU,   16, 
        M1CU,   16, 
        CAMT,   8, 
        DS4D,   16, 
        IVDF,   8, 
        EIDF,   8, 
        GFPS,   32, 
        GFPI,   32, 
        GNSM,   8, 
        GNSC,   8, 
        GGNR,   32, 
        GBTW,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        CDIV,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0PL,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1PL,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2PL,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3PL,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0DG,   8, 
        L0C0,   8, 
        L0C1,   8, 
        L0C2,   8, 
        L0C3,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1DG,   8, 
        L1C0,   8, 
        L1C1,   8, 
        L1C2,   8, 
        L1C3,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2DG,   8, 
        L2C0,   8, 
        L2C1,   8, 
        L2C2,   8, 
        L2C3,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3DG,   8, 
        L3C0,   8, 
        L3C1,   8, 
        L3C2,   8, 
        L3C3,   8, 
        L3CK,   32, 
        L3CL,   8, 
        ECR1,   8, 
                Offset (0x5AA), 
        I2SC,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        EMOD,   8, 
        WIFC,   8, 
                Offset (0x5BE), 
        TPLS,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420"))
        Name (_UID, Zero)
        Name (_STR, Unicode ("Power Sharing Manager"))
        Method (_STA, 0, NotSerialized)
        {
            If (LEqual (PSME, One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (PDT1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (PLM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (PTW1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (PDT2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (PLM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (PTW2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Return (SPLX)
        }

        Name (DPLX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            Store (DDT1, Index (DerefOf (Index (DPLX, One)), Zero))
            Store (DDP1, Index (DerefOf (Index (DPLX, One)), One))
            Store (DLI1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 
                0x02)), Zero))
            Store (DPL1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 
                0x02)), One))
            Store (DTW1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 
                0x02)), 0x02))
            Store (DMI1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 
                0x02)), 0x03))
            Store (DMA1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 
                0x02)), 0x04))
            Store (DMT1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 
                0x02)), 0x05))
            Store (DDT2, Index (DerefOf (Index (DPLX, 0x02)), Zero))
            Store (DDP2, Index (DerefOf (Index (DPLX, 0x02)), One))
            Store (DLI2, Index (DerefOf (Index (DerefOf (Index (DPLX, 0x02)), 
                0x02)), Zero))
            Store (DPL2, Index (DerefOf (Index (DerefOf (Index (DPLX, 0x02)), 
                0x02)), One))
            Store (DTW2, Index (DerefOf (Index (DerefOf (Index (DPLX, 0x02)), 
                0x02)), 0x02))
            Store (DMI2, Index (DerefOf (Index (DerefOf (Index (DPLX, 0x02)), 
                0x02)), 0x03))
            Store (DMA2, Index (DerefOf (Index (DerefOf (Index (DPLX, 0x02)), 
                0x02)), 0x04))
            Store (DMT2, Index (DerefOf (Index (DerefOf (Index (DPLX, 0x02)), 
                0x02)), 0x05))
            Return (DPLX)
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PR00, Package (0x20)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x20)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }
        })
        Name (PR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PG48, Package (0x08)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AG48, Package (0x08)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08"))
            Name (_CID, EisaId ("PNP0A03"))
            Name (_ADR, Zero)
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)
            Method (_PRT, 0, NotSerialized)
            {
                If (PICM)
                {
                    Return (AR00)
                }

                Return (PR00)
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                        Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                        Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                        Offset (0x50), 
                GCLK,   1, 
                        Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                        Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                        Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                        Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                        Offset (0x80), 
                PMLK,   1, 
                    ,   3, 
                PM0H,   2, 
                        Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                        Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                        Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                        Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                        Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                        Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                        Offset (0x87), 
                        Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                        Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                        Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFD000000,         // Range Minimum
                    0xFE7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x01800000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If (LEqual (EP_B, Zero))
                {
                    ShiftLeft (EPBR, 0x0C, EP_B)
                }

                Return (EP_B)
            }

            Method (GMHB, 0, Serialized)
            {
                If (LEqual (MH_B, Zero))
                {
                    ShiftLeft (MHBR, 0x0F, MH_B)
                }

                Return (MH_B)
            }

            Method (GPCB, 0, Serialized)
            {
                If (LEqual (PC_B, Zero))
                {
                    ShiftLeft (PXBR, 0x1A, PC_B)
                }

                Return (PC_B)
            }

            Method (GPCL, 0, Serialized)
            {
                If (LEqual (PC_L, Zero))
                {
                    ShiftRight (0x10000000, PXSZ, PC_L)
                }

                Return (PC_L)
            }

            Method (GDMB, 0, Serialized)
            {
                If (LEqual (DM_B, Zero))
                {
                    ShiftLeft (DIBR, 0x0C, DM_B)
                }

                Return (DM_B)
            }

            Method (_CRS, 0, Serialized)
            {
                Store (GPCL (), Local0)
                CreateWordField (BUF0, 0x0A, PBMX)
                Store (Subtract (ShiftRight (Local0, 0x14), 0x02), PBMX)
                CreateWordField (BUF0, 0x0E, PBLN)
                Store (Subtract (ShiftRight (Local0, 0x14), One), PBLN)
                If (PM1L)
                {
                    CreateDWordField (BUF0, 0x7C, C0LN)
                    Store (Zero, C0LN)
                }

                If (LEqual (PM1L, One))
                {
                    CreateBitField (BUF0, 0x0358, C0RW)
                    Store (Zero, C0RW)
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, 0x96, C4LN)
                    Store (Zero, C4LN)
                }

                If (LEqual (PM1H, One))
                {
                    CreateBitField (BUF0, 0x0428, C4RW)
                    Store (Zero, C4RW)
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, 0xB0, C8LN)
                    Store (Zero, C8LN)
                }

                If (LEqual (PM2L, One))
                {
                    CreateBitField (BUF0, 0x04F8, C8RW)
                    Store (Zero, C8RW)
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, 0xCA, CCLN)
                    Store (Zero, CCLN)
                }

                If (LEqual (PM2H, One))
                {
                    CreateBitField (BUF0, 0x05C8, CCRW)
                    Store (Zero, CCRW)
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, 0xE4, D0LN)
                    Store (Zero, D0LN)
                }

                If (LEqual (PM3L, One))
                {
                    CreateBitField (BUF0, 0x0698, D0RW)
                    Store (Zero, D0RW)
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, 0xFE, D4LN)
                    Store (Zero, D4LN)
                }

                If (LEqual (PM3H, One))
                {
                    CreateBitField (BUF0, 0x0768, D4RW)
                    Store (Zero, D4RW)
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, 0x0118, D8LN)
                    Store (Zero, D8LN)
                }

                If (LEqual (PM4L, One))
                {
                    CreateBitField (BUF0, 0x0838, D8RW)
                    Store (Zero, D8RW)
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, 0x0132, DCLN)
                    Store (Zero, DCLN)
                }

                If (LEqual (PM4H, One))
                {
                    CreateBitField (BUF0, 0x0908, DCRW)
                    Store (Zero, DCRW)
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, 0x014C, E0LN)
                    Store (Zero, E0LN)
                }

                If (LEqual (PM5L, One))
                {
                    CreateBitField (BUF0, 0x09D8, E0RW)
                    Store (Zero, E0RW)
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, 0x0166, E4LN)
                    Store (Zero, E4LN)
                }

                If (LEqual (PM5H, One))
                {
                    CreateBitField (BUF0, 0x0AA8, E4RW)
                    Store (Zero, E4RW)
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, 0x0180, E8LN)
                    Store (Zero, E8LN)
                }

                If (LEqual (PM6L, One))
                {
                    CreateBitField (BUF0, 0x0B78, E8RW)
                    Store (Zero, E8RW)
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, 0x019A, ECLN)
                    Store (Zero, ECLN)
                }

                If (LEqual (PM6H, One))
                {
                    CreateBitField (BUF0, 0x0C48, ECRW)
                    Store (Zero, ECRW)
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, 0x01B4, F0LN)
                    Store (Zero, F0LN)
                }

                If (LEqual (PM0H, One))
                {
                    CreateBitField (BUF0, 0x0D18, F0RW)
                    Store (Zero, F0RW)
                }

                CreateDWordField (BUF0, 0x01C2, M1MN)
                CreateDWordField (BUF0, 0x01C6, M1MX)
                CreateDWordField (BUF0, 0x01CE, M1LN)
                Store (M32L, M1LN)
                Store (M32B, M1MN)
                Subtract (Add (M1MN, M1LN), One, M1MX)
                If (LEqual (M64L, Zero))
                {
                    CreateDWordField (BUF0, 0x01F8, MSLN)
                    Store (Zero, MSLN)
                }
                Else
                {
                    CreateQWordField (BUF0, 0x01F8, M2LN)
                    CreateQWordField (BUF0, 0x01E0, M2MN)
                    CreateQWordField (BUF0, 0x01E8, M2MX)
                    Store (M64L, M2LN)
                    Store (M64B, M2MN)
                    Subtract (Add (M2MN, M2LN), One, M2MX)
                }

                Return (BUF0)
            }

            Name (GUID, Buffer (0x10)
            {
                /* 0000 */    0x5B, 0x4D, 0xDB, 0x33, 0xF7, 0x1F, 0x1C, 0x40, 
                /* 0008 */    0x96, 0x57, 0x74, 0x41, 0xC0, 0x3D, 0xD7, 0x66
            })
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)
            {
                Store (Arg3, Local0)
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (LAnd (LEqual (Arg0, GUID), NEXP))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LAnd (LEqual (TBTS, One), LEqual (TNAT, One)))
                    {
                        And (CTRL, 0xFFFFFFF7, CTRL)
                    }

                    If (Not (And (CDW1, One)))
                    {
                        If (And (CTRL, One))
                        {
                            NHPG ()
                        }

                        If (And (CTRL, 0x04))
                        {
                            NPME ()
                        }
                    }

                    If (LNotEqual (Arg1, One))
                    {
                        Or (CDW1, 0x08, CDW1)
                    }

                    If (LNotEqual (CDW3, CTRL))
                    {
                        Or (CDW1, 0x10, CDW1)
                    }

                    Store (CTRL, CDW3)
                    Store (CTRL, OSCC)
                    Return (Local0)
                }
                Else
                {
                    Or (CDW1, 0x04, CDW1)
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Device (GFX0)
                {
                    Name (_ADR, 0x00020000)
                }

                Device (B0D4)
                {
                    Method (_DSM, 4, Serialized)
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    Name (_ADR, 0x00040000)
                }
            }

            Scope (\)
            {
                OperationRegion (COMR, SystemIO, 0x03F8, 0x08)
                Field (COMR, ByteAcc, NoLock, Preserve)
                {
                    SOUT,   8, 
                            Offset (0x05), 
                    SSAT,   8
                }

                Method (THRE, 0, NotSerialized)
                {
                    And (SSAT, 0x20, Local0)
                    While (LEqual (Local0, Zero))
                    {
                        And (SSAT, 0x20, Local0)
                    }
                }

                Method (OUTX, 1, NotSerialized)
                {
                    THRE ()
                    Store (Arg0, SOUT)
                }

                Method (OUTC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x0A))
                    {
                        OUTX (0x0D)
                    }

                    OUTX (Arg0)
                }

                Method (DBGN, 1, NotSerialized)
                {
                    And (Arg0, 0x0F, Local0)
                    If (LLess (Local0, 0x0A))
                    {
                        Add (Local0, 0x30, Local0)
                    }
                    Else
                    {
                        Add (Local0, 0x37, Local0)
                    }

                    OUTC (Local0)
                }

                Method (DBGB, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x04, Local0)
                    DBGN (Local0)
                    DBGN (Arg0)
                }

                Method (DBGW, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x08, Local0)
                    DBGB (Local0)
                    DBGB (Arg0)
                }

                Method (DBGD, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x10, Local0)
                    DBGW (Local0)
                    DBGW (Arg0)
                }

                Method (DBGQ, 1, NotSerialized)
                {
                    ShiftRight (Arg0, 0x30, Local0)
                    DBGW (Local0)
                    ShiftRight (Arg0, 0x20, Local0)
                    DBGW (Local0)
                    ShiftRight (Arg0, 0x10, Local0)
                    DBGW (Local0)
                    DBGW (Arg0)
                }

                Name (DBGZ, Buffer (0x50) {})
                Method (GETC, 2, NotSerialized)
                {
                    CreateByteField (Arg0, Arg1, DBGC)
                    Return (DBGC)
                }

                Method (MNIO, 1, NotSerialized)
                {
                    If (LEqual (ObjectType (Arg0), One))
                    {
                        If (LGreater (Arg0, 0xFFFFFFFF))
                        {
                            DBGQ (Arg0)
                        }
                        Else
                        {
                            If (LGreater (Arg0, 0xFFFF))
                            {
                                DBGD (Arg0)
                            }
                            Else
                            {
                                If (LGreater (Arg0, 0xFF))
                                {
                                    DBGW (Arg0)
                                }
                                Else
                                {
                                    DBGB (Arg0)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (ObjectType (Arg0), 0x02))
                    {
                        Store (Arg0, DBGZ)
                        Store (Zero, Local1)
                        While (One)
                        {
                            Store (GETC (DBGZ, Local1), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                Return (Zero)
                            }

                            OUTC (Local0)
                            Increment (Local1)
                        }

                        Return (Zero)
                    }

                    If (LEqual (ObjectType (Arg0), 0x03))
                    {
                        Store (Zero, Local0)
                        While (LLess (Local0, SizeOf (Arg0)))
                        {
                            Store (GETC (Arg0, Local0), Local1)
                            If (LGreater (Local0, Zero))
                            {
                                OUTC (0x20)
                            }

                            DBGB (Local1)
                            Increment (Local0)
                        }

                        Return (Zero)
                    }

                    If (LEqual (ObjectType (Arg0), 0x04))
                    {
                        Store (Zero, Local0)
                        While (LLess (Local0, SizeOf (Arg0)))
                        {
                            OUTC (0x20)
                            OUTC (0x20)
                            MNIO (DerefOf (Index (Arg0, Local0)))
                            OUTC (0x0A)
                            Increment (Local0)
                        }

                        Return (Zero)
                    }

                    Return (One)
                }
            }

            Scope (\_SB.PCI0)
            {
                Name (PALK, Zero)
                Name (PA0H, Zero)
                Name (PA1H, Zero)
                Name (PA1L, Zero)
                Name (PA2H, Zero)
                Name (PA2L, Zero)
                Name (PA3H, Zero)
                Name (PA3L, Zero)
                Name (PA4H, Zero)
                Name (PA4L, Zero)
                Name (PA5H, Zero)
                Name (PA5L, Zero)
                Name (PA6H, Zero)
                Name (PA6L, Zero)
                Method (NPTS, 1, NotSerialized)
                {
                    Store (PM0H, PA0H)
                    Store (PMLK, PALK)
                    Store (PM1H, PA1H)
                    Store (PM1L, PA1L)
                    Store (PM2H, PA2H)
                    Store (PM2L, PA2L)
                    Store (PM3H, PA3H)
                    Store (PM3L, PA3L)
                    Store (PM4H, PA4H)
                    Store (PM4L, PA4L)
                    Store (PM5H, PA5H)
                    Store (PM5L, PA5L)
                    Store (PM6H, PA6H)
                    Store (PM6L, PA6L)
                }

                Method (NWAK, 1, NotSerialized)
                {
                    Store (PA0H, PM0H)
                    Store (PA1H, PM1H)
                    Store (PA1L, PM1L)
                    Store (PA2H, PM2H)
                    Store (PA2L, PM2L)
                    Store (PA3H, PM3H)
                    Store (PA3L, PM3L)
                    Store (PA4H, PM4H)
                    Store (PA4L, PM4L)
                    Store (PA5H, PM5H)
                    Store (PA5L, PM5L)
                    Store (PA6H, PM6H)
                    Store (PA6L, PM6L)
                    Store (PALK, PMLK)
                }
            }

            Device (PEG0)
            {
                Name (_ADR, 0x00010000)
                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR01)
                    }

                    Return (PR01)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)
                }
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010001)
                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR02)
                    }

                    Return (PR02)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)
                }
            }

            Device (PEG2)
            {
                Name (_ADR, 0x00010002)
                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR03)
                    }

                    Return (PR03)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)
                Scope (\_SB.PCI0.LPCB)
                {
                }

                Method (SPTS, 1, NotSerialized)
                {
                    Store (One, SLPX)
                    Store (One, SLPE)
                }

                Method (SWAK, 1, NotSerialized)
                {
                    Store (Zero, SLPE)
                    If (RTCS) {}
                    Else
                    {
                        Notify (PWRB, 0x02)
                    }
                }

                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                            Offset (0x03), 
                    PWBT,   1, 
                            Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                            Offset (0x08)
                }

                OperationRegion (CPSB, SystemMemory, 0xAEFA5F18, 0x10)
                Field (CPSB, AnyAcc, NoLock, Preserve)
                {
                    RTCX,   1, 
                    SBB0,   7, 
                    SBB1,   8, 
                    SBB2,   8, 
                    SBB3,   8, 
                    SBB4,   8, 
                    SBB5,   8, 
                    SBB6,   8, 
                    SBB7,   8, 
                    SBB8,   8, 
                    SBB9,   8, 
                    SBBA,   8, 
                    SBBB,   8, 
                    SBBC,   8, 
                    SBBD,   8, 
                    SBBE,   8, 
                    SBBF,   8
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02"))
                    Name (_UID, Zero)
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)
                    {
                        If (LAnd (LLess (SP1O, 0x03F0), LGreater (SP1O, 0xF0)))
                        {
                            CreateWordField (CRS, 0x02, GPI0)
                            CreateWordField (CRS, 0x04, GPI1)
                            CreateByteField (CRS, 0x07, GPIL)
                            Store (SP1O, GPI0)
                            Store (SP1O, GPI1)
                            Store (0x02, GPIL)
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, 0x0A, GP10)
                            CreateWordField (CRS, 0x0C, GP11)
                            CreateByteField (CRS, 0x0F, GPL1)
                            Store (IO1B, GP10)
                            Store (IO1B, GP11)
                            Store (IO1L, GPL1)
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, 0x12, GP20)
                            CreateWordField (CRS, 0x14, GP21)
                            CreateByteField (CRS, 0x17, GPL2)
                            Store (IO2B, GP20)
                            Store (IO2B, GP21)
                            Store (IO2L, GPL2)
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, 0x1A, GP30)
                            CreateWordField (CRS, 0x1C, GP31)
                            CreateByteField (CRS, 0x1F, GPL3)
                            Store (IO3B, GP30)
                            Store (IO3B, GP31)
                            Store (IO3L, GPL3)
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, 0x22, GP40)
                            CreateWordField (CRS, 0x24, GP41)
                            CreateByteField (CRS, 0x27, GPL4)
                            Store (IO4B, GP40)
                            Store (IO4B, GP41)
                            Store (IO4L, GPL4)
                        }

                        Return (CRS)
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        Store (ENTK, INDX)
                        Store (ENTK, INDX)
                        Store (Arg0, LDN)
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Store (EXTK, INDX)
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        And (OPT0, 0x02, Local0)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        Return (0x0105D041)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                                Offset (0x07), 
                        LDN,    8, 
                                Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                                Offset (0x29), 
                        CKCF,   8, 
                                Offset (0x30), 
                        ACTR,   8, 
                                Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                                Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                                Offset (0x74), 
                        DMCH,   8, 
                                Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                                Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (Index (DCAT, Arg0)))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Store (ACTR, Local0)
                        Or (ShiftLeft (IOAH, 0x08), IOAL, Local1)
                        EXFG ()
                        If (LEqual (Local0, 0xFF))
                        {
                            Return (Zero)
                        }

                        And (Local0, One, Local0)
                        If (LLess (Arg0, 0x10))
                        {
                            Or (IOST, ShiftLeft (Local0, Arg0), IOST)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            If (LLess (Arg0, 0x10))
                            {
                                If (And (ShiftLeft (One, Arg0), IOST))
                                {
                                    Return (0x0D)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Else
                            {
                                If (Local1)
                                {
                                    Return (0x0D)
                                }

                                Return (Zero)
                            }
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (LAnd (LLess (DMCH, 0x04), LNotEqual (And (DMCH, 0x03, 
                            Local1), Zero)))
                        {
                            RDMA (Arg0, Arg1, Increment (Local1))
                        }

                        Store (Arg1, ACTR)
                        ShiftLeft (IOAH, 0x08, Local1)
                        Or (IOAL, Local1, Local1)
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            )
                        IRQNoFlags ()
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    })
                    CreateWordField (CRS1, 0x09, IRQM)
                    CreateByteField (CRS1, 0x0C, DMAM)
                    CreateWordField (CRS1, 0x02, IO11)
                    CreateWordField (CRS1, 0x04, IO12)
                    CreateByteField (CRS1, 0x07, LEN1)
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            )
                        IRQNoFlags ()
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    })
                    CreateWordField (CRS2, 0x11, IRQE)
                    CreateByteField (CRS2, 0x14, DMAE)
                    CreateWordField (CRS2, 0x02, IO21)
                    CreateWordField (CRS2, 0x04, IO22)
                    CreateByteField (CRS2, 0x07, LEN2)
                    CreateWordField (CRS2, 0x0A, IO31)
                    CreateWordField (CRS2, 0x0C, IO32)
                    CreateByteField (CRS2, 0x0F, LEN3)
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            )
                        IRQ (Level, ActiveLow, Shared, )
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {}
                    })
                    CreateWordField (CRS3, 0x09, IRQT)
                    CreateByteField (CRS3, 0x0B, IRQS)
                    CreateByteField (CRS3, 0x0D, DMAT)
                    CreateWordField (CRS3, 0x02, IO41)
                    CreateWordField (CRS3, 0x04, IO42)
                    CreateByteField (CRS3, 0x07, LEN4)
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO11)
                        Or (IOAL, IO11, IO11)
                        Store (IO11, IO12)
                        Store (0x08, LEN1)
                        If (INTR)
                        {
                            ShiftLeft (One, INTR, IRQM)
                        }
                        Else
                        {
                            Store (Zero, IRQM)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, Zero)))
                        {
                            Store (Zero, DMAM)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (One, Local1, DMAM)
                        }

                        EXFG ()
                        Return (CRS1)
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO21)
                        Or (IOAL, IO21, IO21)
                        Store (IO21, IO22)
                        Store (0x08, LEN2)
                        ShiftLeft (IOH2, 0x08, IO31)
                        Or (IOL2, IO31, IO31)
                        Store (IO31, IO32)
                        Store (0x08, LEN3)
                        If (INTR)
                        {
                            ShiftLeft (One, INTR, IRQE)
                        }
                        Else
                        {
                            Store (Zero, IRQE)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, Zero)))
                        {
                            Store (Zero, DMAE)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (One, Local1, DMAE)
                        }

                        EXFG ()
                        Return (CRS2)
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO41)
                        Or (IOAL, IO41, IO41)
                        Store (IO41, IO42)
                        Store (0x08, LEN4)
                        If (INTR)
                        {
                            ShiftLeft (One, INTR, IRQT)
                        }
                        Else
                        {
                            Store (Zero, IRQT)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, Zero)))
                        {
                            Store (Zero, DMAT)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (One, Local1, DMAT)
                        }

                        EXFG ()
                        Return (CRS3)
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (And (LEqual (Arg1, 0x02), LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            And (IO11, 0xFF, IOAL)
                            ShiftRight (IO11, 0x08, IOAH)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                Subtract (Local0, One, INTR)
                            }
                            Else
                            {
                                Store (Zero, INTR)
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                Subtract (Local0, One, DMCH)
                            }
                            Else
                            {
                                Store (0x04, DMCH)
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Store (Arg1, Local2)
                            If (LGreater (Local2, Zero))
                            {
                                Subtract (Local2, One, Local2)
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        And (IO21, 0xFF, IOAL)
                        ShiftRight (IO21, 0x08, IOAH)
                        And (IO31, 0xFF, IOL2)
                        ShiftRight (IO31, 0x08, IOH2)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            Subtract (Local0, One, INTR)
                        }
                        Else
                        {
                            Store (Zero, INTR)
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            Subtract (Local0, One, DMCH)
                        }
                        Else
                        {
                            Store (0x04, DMCH)
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Store (Arg1, Local2)
                        If (LGreater (Local2, Zero))
                        {
                            Subtract (Local2, One, Local2)
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        And (IO41, 0xFF, IOAL)
                        ShiftRight (IO41, 0x08, IOAH)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            Subtract (Local0, One, INTR)
                        }
                        Else
                        {
                            Store (Zero, INTR)
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            Subtract (Local0, One, DMCH)
                        }
                        Else
                        {
                            Store (0x04, DMCH)
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Store (Arg1, Local2)
                        If (LGreater (Local2, Zero))
                        {
                            Subtract (Local2, One, Local2)
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Store ("SIOS", Debug)
                        If (LNotEqual (0x05, Arg0))
                        {
                            ENFG (0x0A)
                            If (LEqual (Arg0, One))
                            {
                                And (OPT6, 0xCF, OPT6)
                                If (KBFG)
                                {
                                    Or (OPT6, 0x10, OPT6)
                                }
                                Else
                                {
                                    And (OPT6, 0xEF, OPT6)
                                }

                                If (MSFG)
                                {
                                    Or (OPT6, 0x20, OPT6)
                                }
                                Else
                                {
                                    And (OPT6, 0xDF, OPT6)
                                }

                                Store (0xFF, OPT3)
                                Store (0xFF, OPT4)
                                Or (OPT2, One, OPT2)
                            }

                            If (LGreaterEqual (Arg0, 0x03))
                            {
                                And (RGE0, 0x9F, RGE0)
                                Store (RGE3, Local0)
                                Sleep (0xC8)
                                If (KBFG)
                                {
                                    Or (RGE0, 0x41, RGE0)
                                }
                                Else
                                {
                                    And (RGE0, 0xBE, RGE0)
                                }

                                If (MSFG)
                                {
                                    Or (RGE0, 0x22, RGE0)
                                }
                                Else
                                {
                                    And (RGE0, 0xDD, RGE0)
                                }
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Store ("SIOW", Debug)
                        ENFG (0x0A)
                        If (LEqual (Arg0, One))
                        {
                            Store (OPT3, PMFG)
                            Store (0xFF, OPT3)
                            And (OPT6, 0xCF, OPT6)
                            And (OPT2, 0xFE, OPT2)
                        }

                        If (LGreaterEqual (Arg0, 0x03))
                        {
                            Store (RGE3, PMFG)
                            Store (RGE3, Local0)
                            And (RGE0, 0x9F, RGE0)
                        }

                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If (And (PMFG, 0x08)) {}
                        If (And (PMFG, 0x10)) {}
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501"))
                    Name (_UID, Zero)
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_PRS, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                    Method (_PRW, 0, NotSerialized)
                    {
                        Return (GPRW (0x6B, 0x04))
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303"))
                    Name (_UID, Zero)
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))
                    Method (_STA, 0, NotSerialized)
                    {
                        If (LAnd (LLess (OSYS, 0x07DC), LEqual (XHOF, Zero)))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            If (And (IOST, 0x0400))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Name (_CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)
                    {
                        Store (Arg0, KBFG)
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03"))
                    Name (_UID, Zero)
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13"))
                    Method (_STA, 0, NotSerialized)
                    {
                        If (LAnd (LLess (OSYS, 0x07DC), LEqual (XHOF, Zero)))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            If (And (IOST, 0x4000))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)
                    {
                        If (LAnd (LLess (OSYS, 0x07DC), LEqual (XHOF, Zero)))
                        {
                            Return (CRS1)
                        }

                        If (And (IOST, 0x0400))
                        {
                            Return (CRS1)
                        }
                        Else
                        {
                            Return (CRS2)
                        }
                    }

                    Name (_PRS, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)
                    {
                        Store (Arg0, MSFG)
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08"))
                    Name (_UID, Zero)
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)
                    {
                        Return (Zero)
                    }
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR0C)
                    }

                    Return (PR0C)
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR0D)
                    }

                    Return (PR0D)
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR0E)
                    }

                    Return (PR0E)
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR0F)
                    }

                    Return (PR0F)
                }
            }

            Device (RP13)
            {
                Name (_ADR, 0x001D0004)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR10)
                    }

                    Return (PR10)
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR04)
                    }

                    Return (PR04)
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR05)
                    }

                    Return (PR05)
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR06)
                    }

                    Return (PR06)
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR07)
                    }

                    Return (PR07)
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR08)
                    }

                    Return (PR08)
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR09)
                    }

                    Return (PR09)
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR0A)
                    }

                    Return (PR0A)
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR0B)
                    }

                    Return (PR0B)
                }
            }

            Device (RP17)
            {
                Name (_ADR, 0x001B0000)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR14)
                    }

                    Return (PR14)
                }
            }

            Device (RP18)
            {
                Name (_ADR, 0x001B0001)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR15)
                    }

                    Return (PR15)
                }
            }

            Device (RP19)
            {
                Name (_ADR, 0x001B0002)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR16)
                    }

                    Return (PR16)
                }
            }

            Device (RP20)
            {
                Name (_ADR, 0x001B0003)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR17)
                    }

                    Return (PR17)
                }
            }

            Device (RP14)
            {
                Name (_ADR, 0x001D0005)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR11)
                    }

                    Return (PR11)
                }

                Device (D048)
                {
                    Name (_ADR, Zero)
                }
            }

            Device (RP15)
            {
                Name (_ADR, 0x001D0006)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR12)
                    }

                    Return (PR12)
                }
            }

            Device (RP16)
            {
                Name (_ADR, 0x001D0007)
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                            Offset (0x19), 
                    SBNR,   8, 
                            Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                            Offset (0x51), 
                            Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                            Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                            Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                            Offset (0x5B), 
                            Offset (0x60), 
                            Offset (0x62), 
                    PSPX,   1, 
                    PMEP,   1, 
                            Offset (0xA4), 
                    D3HT,   2, 
                            Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                            Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                            Offset (0x324), 
                        ,   3, 
                    LEDM,   1, 
                            Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                            Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                    0x00, 0x00
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LTRE)
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (OBFF)
                                    {
                                        Store (One, FUN4)
                                    }

                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }

                                Return (OPTS)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    If (LGreaterEqual (Arg1, 0x02))
                                    {
                                        If (OBFN)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                                                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                                            })
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x06))
                                    {
                                        If (LGreaterEqual (Arg1, 0x02))
                                        {
                                            If (LTRN)
                                            {
                                                If (LOr (LEqual (LMSL, Zero), LEqual (LNSL, Zero)))
                                                {
                                                    If (LEqual (PCHS, SPTH))
                                                    {
                                                        Store (0x0846, LMSL)
                                                        Store (0x0846, LNSL)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (PCHS, SPTL))
                                                        {
                                                            Store (0x1003, LMSL)
                                                            Store (0x1003, LNSL)
                                                        }
                                                    }
                                                }

                                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, 
                                                    Zero))
                                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 
                                                    0x02))
                                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                                Return (LTRV)
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08))
                                        {
                                            If (LEqual (ECR1, One))
                                            {
                                                If (LGreaterEqual (Arg1, 0x03))
                                                {
                                                    Return (One)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x09))
                                            {
                                                If (LEqual (ECR1, One))
                                                {
                                                    If (LGreaterEqual (Arg1, 0x03))
                                                    {
                                                        Return (Package (0x05)
                                                        {
                                                            0xC350, 
                                                            Ones, 
                                                            Ones, 
                                                            0xC350, 
                                                            Ones
                                                        })
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)
                    OperationRegion (PSCS, PCI_Config, Zero, 0x10)
                    Field (PSCS, AnyAcc, NoLock, Preserve)
                    {
                        VDDD,   32
                    }

                    Method (_PRW, 0, NotSerialized)
                    {
                        If (LEqual (VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (HPCE)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (LTR1, LTRE)
                    Store (PML1, LMSL)
                    Store (PNL1, LNSL)
                    Store (OBF1, OBFF)
                }

                Method (_PRW, 0, NotSerialized)
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (LEqual (^PXSX.VDDD, 0x10801B21))
                        {
                            Return (GPRW (0x6B, 0x04))
                        }
                        Else
                        {
                            Return (GPRW (0x69, 0x04))
                        }
                    }

                    Return (GPRW (0x69, 0x04))
                }

                Method (_PRT, 0, NotSerialized)
                {
                    If (PICM)
                    {
                        Return (AR13)
                    }

                    Return (PR13)
                }
            }
        }
    }

    Scope (_GPE)
    {
    }

    Name (_S0, Package (0x04)
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.LPCB.SIO1.SIOS (Arg0)
            \_SB.PCI0.LPCB.SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            RPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)
    {
        RWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.LPCB.SWAK (Arg0)
        \_SB.PCI0.LPCB.SIO1.SIOW (Arg0)
        \_SB.PCI0.LPCB.SIO1.SIOH ()
        Return (WAKP)
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00001810, 0x06) {}
        Processor (CPU1, 0x02, 0x00001810, 0x06) {}
        Processor (CPU2, 0x03, 0x00001810, 0x06) {}
        Processor (CPU3, 0x04, 0x00001810, 0x06) {}
        Processor (CPU4, 0x05, 0x00001810, 0x06) {}
        Processor (CPU5, 0x06, 0x00001810, 0x06) {}
        Processor (CPU6, 0x07, 0x00001810, 0x06) {}
        Processor (CPU7, 0x08, 0x00001810, 0x06) {}
    }

    Scope (_PR.CPU0)
    {
        Name (CPC1, Package (0x11)
        {
            0x11, 
            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            0x10, 
            Zero, 
            Zero, 
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001234, // Address
                    0x02,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }
        })
        Name (CPC2, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C")
            Method (_STA, 0, NotSerialized)
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)
            {
                One, 
                Zero
            })
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02"))
            Name (_UID, One)
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)
            {
                CreateDWordField (BUF0, 0x04, MBR0)
                Store (GMHB (), MBR0)
                CreateDWordField (BUF0, 0x10, DBR0)
                Store (GDMB (), DBR0)
                CreateDWordField (BUF0, 0x1C, EBR0)
                Store (GEPB (), EBR0)
                CreateDWordField (BUF0, 0x28, XBR0)
                Store (GPCB (), XBR0)
                CreateDWordField (BUF0, 0x2C, XSZ0)
                Store (GPCL (), XSZ0)
                CreateDWordField (BUF0, 0x70, SXRA)
                Store (SXRB, SXRA)
                CreateDWordField (BUF0, 0x74, SXRL)
                Store (SXRS, SXRL)
                If (LNot (HPTE))
                {
                    CreateDWordField (BUF0, 0x7C, HBAS)
                    CreateDWordField (BUF0, 0x80, HLEN)
                    Store (HPTB, HBAS)
                    Store (0x0400, HLEN)
                }

                Return (BUF0)
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (LEqual (And (DIDX, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD1F, Arg0)
        }
    }

    Name (PNVB, 0xAF9FDC98)
    Name (PNVL, 0x0204)
    If (LEqual (ECR1, One))
    {
        Scope (_SB.PCI0)
        {
            Name (PCIG, Buffer (0x10)
            {
                /* 0000 */    0xD0, 0x37, 0xC9, 0xE5, 0x53, 0x35, 0x7A, 0x4D, 
                /* 0008 */    0x91, 0x17, 0xEA, 0x4D, 0x19, 0xC3, 0x43, 0x4D
            })
            Method (PCID, 4, Serialized)
            {
                If (LEqual (Arg0, PCIG))
                {
                    If (LGreaterEqual (Arg1, 0x03))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                0x01, 0x03
                            })
                        }

                        If (LEqual (Arg2, 0x08))
                        {
                            Return (One)
                        }

                        If (LEqual (Arg2, 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                    0x00
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PCIC, 1, Serialized)
        {
            If (LEqual (ECR1, One))
            {
                If (LEqual (Arg0, PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }
    }

    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        RCRV,   32, 
        PCHS,   16, 
        PCHG,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SBRG,   32, 
        GPEM,   32, 
        G2L0,   32, 
        G2L1,   32, 
        G2L2,   32, 
        G2L3,   32, 
        G2L4,   32, 
        G2L5,   32, 
        G2L6,   32, 
        G2L7,   32, 
        G2L8,   32, 
        G2L9,   32, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        U0C0,   32, 
        U1C0,   32, 
        ADPM,   32, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SMD0,   8, 
        SMD1,   8, 
        SMD2,   8, 
        SMD3,   8, 
        SMD4,   8, 
        SMD5,   8, 
        SMD6,   8, 
        SMD7,   8, 
        SMD8,   8, 
        SMD9,   8, 
        SMDA,   8, 
        SIR0,   8, 
        SIR1,   8, 
        SIR2,   8, 
        SIR3,   8, 
        SIR4,   8, 
        SIR5,   8, 
        SIR6,   8, 
        SIR7,   8, 
        SIR8,   8, 
        SIR9,   8, 
        SIRA,   8, 
        SB00,   32, 
        SB01,   32, 
        SB02,   32, 
        SB03,   32, 
        SB04,   32, 
        SB05,   32, 
        SB06,   32, 
        SB07,   32, 
        SB08,   32, 
        SB09,   32, 
        SB0A,   32, 
        SB10,   32, 
        SB11,   32, 
        SB12,   32, 
        SB13,   32, 
        SB14,   32, 
        SB15,   32, 
        SB16,   32, 
        SB17,   32, 
        SB18,   32, 
        SB19,   32, 
        SB1A,   32, 
        GPEN,   8, 
        SGIR,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
                Offset (0x1E6), 
        SXRB,   32, 
        SXRS,   32, 
        CIOE,   8, 
        CIOI,   8, 
        TAEN,   8, 
        TIRQ,   8, 
        XWMB,   32, 
        EMH4,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8
    }

    Scope (_SB)
    {
        Name (GCOM, Package (0x02)
        {
            Package (0x08)
            {
                0x00AF0000, 
                0x00AF0000, 
                0x00AE0000, 
                0x00AE0000, 
                0x00AE0000, 
                0x00AC0000, 
                0x00AC0000, 
                0x00AD0000
            }, 

            Package (0x0A)
            {
                0x00AF0000, 
                0x00AF0000, 
                0x00AE0000, 
                0x00AE0000, 
                0x00AE0000, 
                0x00AE0000, 
                0x00AE0000, 
                0x00AE0000, 
                0x00AC0000, 
                0x00AD0000
            }
        })
        Name (GPPG, Package (0x02)
        {
            Package (0x08)
            {
                0x18, 
                0x18, 
                0x18, 
                0x18, 
                0x18, 
                0x18, 
                0x08, 
                0x0C
            }, 

            Package (0x0A)
            {
                0x18, 
                0x18, 
                0x18, 
                0x18, 
                0x0D, 
                0x18, 
                0x18, 
                0x18, 
                0x0B, 
                0x0C
            }
        })
        Name (PCFG, Package (0x02)
        {
            Package (0x08)
            {
                0x0400, 
                0x04C0, 
                0x0400, 
                0x04C0, 
                0x0580, 
                0x0400, 
                0x04C0, 
                0x0400
            }, 

            Package (0x0A)
            {
                0x0400, 
                0x04C0, 
                0x0400, 
                0x04C0, 
                0x0580, 
                0x05E8, 
                0x06A8, 
                0x0768, 
                0x0400, 
                0x0400
            }
        })
        Name (HOWN, Package (0x02)
        {
            Package (0x08)
            {
                0xD0, 
                0xD4, 
                0xD0, 
                0xD4, 
                0xD8, 
                0xD0, 
                0xD4, 
                0xD0
            }, 

            Package (0x0A)
            {
                0xD0, 
                0xD4, 
                0xD0, 
                0xD4, 
                0xD8, 
                0xDC, 
                0xE0, 
                0xE4, 
                0xD0, 
                0xD0
            }
        })
        Name (POWN, Package (0x02)
        {
            Package (0x08)
            {
                0x20, 
                0x30, 
                0x20, 
                0x30, 
                0x40, 
                0x20, 
                0x30, 
                0x20
            }, 

            Package (0x0A)
            {
                0x20, 
                0x2C, 
                0x20, 
                0x2C, 
                0x38, 
                0x40, 
                0x4C, 
                0x58, 
                0x20, 
                0x20
            }
        })
        Name (GPEO, Package (0x02)
        {
            Package (0x08)
            {
                0x0140, 
                0x0144, 
                0x0140, 
                0x0144, 
                0x0148, 
                0x0140, 
                0x0144, 
                0x0140
            }, 

            Package (0x0A)
            {
                0x0140, 
                0x0144, 
                0x0140, 
                0x0144, 
                0x0148, 
                0x014C, 
                0x0150, 
                0x0154, 
                0x0140, 
                0x0140
            }
        })
        Name (GPES, Package (0x0A)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (RXEV, Package (0x0A)
        {
            Ones, 
            Ones, 
            Ones, 
            Ones, 
            Ones, 
            Ones, 
            Ones, 
            Ones, 
            Ones, 
            Ones
        })
        Method (GNUM, 1, NotSerialized)
        {
            Store (GNMB (Arg0), Local1)
            Store (GGRP (Arg0), Local2)
            Return (Add (Local1, Multiply (Local2, 0x18)))
        }

        Method (INUM, 1, NotSerialized)
        {
            If (LEqual (PCHS, 0x02))
            {
                Store (Zero, Local0)
            }
            Else
            {
                Store (One, Local0)
            }

            Store (GNMB (Arg0), Local1)
            Store (GGRP (Arg0), Local2)
            Store (Zero, Local3)
            While (LLess (Local3, Local2))
            {
                Add (DerefOf (Index (DerefOf (Index (GPPG, Local0)), Local3)), 
                    Local1, Local1)
                Increment (Local3)
            }

            Return (Add (0x18, Mod (Local1, 0x60)))
        }

        Method (GGRP, 1, Serialized)
        {
            ShiftRight (And (Arg0, 0x00FF0000), 0x10, Local0)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return (And (Arg0, 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (And (ShiftRight (GPEM, Multiply (Local0, 0x02)), 0x03
                ), Local2)
            If (LEqual (Local2, Zero))
            {
                Return (0x6F)
            }
            Else
            {
                Return (Add (Multiply (Subtract (Local2, One), 0x20), Local1
                    ))
            }
        }

        Method (GADR, 2, NotSerialized)
        {
            If (LEqual (PCHS, 0x02))
            {
                Store (Zero, Local0)
            }
            Else
            {
                Store (One, Local0)
            }

            Store (Add (DerefOf (Index (DerefOf (Index (GCOM, Local0)), Arg0
                )), SBRG), Local1)
            Store (DerefOf (Index (DerefOf (Index (Arg1, Local0)), Arg0)), 
                Local2)
            Return (Add (Local1, Local2))
        }

        Method (GPC0, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP)
        }

        Method (SPC0, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Store (Arg1, TEMP)
        }

        Method (GPC1, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)
                ), 0x04), Local2)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP)
        }

        Method (SPC1, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)
                ), 0x04), Local2)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Store (Arg1, TEMP)
        }

        Method (SRXO, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                        Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GGIV, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                        Offset (0x04)
            }

            Return (TEMP)
        }

        Method (GGOV, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                        Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SGOV, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                        Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GGII, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                        Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SGII, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                        Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GPMV, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                        Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SPMV, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                        Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GHPO, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            OperationRegion (PREG, SystemMemory, GADR (Local0, HOWN), 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (And (ShiftRight (TEMP, Local1), One))
        }

        Method (SHPO, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            OperationRegion (PREG, SystemMemory, GADR (Local0, HOWN), 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Or (And (TEMP, Not (ShiftLeft (One, Local1))), 
                ShiftLeft (Arg1, Local1), TEMP)
        }

        Method (GGPO, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, POWN), Multiply (ShiftRight (Local1, 0x03), 
                0x04)), Local2)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (And (ShiftRight (TEMP, Multiply (And (Local1, 0x07), 0x04
                )), 0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                        Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (SGWP, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)
                ), 0x04), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                        Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (UGP1, 1, Serialized)
        {
            OperationRegion (GPPX, SystemMemory, GADR (Arg0, GPEO), 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                        Offset (0x20), 
                GENX,   32
            }

            If (LEqual (And (ShiftRight (GPEM, Multiply (Arg0, 0x02)), 
                0x03), Zero))
            {
                Store (And (STSX, GENX), Index (GPES, Arg0))
            }
            Else
            {
                Store (Zero, Index (GPES, Arg0))
            }
        }

        Method (UGPS, 0, Serialized)
        {
            If (LEqual (PCHS, One))
            {
                Store (0x0A, Local0)
            }
            Else
            {
                Store (0x08, Local0)
            }

            While (Local0)
            {
                Decrement (Local0)
                UGP1 (Local0)
            }
        }

        Method (CGP1, 2, Serialized)
        {
            If (LEqual (And (ShiftRight (GPEM, Multiply (Arg0, 0x02)), 
                0x03), Zero))
            {
                OperationRegion (GPPX, SystemMemory, GADR (Arg0, GPEO), 0x04)
                Field (GPPX, AnyAcc, NoLock, Preserve)
                {
                    STSX,   32
                }

                Store (Arg1, STSX)
            }
        }

        Method (CGPS, 0, Serialized)
        {
            If (LEqual (PCHS, One))
            {
                Store (0x0A, Local0)
            }
            Else
            {
                Store (0x08, Local0)
            }

            While (Local0)
            {
                Decrement (Local0)
                CGP1 (Local0, 0xFFFFFFFF)
            }
        }

        Method (CGLS, 0, Serialized)
        {
            If (LEqual (PCHS, One))
            {
                Store (0x0A, Local0)
            }
            Else
            {
                Store (0x08, Local0)
            }

            While (Local0)
            {
                Decrement (Local0)
                If (LEqual (Local0, 0x09))
                {
                    Store (G2L9, Local1)
                }
                Else
                {
                    If (LEqual (Local0, 0x08))
                    {
                        Store (G2L8, Local1)
                    }
                    Else
                    {
                        If (LEqual (Local0, 0x07))
                        {
                            Store (G2L7, Local1)
                        }
                        Else
                        {
                            If (LEqual (Local0, 0x06))
                            {
                                Store (G2L6, Local1)
                            }
                            Else
                            {
                                If (LEqual (Local0, 0x05))
                                {
                                    Store (G2L5, Local1)
                                }
                                Else
                                {
                                    If (LEqual (Local0, 0x04))
                                    {
                                        Store (G2L4, Local1)
                                    }
                                    Else
                                    {
                                        If (LEqual (Local0, 0x03))
                                        {
                                            Store (G2L3, Local1)
                                        }
                                        Else
                                        {
                                            If (LEqual (Local0, 0x02))
                                            {
                                                Store (G2L2, Local1)
                                            }
                                            Else
                                            {
                                                If (LEqual (Local0, One))
                                                {
                                                    Store (G2L1, Local1)
                                                }
                                                Else
                                                {
                                                    If (LEqual (Local0, Zero))
                                                    {
                                                        Store (G2L0, Local1)
                                                    }
                                                    Else
                                                    {
                                                        Continue
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                CGP1 (Local0, Local1)
            }
        }

        Method (CAGS, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            If (LEqual (And (ShiftRight (GPEM, Multiply (Local0, 0x02)), 
                0x03), Zero))
            {
                OperationRegion (GPPX, SystemMemory, GADR (Local0, GPEO), 0x04)
                Field (GPPX, AnyAcc, NoLock, Preserve)
                {
                    STSX,   32
                }

                Store (STSX, Local3)
                ShiftLeft (One, Local1, Local2)
                Or (STSX, Local2, STSX)
            }
        }

        Method (ISME, 1, NotSerialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Return (And (ShiftRight (DerefOf (Index (GPES, Local0)), Local1), 
                One))
        }

        Method (DIPI, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                        Offset (0x04)
            }

            If (LNotEqual (RCFG, 0x02))
            {
                Store (DerefOf (Index (RXEV, Local0)), Local3)
                And (Local3, Not (ShiftLeft (0x03, Multiply (Local1, 0x02))
                    ), Local3)
                Or (Local3, ShiftLeft (RCFG, Multiply (Local1, 0x02)), Index (
                    RXEV, Local0))
                Store (0x02, RCFG)
                Store (One, RDIS)
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, PCFG), Multiply (Local1, 0x08)), 
                Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                        Offset (0x04)
            }

            Store (And (ShiftRight (DerefOf (Index (RXEV, Local0)), Multiply (Local1, 
                0x02)), 0x03), Local3)
            If (LNotEqual (Local3, 0x02))
            {
                Store (Zero, RDIS)
                Store (Local3, RCFG)
            }
        }
    }

    Scope (\)
    {
        Method (THEN, 0, Serialized)
        {
            OperationRegion (THBA, SystemMemory, 0xFE200000, 0x10)
            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32
            }

            Return (LNotEqual (DO00, 0xFFFFFFFF))
        }

        Method (THDA, 2, Serialized)
        {
            Store (0xFE200000, Local0)
            Add (Local0, Multiply (0x40, Multiply (0x80, Subtract (Arg0, 0x20)
                )), Local0)
            Add (Local0, Multiply (0x40, Arg1), Local0)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (LGreater (Add (Arg1, Arg2), SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Store (Zero, Local0)
            Store (Zero, Local1)
            While (LLess (Local1, Arg2))
            {
                Store (DerefOf (Index (Local3, Add (Arg1, Local1))), Local2)
                Add (Local0, ShiftLeft (Local2, Multiply (0x08, Local1)), Local0)
                Increment (Local1)
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (LNot (THEN ()))
            {
                Return (Zero)
            }

            Store (SizeOf (Arg0), Local0)
            Store (THDA (0x20, 0x16), Local1)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                        Offset (0x10), 
                DO10,   32, 
                        Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            Store (0x01000242, DO10)
            Store (Local0, WO00)
            Store (Zero, Local6)
            Store (Local0, Local7)
            While (LGreaterEqual (Local7, 0x08))
            {
                Store (STRD (Arg0, Local6, 0x08), QO00)
                Add (Local6, 0x08, Local6)
                Subtract (Local7, 0x08, Local7)
            }

            If (LGreaterEqual (Local7, 0x04))
            {
                Store (STRD (Arg0, Local6, 0x04), DO00)
                Add (Local6, 0x04, Local6)
                Subtract (Local7, 0x04, Local7)
            }

            If (LGreaterEqual (Local7, 0x02))
            {
                Store (STRD (Arg0, Local6, 0x02), WO00)
                Add (Local6, 0x02, Local6)
                Subtract (Local7, 0x02, Local7)
            }

            If (LGreaterEqual (Local7, One))
            {
                Store (STRD (Arg0, Local6, One), BO00)
                Add (Local6, One, Local6)
                Subtract (Local7, One, Local7)
            }

            Store (Zero, DO30)
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (SPTH, One)
    Name (SPTL, 0x02)
    Method (PCHV, 0, NotSerialized)
    {
        If (LEqual (PCHS, One))
        {
            Return (SPTH)
        }

        If (LEqual (PCHS, 0x02))
        {
            Return (SPTL)
        }

        Return (Zero)
    }

    Scope (_GPE)
    {
        Method (_L6D, 0, Serialized)
        {
            \_SB.PCI0.XHC.GPEH ()
            \_SB.PCI0.HDEF.GPEH ()
            \_SB.PCI0.GLAN.GPEH ()
            \_SB.PCI0.XDCI.GPEH ()
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02"))
            Name (_UID, "PCHRESV")
            Name (_STA, 0x03)
            Method (_CRS, 0, Serialized)
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x00AC0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDAD0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDB00000,         // Address Base
                        0x00500000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE036000,         // Address Base
                        0x00006000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE03D000,         // Address Base
                        0x003C3000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE410000,         // Address Base
                        0x003F0000,         // Address Length
                        )
                })
                Return (BUF0)
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02"))
            Name (_UID, "IoTraps")
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        )
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        )
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        )
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        )
                })
                CreateWordField (BUF0, 0x02, AMI0)
                CreateWordField (BUF0, 0x04, AMA0)
                CreateWordField (BUF1, 0x02, AMI1)
                CreateWordField (BUF1, 0x04, AMA1)
                CreateWordField (BUF2, 0x02, AMI2)
                CreateWordField (BUF2, 0x04, AMA2)
                CreateWordField (BUF3, 0x02, AMI3)
                CreateWordField (BUF3, 0x04, AMA3)
                Store (ITA0, AMI0)
                Store (ITA0, AMA0)
                Store (ITA1, AMI1)
                Store (ITA1, AMA1)
                Store (ITA2, AMI2)
                Store (ITA2, AMA2)
                Store (ITA3, AMI3)
                Store (ITA3, AMA3)
                If (LEqual (ITS0, One))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local0)
                }

                If (LEqual (ITS1, One))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local0)
                }

                If (LEqual (ITS2, One))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local0)
                }

                If (LEqual (ITS3, One))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local0)
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Method (_DSM, 4, Serialized)
        {
            If (PCIC (Arg0))
            {
                Return (PCID (Arg0, Arg1, Arg2, Arg3))
            }

            Return (Zero)
        }

        OperationRegion (LPC, PCI_Config, Zero, 0x0100)
        Field (LPC, AnyAcc, NoLock, Preserve)
        {
                    Offset (0x02), 
            CDID,   16, 
                    Offset (0x08), 
            CRID,   8, 
                    Offset (0x80), 
            IOD0,   8, 
            IOD1,   8, 
                    Offset (0xA0), 
                ,   9, 
            PRBL,   1, 
                    Offset (0xAC), 
                    Offset (0xAD), 
                    Offset (0xAE), 
            XUSB,   1, 
                    Offset (0xB8), 
                ,   22, 
            GR0B,   2, 
                    Offset (0xBC), 
                ,   2, 
            GR19,   2, 
                    Offset (0xC0), 
                    Offset (0xDC), 
                ,   2, 
            ESPI,   1
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PPMC)
        {
            Name (_ADR, 0x001F0002)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }

            OperationRegion (PMCB, PCI_Config, Zero, 0x0100)
            Field (PMCB, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                        Offset (0x40), 
                        Offset (0x41), 
                ACBA,   8, 
                        Offset (0x48), 
                    ,   12, 
                PWBA,   20
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }

            OperationRegion (SMBP, PCI_Config, Zero, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                        Offset (0x20), 
                    ,   5, 
                SBAR,   11, 
                        Offset (0x40), 
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMBI, SystemIO, ShiftLeft (SBAR, 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                        Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                Store (0x48, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Or (Arg0, One), TXSA)
                Store (0x44, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (DAT0)
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                Store (Arg2, DAT0)
                Store (0x48, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Or (Arg0, One), TXSA)
                Store (Arg1, HCOM)
                Store (0x48, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (DAT0)
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                And (Arg2, 0xFF, DAT1)
                And (ShiftRight (Arg2, 0x08), 0xFF, DAT0)
                Store (0x4C, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Or (Arg0, One), TXSA)
                Store (Arg1, HCOM)
                Store (0x4C, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (Or (ShiftLeft (DAT0, 0x08), DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Arg3, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                Store (SizeOf (Arg2), DAT0)
                Store (Zero, Local1)
                Store (DerefOf (Index (Arg2, Zero)), HBDR)
                Store (0x54, HCON)
                While (LGreater (SizeOf (Arg2), Local1))
                {
                    Store (0x0FA0, Local0)
                    While (LAnd (LNot (And (HSTS, 0x80)), Local0))
                    {
                        Decrement (Local0)
                        Stall (0x32)
                    }

                    If (LNot (Local0))
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Store (0x80, HSTS)
                    Increment (Local1)
                    If (LGreater (SizeOf (Arg2), Local1))
                    {
                        Store (DerefOf (Index (Arg2, Local1)), HBDR)
                    }
                }

                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100) {})
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Arg2, I2CE)
                Store (0xBF, HSTS)
                Store (Or (Arg0, One), TXSA)
                Store (Arg1, HCOM)
                Store (0x54, HCON)
                Store (0x0FA0, Local0)
                While (LAnd (LNot (And (HSTS, 0x80)), Local0))
                {
                    Decrement (Local0)
                    Stall (0x32)
                }

                If (LNot (Local0))
                {
                    KILL ()
                    Return (Zero)
                }

                Store (DAT0, Index (TBUF, Zero))
                Store (0x80, HSTS)
                Store (One, Local1)
                While (LLess (Local1, DerefOf (Index (TBUF, Zero))))
                {
                    Store (0x0FA0, Local0)
                    While (LAnd (LNot (And (HSTS, 0x80)), Local0))
                    {
                        Decrement (Local0)
                        Stall (0x32)
                    }

                    If (LNot (Local0))
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Store (HBDR, Index (TBUF, Local1))
                    Store (0x80, HSTS)
                    Increment (Local1)
                }

                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (TBUF)
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Store (0xC8, Local0)
                While (Local0)
                {
                    If (And (HSTS, 0x40))
                    {
                        Decrement (Local0)
                        Sleep (One)
                        If (LEqual (Local0, Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Store (Zero, Local0)
                    }
                }

                Store (0x0FA0, Local0)
                While (Local0)
                {
                    If (And (HSTS, One))
                    {
                        Decrement (Local0)
                        Stall (0x32)
                        If (LEqual (Local0, Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Store (0x0FA0, Local0)
                While (Local0)
                {
                    If (And (HSTS, 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Decrement (Local0)
                        Stall (0x32)
                        If (LEqual (Local0, Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                Or (HCON, 0x02, HCON)
                Or (HSTS, 0xFF, HSTS)
            }
        }
    }

    Scope (_SB)
    {
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, One)
            Method (_DIS, 0, Serialized)
            {
                Or (PARC, 0x80, PARC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSA)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLA, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLA, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PARC, 0x0F), IRQ0)
                Return (RTLA)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PARC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PARC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, 0x02)
            Method (_DIS, 0, Serialized)
            {
                Or (PBRC, 0x80, PBRC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSB)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLB, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLB, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PBRC, 0x0F), IRQ0)
                Return (RTLB)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PBRC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PBRC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, 0x03)
            Method (_DIS, 0, Serialized)
            {
                Or (PCRC, 0x80, PCRC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSC)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLC, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLC, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PCRC, 0x0F), IRQ0)
                Return (RTLC)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PCRC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PCRC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, 0x04)
            Method (_DIS, 0, Serialized)
            {
                Or (PDRC, 0x80, PDRC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSD)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLD, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLD, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PDRC, 0x0F), IRQ0)
                Return (RTLD)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PDRC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PDRC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, 0x05)
            Method (_DIS, 0, Serialized)
            {
                Or (PERC, 0x80, PERC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSE)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLE, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLE, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PERC, 0x0F), IRQ0)
                Return (RTLE)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PERC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PERC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, 0x06)
            Method (_DIS, 0, Serialized)
            {
                Or (PFRC, 0x80, PFRC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSF)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLF, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLF, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PFRC, 0x0F), IRQ0)
                Return (RTLF)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PFRC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PFRC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, 0x07)
            Method (_DIS, 0, Serialized)
            {
                Or (PGRC, 0x80, PGRC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSG)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLG, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLG, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PGRC, 0x0F), IRQ0)
                Return (RTLG)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PGRC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PGRC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F"))
            Name (_UID, 0x08)
            Method (_DIS, 0, Serialized)
            {
                Or (PHRC, 0x80, PHRC)
            }

            Method (_PRS, 0, Serialized)
            {
                Return (PRSH)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (RTLH, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLH, One, IRQ0)
                Store (Zero, IRQ0)
                ShiftLeft (One, And (PHRC, 0x0F), IRQ0)
                Return (RTLH)
            }

            Method (_SRS, 1, Serialized)
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Decrement (Local0)
                Store (Local0, PHRC)
            }

            Method (_STA, 0, Serialized)
            {
                If (And (PHRC, 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Add (ShiftLeft (Arg0, 0x10), Arg1, Local0)
            Add (SBRG, Local0, Local0)
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0)
        }

        Method (PCRW, 3, Serialized)
        {
            Add (ShiftLeft (Arg0, 0x10), Arg1, Local0)
            Add (SBRG, Local0, Local0)
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Store (Arg2, DAT0)
            OperationRegion (PCR1, SystemMemory, Add (SBRG, 0x00C73418), 0x04)
            Field (PCR1, DWordAcc, Lock, Preserve)
            {
                DAT1,   32
            }

            Store (DAT1, Local1)
        }

        Method (PCRO, 3, Serialized)
        {
            Store (PCRR (Arg0, Arg1), Local0)
            Store (Or (Local0, Arg2), Local1)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Store (PCRR (Arg0, Arg1), Local0)
            Store (And (Local0, Arg2), Local1)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Store (PCRR (Arg0, Arg1), Local0)
            Store (Or (And (Local0, Arg2), Arg3), Local1)
            PCRW (Arg0, Arg1, Local1)
        }

        Name (PMBV, Zero)
        Method (PMBS, 0, NotSerialized)
        {
            If (LEqual (PMBV, Zero))
            {
                Store (ShiftLeft (\_SB.PCI0.PPMC.ACBA, 0x08), PMBV)
            }

            Return (PMBV)
        }

        Name (PWRV, Zero)
        Method (PWRM, 0, NotSerialized)
        {
            If (LEqual (PWRV, Zero))
            {
                Store (ShiftLeft (\_SB.PCI0.PPMC.PWBA, 0x0C), PWRV)
            }

            Return (PWRV)
        }

        Name (TCBV, Zero)
        Method (TCBS, 0, NotSerialized)
        {
            If (LEqual (TCBV, Zero))
            {
                Store (PCRR (0xEF, 0x2778), Local0)
                And (Local0, 0xFFE0, TCBV)
            }

            Return (TCBV)
        }

        OperationRegion (PMIO, SystemIO, PMBS (), 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
                    Offset (0x01), 
            PBSS,   1, 
                    Offset (0x40), 
                ,   17, 
            GPEC,   1
        }

        OperationRegion (PMLP, SystemIO, Add (PMBS (), 0x80), 0x20)
        Field (PMLP, ByteAcc, NoLock, Preserve)
        {
                    Offset (0x10), 
                    Offset (0x11), 
            GE08,   1, 
                ,   8, 
            GE17,   1, 
                ,   17, 
            GE35,   1, 
                ,   9, 
            GE45,   1, 
                    Offset (0x16), 
            GE48,   1, 
                ,   2, 
            GE51,   1, 
                    Offset (0x20)
        }

        Field (PMLP, ByteAcc, NoLock, WriteAsZeros)
        {
                    Offset (0x01), 
            GS08,   1, 
                ,   8, 
            GS17,   1, 
                ,   17, 
            GS35,   1, 
                ,   9, 
            GS45,   1, 
                    Offset (0x06), 
            GS48,   1, 
                ,   2, 
            GS51,   1, 
                ,   2, 
            GS54,   1, 
            GS55,   1, 
                    Offset (0x10)
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
                    Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM (), 0x0800)
        Field (PWMR, AnyAcc, NoLock, Preserve)
        {
                    Offset (0xE0), 
                    Offset (0xE2), 
            DWLE,   1, 
            HWLE,   1
        }

        OperationRegion (PMST, SystemMemory, PWRV, 0x80)
        Field (PMST, DWordAcc, NoLock, Preserve)
        {
                    Offset (0x18), 
                ,   25, 
            USBP,   1, 
                    Offset (0x1C), 
                    Offset (0x1F), 
            PMFS,   1, 
                    Offset (0x20), 
            MPMC,   32, 
                ,   20, 
            UWAB,   1
        }
    }

    Scope (_SB.PCI0)
    {
        Name (LTRN, Zero)
        Name (OBFN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Device (GLAN)
        {
            Name (_ADR, 0x001F0006)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }

            OperationRegion (GLBA, PCI_Config, Zero, 0x0100)
            Field (GLBA, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                        Offset (0xCC), 
                        Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)
            {
                Store (Arg0, PMEE)
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                If (LAnd (PMEE, PMES))
                {
                    Store (One, PMES)
                    Notify (GLAN, 0x02)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XHC)
        {
            Name (_ADR, 0x00140000)
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                        Offset (0x74), 
                D0D3,   2, 
                        Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                        Offset (0xA8), 
                    ,   13, 
                MW13,   1, 
                MW14,   1, 
                        Offset (0xAC), 
                        Offset (0xB0), 
                    ,   13, 
                MB13,   1, 
                MB14,   1, 
                        Offset (0xB4), 
                        Offset (0xD0), 
                PR2,    32, 
                PR2M,   32, 
                PR3,    32, 
                PR3M,   32
            }

            Name (XFLT, Zero)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xB7, 0x0C, 0x34, 0xAC, 0x01, 0xE9, 0xBF, 0x45, 
                            /* 0008 */    0xB7, 0xE6, 0x2B, 0x34, 0xEC, 0x93, 0x1E, 0x23
                        }))
                {
                    If (LEqual (Arg1, 0x03))
                    {
                        Store (Arg1, XFLT)
                    }
                }

                Return (Zero)
            }

            Method (_S3D, 0, NotSerialized)
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)
            {
                If (LEqual (XFLT, Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_PRW, 0, NotSerialized)
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)
            {
                Store (Arg0, PMEE)
            }

            Method (_INI, 0, NotSerialized)
            {
                If (CondRefOf (\_SB.PCI0.XHC.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                Store (PMES, Local0)
                Store (One, PMES)
                If (LAnd (PMEE, Local0))
                {
                    Notify (XHC, 0x02)
                }
            }

            OperationRegion (XHCP, SystemMemory, Add (GPCB (), 0x000A0000), 0x0100)
            Field (XHCP, AnyAcc, Lock, Preserve)
            {
                        Offset (0x04), 
                PDBM,   16, 
                        Offset (0x10), 
                MEMB,   64
            }

            Method (USRA, 0, Serialized)
            {
                If (LEqual (PCHV (), SPTH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (SSPA, 0, Serialized)
            {
                If (LEqual (PCHV (), SPTH))
                {
                    Return (0x11)
                }
                Else
                {
                    Return (0x0D)
                }
            }

            Name (XRST, Zero)
            Method (_PS0, 0, Serialized)
            {
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                Store (MEMB, Local2)
                Store (PDBM, Local1)
                And (PDBM, 0xFFFFFFFFFFFFFFF9, PDBM)
                Store (D0D3, Local3)
                Store (Zero, D0D3)
                Store (XWMB, MEMB)
                Or (Local1, 0x02, PDBM)
                OperationRegion (MC11, SystemMemory, XWMB, 0x9000)
                Field (MC11, DWordAcc, Lock, Preserve)
                {
                            Offset (0x81C4), 
                        ,   2, 
                    UPSW,   2
                }

                Store (Zero, UPSW)
                And (PDBM, 0xFFFFFFFFFFFFFFFD, PDBM)
                Store (Local2, MEMB)
                Store (Local1, PDBM)
                If (CondRefOf (\_SB.PCI0.XHC.PS0X))
                {
                    PS0X
                }

                If (LAnd (UWAB, LOr (LEqual (D0D3, Zero), LEqual (^^XDCI.D0I3, Zero))))
                {
                    Store (One, MPMC)
                    While (PMFS)
                    {
                        Sleep (0x0A)
                    }
                }
            }

            Method (_PS3, 0, Serialized)
            {
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                Store (MEMB, Local2)
                Store (PDBM, Local1)
                And (PDBM, 0xFFFFFFFFFFFFFFF9, PDBM)
                Store (Zero, D0D3)
                Store (XWMB, MEMB)
                Or (Local1, 0x02, PDBM)
                OperationRegion (MC11, SystemMemory, XWMB, 0x9000)
                Field (MC11, DWordAcc, Lock, Preserve)
                {
                            Offset (0x81C4), 
                        ,   2, 
                    UPSW,   2
                }

                Store (0x03, UPSW)
                And (PDBM, 0xFFFFFFFFFFFFFFFD, PDBM)
                Store (0x03, D0D3)
                Store (Local2, MEMB)
                Store (Local1, PDBM)
                If (CondRefOf (\_SB.PCI0.XHC.PS3X))
                {
                    PS3X
                }

                If (LAnd (UWAB, LAnd (LEqual (D0D3, 0x03), LOr (LEqual (^^XDCI.D0I3, 
                    0x03), LEqual (^^XDCI.DVID, 0xFFFF)))))
                {
                    Store (0x03, MPMC)
                    While (PMFS)
                    {
                        Sleep (0x0A)
                    }
                }
            }

            Method (CUID, 1, Serialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xA9, 0x12, 0x95, 0x7C, 0x05, 0x17, 0xB4, 0x4C, 
                            /* 0008 */    0xAF, 0x7D, 0x50, 0x6A, 0x24, 0x23, 0xAB, 0x71
                        }))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)
                Method (_PS0, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS0X))
                    {
                        PS0X
                    }
                }

                Method (_PS2, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS2X))
                    {
                        PS2X
                    }
                }

                Method (_PS3, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS3X))
                    {
                        PS3X
                    }
                }

                Device (HS01)
                {
                    Name (_ADR, One)
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)
                }

                Device (HS09)
                {
                    Name (_ADR, 0x09)
                }

                Device (HS10)
                {
                    Name (_ADR, 0x0A)
                }

                Device (USR1)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (USRA (), Zero))
                    }
                }

                Device (USR2)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (USRA (), One))
                    }
                }

                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (SSPA (), Zero))
                    }
                }

                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (SSPA (), One))
                    }
                }

                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (SSPA (), 0x02))
                    }
                }

                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (SSPA (), 0x03))
                    }
                }

                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (SSPA (), 0x04))
                    }
                }

                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)
                    {
                        Return (Add (SSPA (), 0x05))
                    }
                }
            }
        }
    }

    If (LEqual (PCHV (), SPTH))
    {
        Scope (_SB.PCI0.XHC.RHUB)
        {
            Device (HS11)
            {
                Name (_ADR, 0x0B)
            }

            Device (HS12)
            {
                Name (_ADR, 0x0C)
            }

            Device (HS13)
            {
                Name (_ADR, 0x0D)
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)
            }

            Device (SS07)
            {
                Method (_ADR, 0, NotSerialized)
                {
                    Return (Add (SSPA (), 0x06))
                }
            }

            Device (SS08)
            {
                Method (_ADR, 0, NotSerialized)
                {
                    Return (Add (SSPA (), 0x07))
                }
            }

            Device (SS09)
            {
                Method (_ADR, 0, NotSerialized)
                {
                    Return (Add (SSPA (), 0x08))
                }
            }

            Device (SS10)
            {
                Method (_ADR, 0, NotSerialized)
                {
                    Return (Add (SSPA (), 0x09))
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)
            OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                        Offset (0x10), 
                XDCB,   64, 
                        Offset (0x74), 
                D0I3,   2, 
                        Offset (0x84), 
                        Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return (And (XDCB, 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)
            {
                Name (_T_0, Zero)
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xD5, 0x85, 0x2B, 0x73, 0xA7, 0xB7, 0x1B, 0x4A, 
                            /* 0008 */    0x9B, 0xA0, 0x4B, 0xBD, 0x00, 0xFF, 0xD5, 0x11
                        }))
                {
                    If (LEqual (Arg1, One))
                    {
                        While (One)
                        {
                            Store (Arg2, _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Return (Buffer (One)
                                {
                                    0x73
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_0, One))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x04))
                                    {
                                        OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                                        Field (XDBW, WordAcc, NoLock, Preserve)
                                        {
                                                    Offset (0x10F810), 
                                                    Offset (0x10F811), 
                                            U2CP,   2, 
                                            U3CP,   2, 
                                                    Offset (0x10F818), 
                                            PUPS,   2, 
                                                ,   1, 
                                            PURC,   1, 
                                                    Offset (0x10F81A), 
                                                    Offset (0x10F81C), 
                                                ,   3, 
                                            UXPE,   2, 
                                                    Offset (0x10F81E)
                                        }

                                        Store (DerefOf (Index (Arg3, Zero)), Local1)
                                        If (LEqual (Local1, Zero))
                                        {
                                            Store (Zero, UXPE)
                                            Store (Zero, PURC)
                                            Store (Zero, Local0)
                                            While (LLess (Local0, 0x0A))
                                            {
                                                Stall (0x64)
                                                Increment (Local0)
                                            }

                                            Store (Zero, PUPS)
                                            Store (Zero, Local0)
                                            While (LLess (Local0, 0x07D0))
                                            {
                                                Stall (0x64)
                                                If (LAnd (LEqual (U2CP, Zero), LEqual (U3CP, Zero)))
                                                {
                                                    Break
                                                }

                                                Increment (Local0)
                                            }

                                            If (LNotEqual (U2CP, Zero)) {}
                                            If (LNotEqual (U3CP, Zero)) {}
                                            Return (Zero)
                                        }

                                        If (LEqual (Local1, 0x03))
                                        {
                                            If (LNotEqual (U2CP, Zero)) {}
                                            If (LNotEqual (U3CP, Zero)) {}
                                            Store (0x03, PUPS)
                                            Store (Zero, Local0)
                                            While (LLess (Local0, 0x07D0))
                                            {
                                                Stall (0x64)
                                                If (LAnd (LEqual (U2CP, 0x03), LEqual (U3CP, 0x03)))
                                                {
                                                    Break
                                                }

                                                Increment (Local0)
                                            }

                                            If (LNotEqual (U2CP, 0x03)) {}
                                            If (LNotEqual (U3CP, 0x03)) {}
                                            Store (One, PURC)
                                            Store (0x03, UXPE)
                                            Return (Zero)
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x05))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x06))
                                            {
                                                OperationRegion (XDBD, SystemMemory, XDBA (), 0x00110000)
                                                Field (XDBD, DWordAcc, NoLock, Preserve)
                                                {
                                                            Offset (0xC704), 
                                                        ,   30, 
                                                    CSFR,   1, 
                                                            Offset (0xC708)
                                                }

                                                OperationRegion (XDW2, SystemMemory, XDBA (), 0x00110000)
                                                Field (XDW2, WordAcc, NoLock, Preserve)
                                                {
                                                            Offset (0x10F820), 
                                                        ,   13, 
                                                    OTHC,   1
                                                }

                                                If (LEqual (OTHC, Zero))
                                                {
                                                    Store (One, CSFR)
                                                    Store (Zero, Local0)
                                                    While (LLess (Local0, 0x64))
                                                    {
                                                        If (LEqual (CSFR, Zero))
                                                        {
                                                            Break
                                                        }

                                                        Sleep (One)
                                                    }
                                                }

                                                Return (Zero)
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }
                }

                Return (Zero)
            }

            Name (_DDN, "SPT XHCI controller")
            Name (_STR, Unicode ("SPT XHCI controller"))
            Method (_S0W, 0, NotSerialized)
            {
                Return (0x03)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LNotEqual (DVID, 0xFFFFFFFF))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PRW, 0, NotSerialized)
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)
            {
                Store (Arg0, PMEE)
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                Store (PMES, Local0)
                Store (One, PMES)
                If (LAnd (PMEE, Local0))
                {
                    Notify (XDCI, 0x02)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HDEF)
        {
            Name (_ADR, 0x001F0003)
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                        Offset (0x48), 
                    ,   6, 
                MBCG,   1, 
                        Offset (0x54), 
                        Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)
            Method (_DSW, 3, NotSerialized)
            {
                Store (Arg0, PMEE)
            }

            Method (_PRW, 0, NotSerialized)
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If (LAnd (PMEE, PMES))
                {
                    ADBG ("HDEF GPEH")
                    Store (One, PMES)
                    Notify (HDEF, 0x02)
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeACPI, TypeStatic)
            })
            Method (AUWA, 0, Serialized)
            {
                If (LEqual (PCHS, One))
                {
                    If (LEqual (^^LPCB.CRID, Zero))
                    {
                        Return (One)
                    }
                }
                Else
                {
                    If (LEqual (^^LPCB.CRID, Zero))
                    {
                        Return (One)
                    }

                    If (LEqual (^^LPCB.CRID, One))
                    {
                        Return (One)
                    }

                    If (LEqual (^^LPCB.CRID, 0x09))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)
            {
                ADBG ("HDEF _INI")
                CreateQWordField (NBUF, 0x0E, NBAS)
                CreateQWordField (NBUF, 0x16, NMAS)
                CreateQWordField (NBUF, 0x26, NLEN)
                Store (NHLA, NBAS)
                Add (NHLA, Subtract (NHLL, One), NMAS)
                Store (NHLL, NLEN)
                If (LEqual (AUWA (), One))
                {
                    Store (Zero, MBCG)
                }
            }

            Method (_DSM, 4, Serialized)
            {
                Name (_T_0, Zero)
                ADBG ("HDEF _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x6E, 0x88, 0x9F, 0xA6, 0xEB, 0x6C, 0x94, 0x45, 
                            /* 0008 */    0xA4, 0x1F, 0x7B, 0x5D, 0xCE, 0x24, 0xC5, 0x53
                        }))
                {
                    While (One)
                    {
                        Store (Arg2, _T_0)
                        If (LEqual (_T_0, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x0F
                            })
                        }
                        Else
                        {
                            If (LEqual (_T_0, One))
                            {
                                ADBG ("_DSM Fun 1 NHLT")
                                Return (NBUF)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x02))
                                {
                                    ADBG ("_DSM Fun 2 FMSK")
                                    Return (ADFM)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x03))
                                    {
                                        ADBG ("_DSM Fun 3 PPMS")
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        ADBG ("_DSM Fun NOK")
                                        Return (Buffer (One)
                                        {
                                            0x00
                                        })
                                    }
                                }
                            }
                        }

                        Break
                    }
                }

                ADBG ("_DSM UUID NOK")
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x00170000)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (\_SB.PCI0.SAT0.SDSM))
                {
                    Return (SDSM)
                    Arg0
                    Arg1
                    Arg2
                    Arg3
                }

                Return (Zero)
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)
            }

            Method (RDCA, 5, Serialized)
            {
                Name (_T_0, Zero)
                OperationRegion (RPAL, SystemMemory, Add (GPCB (), Add (0x000B8100, Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, Add (GPCB (), 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, Add (GPCB (), 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If (LGreater (Arg0, 0x02))
                {
                    Return (Zero)
                }
                Else
                {
                    Store (Arg0, CRGC)
                }

                While (One)
                {
                    Store (ToInteger (Arg4), _T_0)
                    If (LEqual (_T_0, Zero))
                    {
                        Return (RPCD)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (Arg1, CAIR)
                            Return (CADR)
                        }
                        Else
                        {
                            If (LEqual (_T_0, One))
                            {
                                And (Arg2, RPCD, Local0)
                                Or (Arg3, Local0, Local0)
                                Store (Local0, RPCD)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x03))
                                {
                                    Store (Arg1, CAIR)
                                    And (Arg2, CADR, Local0)
                                    Or (Arg3, Local0, Local0)
                                    Store (Local0, CADR)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                    }

                    Break
                }
            }

            Method (RPD0, 1, Serialized)
            {
                RDCA (Arg0, 0xA4, 0xFFFFFFFC, Zero, One)
            }

            Method (RPD3, 1, Serialized)
            {
                RDCA (Arg0, 0xA4, 0xFFFFFFFC, 0x03, One)
            }

            Device (NVM1)
            {
                Name (_ADR, 0x00C1FFFF)
                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Method (EPD0, 0, Serialized)
                {
                    RDCA (NCRN, Add (NPMV, 0x04), 0xFFFFFFFC, Zero, 0x03)
                }

                Method (EPD3, 0, Serialized)
                {
                    RDCA (NCRN, Add (NPMV, 0x04), 0xFFFFFFFC, 0x03, 0x03)
                }

                Method (CNRS, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    If (LNotEqual (NL1V, Zero))
                    {
                        RDCA (NCRN, Add (NL1V, 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, Add (NL1V, 0x08), 0x0F, And (ND1V, 0xFFFFFFF0
                            ), 0x03)
                        RDCA (NCRN, Add (NL1V, 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If (LNotEqual (NLRV, Zero))
                    {
                        RDCA (NCRN, Add (NLRV, 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, Add (NPCV, 0x10), 0xFFFFFEBF, And (NEAV, 0xFFFC
                        ), 0x03)
                    RDCA (NCRN, Add (NPCV, 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, Add (NPCV, 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (LEqual (And (NEAV, 0x40), 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (LEqual (And (RDCA (NCRN, 0x52, Zero, Zero, Zero), 0x2000
                            ), Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, Add (NPCV, 0x10), 0xFFFFFFFC, And (NEAV, 0x03
                        ), 0x03)
                    If (LNotEqual (NMVV, Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If (LNotEqual (NPVV, Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }

                Method (_PS3, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    Store (RDCA (NCRN, 0x04, Zero, Zero, 0x02), PCMD)
                    If (LEqual (NITV, One))
                    {
                        Store (0x24, PRBI)
                        Store (RDCA (NCRN, 0x24, Zero, Zero, 0x02), PRBD)
                    }
                    Else
                    {
                        If (LEqual (NITV, 0x02))
                        {
                            Store (0x10, PRBI)
                            Store (RDCA (NCRN, 0x10, Zero, Zero, 0x02), PRBD)
                        }
                    }

                    EPD3 ()
                    RPD3 (NCRN)
                }

                Method (_PS0, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    RPD0 (NCRN)
                    EPD0 ()
                    Store (RDCA (NCRN, Add (NPMV, 0x04), Zero, Zero, 0x02), 
                        Local0)
                    If (LEqual (And (Local0, 0x08), Zero))
                    {
                        CNRS ()
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (NIT1, NITV)
                    Store (NPM1, NPMV)
                    Store (NPC1, NPCV)
                    Store (NL11, NL1V)
                    Store (ND21, ND2V)
                    Store (ND11, ND1V)
                    Store (NLR1, NLRV)
                    Store (NLD1, NLDV)
                    Store (NEA1, NEAV)
                    Store (NEB1, NEBV)
                    Store (NEC1, NECV)
                    Store (NRA1, NRAV)
                    Store (NMB1, NMBV)
                    Store (NMV1, NMVV)
                    Store (NPB1, NPBV)
                    Store (NPV1, NPVV)
                    Store (Zero, NCRN)
                }
            }

            Device (NVM2)
            {
                Name (_ADR, 0x00C2FFFF)
                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Method (EPD0, 0, Serialized)
                {
                    RDCA (NCRN, Add (NPMV, 0x04), 0xFFFFFFFC, Zero, 0x03)
                }

                Method (EPD3, 0, Serialized)
                {
                    RDCA (NCRN, Add (NPMV, 0x04), 0xFFFFFFFC, 0x03, 0x03)
                }

                Method (CNRS, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    If (LNotEqual (NL1V, Zero))
                    {
                        RDCA (NCRN, Add (NL1V, 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, Add (NL1V, 0x08), 0x0F, And (ND1V, 0xFFFFFFF0
                            ), 0x03)
                        RDCA (NCRN, Add (NL1V, 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If (LNotEqual (NLRV, Zero))
                    {
                        RDCA (NCRN, Add (NLRV, 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, Add (NPCV, 0x10), 0xFFFFFEBF, And (NEAV, 0xFFFC
                        ), 0x03)
                    RDCA (NCRN, Add (NPCV, 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, Add (NPCV, 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (LEqual (And (NEAV, 0x40), 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (LEqual (And (RDCA (NCRN, 0x52, Zero, Zero, Zero), 0x2000
                            ), Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, Add (NPCV, 0x10), 0xFFFFFFFC, And (NEAV, 0x03
                        ), 0x03)
                    If (LNotEqual (NMVV, Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If (LNotEqual (NPVV, Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }

                Method (_PS3, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    Store (RDCA (NCRN, 0x04, Zero, Zero, 0x02), PCMD)
                    If (LEqual (NITV, One))
                    {
                        Store (0x24, PRBI)
                        Store (RDCA (NCRN, 0x24, Zero, Zero, 0x02), PRBD)
                    }
                    Else
                    {
                        If (LEqual (NITV, 0x02))
                        {
                            Store (0x10, PRBI)
                            Store (RDCA (NCRN, 0x10, Zero, Zero, 0x02), PRBD)
                        }
                    }

                    EPD3 ()
                    RPD3 (NCRN)
                }

                Method (_PS0, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    RPD0 (NCRN)
                    EPD0 ()
                    Store (RDCA (NCRN, Add (NPMV, 0x04), Zero, Zero, 0x02), 
                        Local0)
                    If (LEqual (And (Local0, 0x08), Zero))
                    {
                        CNRS ()
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (NIT2, NITV)
                    Store (NPM2, NPMV)
                    Store (NPC2, NPCV)
                    Store (NL12, NL1V)
                    Store (ND22, ND2V)
                    Store (ND12, ND1V)
                    Store (NLR2, NLRV)
                    Store (NLD2, NLDV)
                    Store (NEA2, NEAV)
                    Store (NEB2, NEBV)
                    Store (NEC2, NECV)
                    Store (NRA2, NRAV)
                    Store (NMB2, NMBV)
                    Store (NMV2, NMVV)
                    Store (NPB2, NPBV)
                    Store (NPV2, NPVV)
                    Store (One, NCRN)
                }
            }

            Device (NVM3)
            {
                Name (_ADR, 0x00C3FFFF)
                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Method (EPD0, 0, Serialized)
                {
                    RDCA (NCRN, Add (NPMV, 0x04), 0xFFFFFFFC, Zero, 0x03)
                }

                Method (EPD3, 0, Serialized)
                {
                    RDCA (NCRN, Add (NPMV, 0x04), 0xFFFFFFFC, 0x03, 0x03)
                }

                Method (CNRS, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    If (LNotEqual (NL1V, Zero))
                    {
                        RDCA (NCRN, Add (NL1V, 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, Add (NL1V, 0x08), 0x0F, And (ND1V, 0xFFFFFFF0
                            ), 0x03)
                        RDCA (NCRN, Add (NL1V, 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If (LNotEqual (NLRV, Zero))
                    {
                        RDCA (NCRN, Add (NLRV, 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, Add (NPCV, 0x10), 0xFFFFFEBF, And (NEAV, 0xFFFC
                        ), 0x03)
                    RDCA (NCRN, Add (NPCV, 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, Add (NPCV, 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (LEqual (And (NEAV, 0x40), 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        While (LEqual (And (RDCA (NCRN, 0x52, Zero, Zero, Zero), 0x2000
                            ), Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    RDCA (NCRN, Add (NPCV, 0x10), 0xFFFFFFFC, And (NEAV, 0x03
                        ), 0x03)
                    If (LNotEqual (NMVV, Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If (LNotEqual (NPVV, Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }
                }

                Method (_PS3, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    Store (RDCA (NCRN, 0x04, Zero, Zero, 0x02), PCMD)
                    If (LEqual (NITV, One))
                    {
                        Store (0x24, PRBI)
                        Store (RDCA (NCRN, 0x24, Zero, Zero, 0x02), PRBD)
                    }
                    Else
                    {
                        If (LEqual (NITV, 0x02))
                        {
                            Store (0x10, PRBI)
                            Store (RDCA (NCRN, 0x10, Zero, Zero, 0x02), PRBD)
                        }
                    }

                    EPD3 ()
                    RPD3 (NCRN)
                }

                Method (_PS0, 0, Serialized)
                {
                    If (LEqual (NITV, Zero))
                    {
                        Return (Zero)
                    }

                    RPD0 (NCRN)
                    EPD0 ()
                    Store (RDCA (NCRN, Add (NPMV, 0x04), Zero, Zero, 0x02), 
                        Local0)
                    If (LEqual (And (Local0, 0x08), Zero))
                    {
                        CNRS ()
                    }
                }

                Method (_INI, 0, NotSerialized)
                {
                    Store (NIT3, NITV)
                    Store (NPM3, NPMV)
                    Store (NPC3, NPCV)
                    Store (NL13, NL1V)
                    Store (ND23, ND2V)
                    Store (ND13, ND1V)
                    Store (NLR3, NLRV)
                    Store (NLD3, NLDV)
                    Store (NEA3, NEAV)
                    Store (NEB3, NEBV)
                    Store (NEC3, NECV)
                    Store (NRA3, NRAV)
                    Store (NMB3, NMBV)
                    Store (NMV3, NMVV)
                    Store (NPB3, NPBV)
                    Store (NPV3, NPVV)
                    Store (0x02, NCRN)
                }
            }
        }

        Device (CIO2)
        {
            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (CIOE, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_HID, "INT343E")
            Method (_CRS, 0, NotSerialized)
            {
                Name (CBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000010,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFE400000,         // Address Base
                        0x00010000,         // Address Length
                        )
                })
                CreateDWordField (CBUF, 0x05, CIOV)
                Store (CIOI, CIOV)
                Return (CBUF)
            }
        }

        Device (TERM)
        {
            Name (_HID, "INT343D")
            Name (_UID, One)
            Method (_CRS, 0, NotSerialized)
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE03C000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000012,
                    }
                })
                CreateDWordField (RBUF, 0x11, IRQN)
                Store (TIRQ, IRQN)
                Return (RBUF)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (TAEN, Zero))
                {
                    Return (Zero)
                }

                If (LEqual (TIRQ, Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (LPD3, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Add (Arg0, 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Or (TEMP, 0x03, TEMP)
            Store (TEMP, Local0)
        }

        Method (LHRV, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Add (Arg0, 0x08), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                HRV,    8
            }

            Return (HRV)
        }

        Method (LPD0, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Add (Arg0, 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            And (TEMP, 0xFFFFFFFC, TEMP)
            Store (TEMP, Local0)
        }

        Method (GETD, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Add (Arg0, 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (And (TEMP, 0x03))
        }

        Method (LCRS, 3, Serialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000014,
                }
            })
            CreateDWordField (RBUF, 0x04, BVAL)
            CreateDWordField (RBUF, 0x08, BLEN)
            CreateDWordField (RBUF, 0x11, IRQN)
            Store (Arg1, BVAL)
            Store (Arg2, IRQN)
            If (LEqual (Arg0, 0x04))
            {
                Store (0x08, BLEN)
            }

            Return (RBUF)
        }

        Method (LSTA, 1, Serialized)
        {
            If (LOr (LEqual (Arg0, Zero), LEqual (Arg0, 0x03)))
            {
                Return (Zero)
            }

            If (LLess (OSYS, 0x07DC))
            {
                Return (Zero)
            }

            Return (0x0F)
        }

        Method (GIRQ, 1, Serialized)
        {
            Return (Add (0x18, Mod (Arg0, 0x60)))
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SIRC)
        {
            Name (_HID, EisaId ("PNP0C02"))
            Name (_STA, 0x03)
            Name (_UID, 0x05)
            Method (ADDB, 3, Serialized)
            {
                Name (BUFF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateDWordField (BUFF, 0x04, ADDR)
                CreateDWordField (BUFF, 0x08, LENG)
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LOr (LOr (LEqual (Arg0, One), LEqual (Arg0, 0x03)), LEqual (
                    Arg0, 0x04)))
                {
                    Store (Arg2, ADDR)
                    ConcatenateResTemplate (Local0, BUFF, Local0)
                }

                If (LEqual (Arg0, 0x03))
                {
                    Store (Arg1, ADDR)
                    ConcatenateResTemplate (Local0, BUFF, Local0)
                }

                If (LEqual (Arg0, 0x04))
                {
                    Store (Add (0x08, Arg1), ADDR)
                    Store (0x0FF8, LENG)
                    ConcatenateResTemplate (Local0, BUFF, Local0)
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD0, SB00, SB10), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD1, SB01, SB11), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD2, SB02, SB12), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD3, SB03, SB13), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD4, SB04, SB14), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD5, SB05, SB15), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD6, SB06, SB16), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD7, SB07, SB17), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD8, SB08, SB18), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMD9, SB09, SB19), Local0)
                ConcatenateResTemplate (Local0, ADDB (SMDA, SB0A, SB1A), Local0)
                If (LEqual (^^GPI0._STA (), Zero))
                {
                    ConcatenateResTemplate (Local0, ^^GPI0._CRS (), Local0)
                }

                Return (Local0)
            }
        }

        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)
            {
                If (LEqual (PCHV (), SPTH))
                {
                    Return ("INT345D")
                }

                Return ("INT344B")
            }

            Name (LINK, "\\_SB.PCI0.GPI0")
            Method (_CRS, 0, NotSerialized)
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x0000000E,
                    }
                })
                CreateDWordField (RBUF, 0x04, COM0)
                CreateDWordField (RBUF, 0x10, COM1)
                CreateDWordField (RBUF, 0x1C, COM3)
                CreateDWordField (RBUF, 0x29, IRQN)
                Store (Add (SBRG, 0x00AF0000), COM0)
                Store (Add (SBRG, 0x00AE0000), COM1)
                Store (Add (SBRG, 0x00AC0000), COM3)
                Store (SGIR, IRQN)
                Return (RBUF)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (SBRG, Zero))
                {
                    Return (Zero)
                }

                If (LEqual (GPEN, Zero))
                {
                    Return (Zero)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C0)
        {
            Name (LINK, "\\_SB.PCI0.I2C0")
        }
    }

    If (LNotEqual (SMD0, 0x02))
    {
        Scope (_SB.PCI0.I2C0)
        {
            Name (_HID, "INT3442")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB10))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD0, SB00, SIR0))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB10)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB10)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB10)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD0))
            }
        }
    }

    If (LEqual (SMD0, 0x02))
    {
        Scope (_SB.PCI0.I2C0)
        {
            Name (_ADR, 0x00150000)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C1)
        {
            Name (LINK, "\\_SB.PCI0.I2C1")
        }
    }

    If (LNotEqual (SMD1, 0x02))
    {
        Scope (_SB.PCI0.I2C1)
        {
            Name (_HID, "INT3443")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB11))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD1, SB01, SIR1))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB11)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB11)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB11)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD1))
            }
        }
    }

    If (LEqual (SMD1, 0x02))
    {
        Scope (_SB.PCI0.I2C1)
        {
            Name (_ADR, 0x00150001)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C2)
        {
            Name (LINK, "\\_SB.PCI0.I2C2")
        }
    }

    If (LNotEqual (SMD2, 0x02))
    {
        Scope (_SB.PCI0.I2C2)
        {
            Name (_HID, "INT3444")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB12))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD2, SB02, SIR2))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB12)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB12)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB12)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD2))
            }
        }
    }

    If (LEqual (SMD2, 0x02))
    {
        Scope (_SB.PCI0.I2C2)
        {
            Name (_ADR, 0x00150002)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C3)
        {
            Name (LINK, "\\_SB.PCI0.I2C3")
        }
    }

    If (LNotEqual (SMD3, 0x02))
    {
        Scope (_SB.PCI0.I2C3)
        {
            Name (_HID, "INT3445")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB13))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD3, SB03, SIR3))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB13)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB13)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB13)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD3))
            }
        }
    }

    If (LEqual (SMD3, 0x02))
    {
        Scope (_SB.PCI0.I2C3)
        {
            Name (_ADR, 0x00150003)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C4)
        {
            Name (LINK, "\\_SB.PCI0.I2C4")
        }
    }

    If (LNotEqual (SMD4, 0x02))
    {
        Scope (_SB.PCI0.I2C4)
        {
            Name (_HID, "INT3446")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB14))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD4, SB04, SIR4))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB14)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB14)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB14)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD4))
            }
        }
    }

    If (LEqual (SMD4, 0x02))
    {
        Scope (_SB.PCI0.I2C4)
        {
            Name (_ADR, 0x00190002)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C5)
        {
            Name (LINK, "\\_SB.PCI0.I2C5")
        }
    }

    If (LNotEqual (SMD5, 0x02))
    {
        Scope (_SB.PCI0.I2C5)
        {
            Name (_HID, "INT3447")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB15))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD5, SB05, SIR5))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB15)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB15)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB15)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD5))
            }
        }
    }

    If (LEqual (SMD5, 0x02))
    {
        Scope (_SB.PCI0.I2C5)
        {
            Name (_ADR, 0x00190001)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI0)
        {
        }
    }

    If (LNotEqual (SMD6, 0x02))
    {
        Scope (_SB.PCI0.SPI0)
        {
            Name (_HID, "INT3440")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB16))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD6, SB06, SIR6))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB16)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB16)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB16)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD6))
            }
        }
    }

    If (LEqual (SMD6, 0x02))
    {
        Scope (_SB.PCI0.SPI0)
        {
            Name (_ADR, 0x001E0002)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI1)
        {
        }
    }

    If (LNotEqual (SMD7, 0x02))
    {
        Scope (_SB.PCI0.SPI1)
        {
            Name (_HID, "INT3441")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB17))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD7, SB07, SIR7))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB17)
            }

            Method (_PS0, 0, NotSerialized)
            {
                LPD0 (SB17)
            }

            Method (_PS3, 0, NotSerialized)
            {
                LPD3 (SB17)
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD7))
            }
        }
    }

    If (LEqual (SMD7, 0x02))
    {
        Scope (_SB.PCI0.SPI1)
        {
            Name (_ADR, 0x001E0003)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA00)
        {
        }
    }

    If (LNotEqual (SMD8, 0x02))
    {
        Scope (_SB.PCI0.UA00)
        {
            Method (_HID, 0, NotSerialized)
            {
                If (LNotEqual (SMD9, 0x04))
                {
                    Return ("INT3448")
                }
                Else
                {
                    Return (0x020CD041)
                }
            }

            Name (_UID, "SerialIoUart0")
            Name (_DDN, "SerialIoUart0")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB18))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD8, SB08, SIR8))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB18)
            }

            Method (_PS0, 0, NotSerialized)
            {
                If (LNotEqual (SMD8, 0x04))
                {
                    LPD0 (SB18)
                }
            }

            Method (_PS3, 0, NotSerialized)
            {
                If (LNotEqual (SMD8, 0x04))
                {
                    LPD3 (SB18)
                }
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD8))
            }
        }
    }

    If (LEqual (SMD8, 0x02))
    {
        Scope (_SB.PCI0.UA00)
        {
            Name (_ADR, 0x001E0000)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA01)
        {
        }
    }

    If (LNotEqual (SMD9, 0x02))
    {
        Scope (_SB.PCI0.UA01)
        {
            Method (_HID, 0, NotSerialized)
            {
                If (LNotEqual (SMD9, 0x04))
                {
                    Return ("INT3449")
                }
                Else
                {
                    Return (0x020CD041)
                }
            }

            Name (_UID, "SerialIoUart1")
            Name (_DDN, "SerialIoUart1")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB19))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMD9, SB09, SIR9))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB19)
            }

            Method (_PS0, 0, NotSerialized)
            {
                If (LNotEqual (SMD9, 0x04))
                {
                    LPD0 (SB19)
                }
            }

            Method (_PS3, 0, NotSerialized)
            {
                If (LNotEqual (SMD9, 0x04))
                {
                    LPD3 (SB19)
                }
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMD9))
            }
        }
    }

    If (LEqual (SMD9, 0x02))
    {
        Scope (_SB.PCI0.UA01)
        {
            Name (_ADR, 0x001E0001)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA02)
        {
        }
    }

    If (LNotEqual (SMDA, 0x02))
    {
        Scope (_SB.PCI0.UA02)
        {
            Method (_HID, 0, NotSerialized)
            {
                If (LNotEqual (SMDA, 0x04))
                {
                    Return ("INT344A")
                }
                Else
                {
                    Return (0x020CD041)
                }
            }

            Name (_UID, "SerialIoUart2")
            Name (_DDN, "SerialIoUart2")
            Method (_HRV, 0, NotSerialized)
            {
                Return (LHRV (SB1A))
            }

            Method (_CRS, 0, NotSerialized)
            {
                Return (LCRS (SMDA, SB0A, SIRA))
            }

            Method (_PSC, 0, NotSerialized)
            {
                GETD (SB1A)
            }

            Method (_PS0, 0, NotSerialized)
            {
                If (LNotEqual (SMDA, 0x04))
                {
                    LPD0 (SB1A)
                }
            }

            Method (_PS3, 0, NotSerialized)
            {
                If (LNotEqual (SMDA, 0x04))
                {
                    LPD3 (SB1A)
                }
            }

            Method (_STA, 0, NotSerialized)
            {
                Return (LSTA (SMDA))
            }
        }
    }

    If (LEqual (SMDA, 0x02))
    {
        Scope (_SB.PCI0.UA02)
        {
            Name (_ADR, 0x00190000)
            Method (_DSM, 4, Serialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (HIDG, Buffer (0x10)
        {
            /* 0000 */    0xF7, 0xF6, 0xDF, 0x3C, 0x67, 0x42, 0x55, 0x45, 
            /* 0008 */    0xAD, 0x05, 0xB3, 0x0A, 0x3D, 0x89, 0x38, 0xDE
        })
        Name (TP7G, Buffer (0x10)
        {
            /* 0000 */    0x82, 0xEB, 0x87, 0xEF, 0x51, 0xF9, 0xDA, 0x46, 
            /* 0008 */    0x84, 0xEC, 0x14, 0x87, 0x1A, 0xC6, 0xF8, 0x4B
        })
        Method (HIDD, 5, Serialized)
        {
            If (LEqual (Arg0, HIDG))
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, One))
                    {
                        Return (Buffer (One)
                        {
                            0x03
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                0x00
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If (LEqual (Arg0, TP7G))
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, One))
                    {
                        Return (Buffer (One)
                        {
                            0x03
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                0x00
            })
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, Buffer (0x23)
            {
                /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                /* 0010 */    0x20, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x30, 
                /* 0020 */    0x00, 0x79, 0x00
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000000,
                }
            })
            Name (SBFG, Buffer (0x2A)
            {
                /* 0000 */    0x8C, 0x25, 0x00, 0x01, 0x00, 0x01, 0x00, 0x12, 
                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 
                /* 0010 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
                /* 0018 */    0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                /* 0020 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                /* 0028 */    0x79, 0x00
            })
            CreateWordField (SBFB, 0x10, BADR)
            CreateDWordField (SBFB, 0x0C, SPED)
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, 0x05, INT2)
            Method (_INI, 0, NotSerialized)
            {
                If (LLess (OSYS, 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                Store (GNUM (GPDI), INT1)
                Store (INUM (GPDI), INT2)
                If (LEqual (SDM0, Zero))
                {
                    SHPO (GPDI, One)
                }

                If (LEqual (SDS0, One))
                {
                    Store ("SYNA2393", _HID)
                    Store (0x20, HID2)
                    Return (Zero)
                }

                If (LEqual (SDS0, 0x02))
                {
                    Store ("06CB2846", _HID)
                    Store (0x20, HID2)
                    Return (Zero)
                }

                If (LEqual (SDS0, 0x05))
                {
                    Store ("CUST0001", _HID)
                    Store (TPDH, HID2)
                    Store (TPDB, BADR)
                    If (LEqual (TPDS, Zero))
                    {
                        Store (0x000186A0, SPED)
                    }

                    If (LEqual (TPDS, One))
                    {
                        Store (0x00061A80, SPED)
                    }

                    If (LEqual (TPDS, 0x02))
                    {
                        Store (0x000F4240, SPED)
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")
            Name (_CID, "PNP0C50")
            Name (_S0W, 0x03)
            Method (_DSM, 4, Serialized)
            {
                If (LEqual (Arg0, HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If (LEqual (Arg0, TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                    0x00
                })
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LOr (LEqual (SDS0, 0x05), LOr (LEqual (SDS0, One), LEqual (
                    SDS0, 0x02))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)
            {
                If (LLess (OSYS, 0x07DC))
                {
                    Return (SBFI)
                }

                If (LEqual (SDM0, Zero))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFG))
                }

                Return (ConcatenateResTemplate (SBFB, SBFI))
            }
        }

        Device (HDAC)
        {
            Name (_HID, "INT0000")
            Name (_CID, "INT0000")
            Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")
            Name (_UID, One)
            Name (CADR, Zero)
            Method (_INI, 0, NotSerialized)
            {
                If (LEqual (I2SC, One))
                {
                    Store ("INT3439", _HID)
                    Store ("INT3439", _CID)
                    Store (0x1A, CADR)
                    Return (Zero)
                }

                If (LEqual (I2SC, 0x02))
                {
                    Store ("INT343A", _HID)
                    Store ("INT343A", _CID)
                    Store (0x1C, CADR)
                    Return (Zero)
                }

                If (LEqual (I2SC, 0x03))
                {
                    Store ("INT343B", _HID)
                    Store ("INT343B", _CID)
                    Store (0x34, CADR)
                    Return (Zero)
                }
            }

            Method (_CRS, 0, NotSerialized)
            {
                Name (SBFB, Buffer (0x23)
                {
                    /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                    /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                    /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x30, 
                    /* 0020 */    0x00, 0x79, 0x00
                })
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                    {
                        0x00000000,
                    }
                })
                CreateWordField (SBFB, 0x10, ADR)
                Store (CADR, ADR)
                CreateDWordField (SBFI, 0x05, AINT)
                Store (INUM (0x02040016), AINT)
                If (LEqual (BID, 0x20))
                {
                    Return (SBFB)
                }

                Return (ConcatenateResTemplate (SBFB, SBFI))
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LNotEqual (I2SC, Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.I2C1)
    {
        Device (TPL1)
        {
            Name (HID2, Zero)
            Name (SBFB, Buffer (0x23)
            {
                /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                /* 0010 */    0x4C, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x31, 
                /* 0020 */    0x00, 0x79, 0x00
            })
            Name (SBFG, Buffer (0x2A)
            {
                /* 0000 */    0x8C, 0x25, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 
                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 
                /* 0010 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
                /* 0018 */    0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                /* 0020 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                /* 0028 */    0x79, 0x00
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, 0x10, BADR)
            CreateDWordField (SBFB, 0x0C, SPED)
            CreateDWordField (SBFI, 0x05, INT2)
            CreateWordField (SBFG, 0x17, INT1)
            Method (_INI, 0, NotSerialized)
            {
                If (LLess (OSYS, 0x07DC))
                {
                    SRXO (GPLI, One)
                }

                Store (GNUM (GPLI), INT1)
                Store (INUM (GPLI), INT2)
                If (LEqual (SDM1, Zero))
                {
                    SHPO (GPLI, One)
                }

                If (LEqual (SDS1, One))
                {
                    Store ("ATML3432", _HID)
                    Store (Zero, HID2)
                    Store (0x4C, BADR)
                    Store (0x00061A80, SPED)
                    Return (Zero)
                }

                If (LEqual (SDS1, 0x02))
                {
                    Store ("ATML2952", _HID)
                    Store (Zero, HID2)
                    Store (0x4A, BADR)
                    Store (0x00061A80, SPED)
                    Return (Zero)
                }

                If (LEqual (SDS1, 0x03))
                {
                    Store ("ELAN2097", _HID)
                    Store (One, HID2)
                    Store (0x10, BADR)
                    Store (0x00061A80, SPED)
                    Return (Zero)
                }

                If (LEqual (SDS1, 0x04))
                {
                    Store ("NTRG0001", _HID)
                    Store (One, HID2)
                    Store (0x07, BADR)
                    Store (0x00061A80, SPED)
                    Return (Zero)
                }

                If (LEqual (SDS1, 0x05))
                {
                    Store ("NTRG0002", _HID)
                    Store (One, HID2)
                    Store (0x64, BADR)
                    Store (0x00061A80, SPED)
                    Return (Zero)
                }

                If (LEqual (SDS1, 0x06))
                {
                    Store ("CUST0000", _HID)
                    Store (TPLH, HID2)
                    Store (TPLB, BADR)
                    If (LEqual (TPLS, Zero))
                    {
                        Store (0x000186A0, SPED)
                    }

                    If (LEqual (TPLS, One))
                    {
                        Store (0x00061A80, SPED)
                    }

                    If (LEqual (TPLS, 0x02))
                    {
                        Store (0x000F4240, SPED)
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")
            Name (_CID, "PNP0C50")
            Name (_S0W, 0x04)
            Method (_DSM, 4, Serialized)
            {
                If (LEqual (Arg0, HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If (LEqual (Arg0, TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                    0x00
                })
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LNotEqual (SDS1, Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)
            {
                If (LLess (OSYS, 0x07DC))
                {
                    Return (SBFI)
                }

                If (LEqual (SDM1, Zero))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFG))
                }

                Return (ConcatenateResTemplate (SBFB, SBFI))
            }
        }

        Device (IMP3)
        {
            Name (_ADR, Zero)
            Name (_HID, "IMPJ0003")
            Name (_CID, "IMPJ0003")
            Name (_UID, One)
            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (BID, 0x20))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)
            {
                Name (SBUF, Buffer (0x23)
                {
                    /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                    /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                    /* 0010 */    0x6E, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                    /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x31, 
                    /* 0020 */    0x00, 0x79, 0x00
                })
                Return (SBUF)
            }
        }
    }

    Scope (_SB.PCI0.SPI1)
    {
        Device (FPNT)
        {
            Method (_HID, 0, NotSerialized)
            {
                If (LEqual (SDS7, One))
                {
                    Return ("FPC1011")
                }

                If (LEqual (SDS7, 0x02))
                {
                    Return ("FPC1020")
                }

                If (LEqual (SDS7, 0x03))
                {
                    Return ("VFSI6101")
                }

                If (LEqual (SDS7, 0x04))
                {
                    Return ("VFSI7500")
                }

                If (LEqual (SDS7, 0x05))
                {
                    Return ("EGIS0300")
                }

                If (LEqual (SDS7, 0x06))
                {
                    Return ("FPC1021")
                }

                Return ("FPNT_DIS")
            }

            Method (_INI, 0, NotSerialized)
            {
                SHPO (GFPI, One)
                SHPO (GFPS, One)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LNotEqual (SDS7, Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)
            {
                Name (_T_0, Zero)
                Name (BBUF, Buffer (0x4E)
                {
                    /* 0000 */    0x8E, 0x21, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 
                    /* 0008 */    0x00, 0x01, 0x09, 0x00, 0x80, 0x96, 0x98, 0x00, 
                    /* 0010 */    0x08, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 0x53, 
                    /* 0018 */    0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x53, 
                    /* 0020 */    0x50, 0x49, 0x31, 0x00, 0x8C, 0x25, 0x00, 0x01, 
                    /* 0028 */    0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
                    /* 0030 */    0x00, 0x00, 0x17, 0x00, 0x00, 0x19, 0x00, 0x28, 
                    /* 0038 */    0x00, 0x00, 0x00, 0x08, 0x00, 0x5C, 0x5F, 0x53, 
                    /* 0040 */    0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 0x47, 
                    /* 0048 */    0x50, 0x49, 0x30, 0x00, 0x79, 0x00
                })
                Name (IBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                    {
                        0x00000000,
                    }
                })
                Name (GBUF, Buffer (0x2A)
                {
                    /* 0000 */    0x8C, 0x25, 0x00, 0x01, 0x00, 0x01, 0x00, 0x12, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 
                    /* 0010 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                    /* 0020 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                    /* 0028 */    0x79, 0x00
                })
                Name (UBUF, Buffer (0x2A)
                {
                    /* 0000 */    0x8C, 0x25, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 
                    /* 0010 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                    /* 0020 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                    /* 0028 */    0x79, 0x00
                })
                CreateDWordField (BBUF, 0x0C, SPEX)
                CreateByteField (BBUF, 0x11, PHAX)
                CreateWordField (BBUF, 0x3B, SPIN)
                CreateWordField (GBUF, 0x17, GPIN)
                CreateDWordField (IBUF, 0x05, IPIN)
                CreateBitField (IBUF, 0x1A, ILVL)
                CreateBitField (IBUF, 0x19, ITRG)
                CreateField (GBUF, 0x39, 0x02, GLVL)
                CreateBitField (GBUF, 0x38, GTRG)
                CreateBitField (BBUF, 0x39, SCSP)
                CreateWordField (UBUF, 0x17, UPIN)
                Store (GNUM (GFPS), SPIN)
                Store (GNUM (GFPI), GPIN)
                Store (INUM (GFPI), IPIN)
                Store (GNUM (GFPI), UPIN)
                If (LOr (LEqual (SDS7, 0x02), LEqual (SDS7, 0x06)))
                {
                    Store (Zero, ILVL)
                    Store (One, ITRG)
                    Store (Zero, GLVL)
                    Store (One, GTRG)
                }

                If (LEqual (SDS7, 0x04))
                {
                    Store (Zero, ILVL)
                    Store (One, ITRG)
                }

                While (One)
                {
                    Store (SDS7, _T_0)
                    If (LEqual (_T_0, One))
                    {
                        Store (0x00989680, SPEX)
                        Store (Zero, PHAX)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (0x002DC6C0, SPEX)
                            Store (Zero, PHAX)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                Store (0x007A1200, SPEX)
                                Store (One, PHAX)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    Store (0x007A1200, SPEX)
                                    Store (Zero, PHAX)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        Store (0x00F42400, SPEX)
                                        Store (Zero, PHAX)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x06))
                                        {
                                            Store (0x002DC6C0, SPEX)
                                            Store (Zero, PHAX)
                                        }
                                        Else
                                        {
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }

                If (LEqual (SDS7, One))
                {
                    Return (BBUF)
                }

                If (LAnd (LEqual (SDS7, 0x04), LEqual (SDM7, Zero)))
                {
                    Return (ConcatenateResTemplate (BBUF, ConcatenateResTemplate (UBUF, GBUF)))
                }

                If (LAnd (LEqual (SDS7, 0x04), LNotEqual (SDM7, Zero)))
                {
                    Return (ConcatenateResTemplate (BBUF, ConcatenateResTemplate (UBUF, IBUF)))
                }

                If (LEqual (SDM7, Zero))
                {
                    Return (ConcatenateResTemplate (BBUF, GBUF))
                }

                Return (ConcatenateResTemplate (BBUF, IBUF))
            }
        }
    }

    Scope (_SB.PCI0.UA00)
    {
        Device (BTH0)
        {
            Method (_HID, 0, NotSerialized)
            {
                If (LEqual (SDS8, One))
                {
                    Return ("INT33E1")
                }

                If (LEqual (SDS8, 0x02))
                {
                    Return ("BCM2E40")
                }

                Return ("INT33E1")
            }

            Method (_INI, 0, NotSerialized)
            {
                SHPO (GBTI, One)
                SHPO (GBTW, One)
                SHPO (GBTK, One)
            }

            Method (_CRS, 0, NotSerialized)
            {
                Name (SBFG, Buffer (0x9F)
                {
                    /* 0000 */    0x8E, 0x22, 0x00, 0x01, 0x00, 0x03, 0x02, 0x35, 
                    /* 0008 */    0x00, 0x01, 0x0A, 0x00, 0x00, 0xC2, 0x01, 0x00, 
                    /* 0010 */    0x20, 0x00, 0x20, 0x00, 0x00, 0xC0, 0x5C, 0x5F, 
                    /* 0018 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0020 */    0x55, 0x41, 0x30, 0x30, 0x00, 0x8C, 0x25, 0x00, 
                    /* 0028 */    0x01, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 
                    /* 0030 */    0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x19, 0x00, 
                    /* 0038 */    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 
                    /* 0040 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0048 */    0x47, 0x50, 0x49, 0x30, 0x00, 0x8C, 0x25, 0x00, 
                    /* 0050 */    0x01, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 
                    /* 0058 */    0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x19, 0x00, 
                    /* 0060 */    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 
                    /* 0068 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0070 */    0x47, 0x50, 0x49, 0x30, 0x00, 0x8C, 0x25, 0x00, 
                    /* 0078 */    0x01, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 
                    /* 0080 */    0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x19, 0x00, 
                    /* 0088 */    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 
                    /* 0090 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0098 */    0x47, 0x50, 0x49, 0x30, 0x00, 0x79, 0x00
                })
                CreateWordField (SBFG, 0x8C, INT3)
                CreateWordField (SBFG, 0x3C, WAK3)
                CreateWordField (SBFG, 0x64, KIL3)
                Store (GNUM (GBTI), INT3)
                Store (GNUM (GBTW), WAK3)
                Store (GNUM (GBTK), KIL3)
                Name (SBFI, Buffer (0x80)
                {
                    /* 0000 */    0x8E, 0x22, 0x00, 0x01, 0x00, 0x03, 0x02, 0x35, 
                    /* 0008 */    0x00, 0x01, 0x0A, 0x00, 0x00, 0xC2, 0x01, 0x00, 
                    /* 0010 */    0x20, 0x00, 0x20, 0x00, 0x00, 0xC0, 0x5C, 0x5F, 
                    /* 0018 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0020 */    0x55, 0x41, 0x30, 0x30, 0x00, 0x8C, 0x25, 0x00, 
                    /* 0028 */    0x01, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 
                    /* 0030 */    0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x19, 0x00, 
                    /* 0038 */    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 
                    /* 0040 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0048 */    0x47, 0x50, 0x49, 0x30, 0x00, 0x8C, 0x25, 0x00, 
                    /* 0050 */    0x01, 0x01, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 
                    /* 0058 */    0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x19, 0x00, 
                    /* 0060 */    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x5F, 
                    /* 0068 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0070 */    0x47, 0x50, 0x49, 0x30, 0x00, 0x89, 0x06, 0x00, 
                    /* 0078 */    0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00
                })
                CreateDWordField (SBFI, 0x7A, INT4)
                CreateWordField (SBFI, 0x3C, WAK4)
                CreateWordField (SBFI, 0x64, KIL4)
                Store (INUM (GBTI), INT4)
                Store (GNUM (GBTW), WAK4)
                Store (GNUM (GBTK), KIL4)
                If (LEqual (SDM8, Zero))
                {
                    Return (SBFG)
                }
                Else
                {
                    Return (SBFI)
                }
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LNotEqual (SDS8, Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Name (_S0W, 0x02)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GNSS)
        {
            Name (_HID, "INT33A2")
            Method (_CRS, 0, NotSerialized)
            {
                Name (BUF1, Buffer (0x27)
                {
                    /* 0000 */    0x8E, 0x22, 0x00, 0x01, 0x00, 0x03, 0x02, 0x35, 
                    /* 0008 */    0x00, 0x01, 0x0A, 0x00, 0x00, 0xC2, 0x01, 0x00, 
                    /* 0010 */    0x40, 0x00, 0x40, 0x00, 0x00, 0xC0, 0x5C, 0x5F, 
                    /* 0018 */    0x53, 0x42, 0x2E, 0x50, 0x43, 0x49, 0x30, 0x2E, 
                    /* 0020 */    0x55, 0x41, 0x30, 0x31, 0x00, 0x79, 0x00
                })
                Name (BUF2, Buffer (0x2A)
                {
                    /* 0000 */    0x8C, 0x25, 0x00, 0x01, 0x01, 0x01, 0x00, 0x02, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 
                    /* 0010 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                    /* 0020 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                    /* 0028 */    0x79, 0x00
                })
                CreateWordField (BUF2, 0x17, RPIN)
                Store (GNUM (GGNR), RPIN)
                If (LEqual (GNSC, One))
                {
                    Return (ConcatenateResTemplate (BUF1, BUF2))
                }
                Else
                {
                    Return (BUF2)
                }
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (GNSC, Zero))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GEXP)
        {
            Name (_ADR, One)
            Name (_STA, 0x0B)
            Method (SGEP, 3, Serialized)
            {
                CSER (GEXN, Arg0, Arg1, Arg2, Zero)
            }

            Method (SGED, 3, Serialized)
            {
                CSER (GEXN, Arg0, Arg1, Arg2, One)
            }

            Method (GEPS, 2, Serialized)
            {
                Return (CSER (GEXN, Arg0, Arg1, Zero, 0x02))
            }

            Method (SGEI, 3, Serialized)
            {
                CSER (GEXN, Arg0, Arg1, Arg2, 0x03)
            }

            Method (INVC, 0, NotSerialized)
            {
                Store (Zero, Local0)
                While (LLess (Local0, 0x10))
                {
                    If (LEqual (R3DC (Zero, Local0, Zero), 0x02))
                    {
                        W3DC (Zero, Local0, Zero, One)
                    }

                    If (LEqual (R3DC (One, Local0, Zero), 0x02))
                    {
                        W3DC (One, Local0, Zero, One)
                    }

                    Add (Local0, One, Local0)
                }
            }

            Name (PPR, 0x08)
            Name (INR, Package (0x03)
            {
                Zero, 
                One, 
                0x02
            })
            Name (OUTR, Package (0x03)
            {
                0x04, 
                0x05, 
                0x06
            })
            Name (CFGR, Package (0x03)
            {
                0x0C, 
                0x0D, 
                0x0E
            })
            Name (POLR, Package (0x03)
            {
                0x08, 
                0x09, 
                0x0A
            })
            Name (EXPA, 0x22)
            Name (UCCH, One)
            Name (END, 0x0200)
            Name (READ, 0x0100)
            Name (CACH, Package (0x02)
            {
                Package (0x10)
                {
                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }
                }, 

                Package (0x10)
                {
                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        One, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0x03, 
                        Zero
                    }
                }
            })
            Method (W3DC, 4, NotSerialized)
            {
                Store (Arg3, Index (DerefOf (Index (DerefOf (Index (CACH, Arg0)), 
                    Arg1)), Arg2))
            }

            Method (R3DC, 3, NotSerialized)
            {
                Return (DerefOf (Index (DerefOf (Index (DerefOf (Index (CACH, Arg0)), 
                    Arg1)), Arg2)))
            }

            Method (WREG, 4, Serialized)
            {
                OperationRegion (BAR0, SystemMemory, Arg0, 0x0208)
                Field (BAR0, DWordAcc, NoLock, Preserve)
                {
                    ICON,   32, 
                    TAR,    32, 
                            Offset (0x10), 
                    DATA,   32, 
                    HCNT,   32, 
                    LCNT,   32, 
                            Offset (0x2C), 
                        ,   5, 
                    ABRT,   1, 
                            Offset (0x40), 
                    RBCK,   32, 
                            Offset (0x54), 
                    CLR,    32, 
                            Offset (0x6C), 
                    ENB,    1, 
                            Offset (0x70), 
                    ACTV,   1, 
                    TFNF,   1, 
                        ,   1, 
                    RFNE,   1, 
                            Offset (0x7C), 
                    HOLD,   32, 
                            Offset (0x9C), 
                    ENSB,   1, 
                            Offset (0x204), 
                    RST,    32
                }

                Store (Add (Timer, 0xC350), Local1)
                Store (0x07, RST)
                Store (Zero, ENB)
                Store (RBCK, Local0)
                Store (CLR, Local0)
                Store (0x001C001C, HOLD)
                Store (0x0210, HCNT)
                Store (0x0280, LCNT)
                Store (Add (EXPA, Arg1), TAR)
                Store (0x65, ICON)
                Store (One, ENB)
                While (LNotEqual (ENSB, One))
                {
                    If (LGreater (Timer, Local1))
                    {
                        Return (Zero)
                    }
                }

                Store (Arg2, DATA)
                Store (Add (END, Arg3), DATA)
                While (LNotEqual (ACTV, Zero))
                {
                    If (LGreater (Timer, Local1))
                    {
                        Return (Zero)
                    }
                }

                Store (Zero, ENB)
                While (LNotEqual (ENSB, Zero))
                {
                    If (LGreater (Timer, Local1))
                    {
                        Return (Zero)
                    }
                }

                W3DC (Arg1, Arg2, One, Arg3)
                If (LEqual (R3DC (Arg1, Arg2, Zero), One))
                {
                    W3DC (Arg1, Arg2, Zero, 0x02)
                }

                Return (Zero)
            }

            Method (RREG, 3, Serialized)
            {
                If (LEqual (UCCH, One))
                {
                    If (LEqual (R3DC (Arg1, Arg2, Zero), 0x02))
                    {
                        Return (R3DC (Arg1, Arg2, One))
                    }
                }

                OperationRegion (BAR0, SystemMemory, Arg0, 0x0208)
                Field (BAR0, DWordAcc, NoLock, Preserve)
                {
                    ICON,   32, 
                    TAR,    32, 
                            Offset (0x10), 
                    DATA,   32, 
                    HCNT,   32, 
                    LCNT,   32, 
                            Offset (0x2C), 
                        ,   5, 
                    ABRT,   1, 
                            Offset (0x40), 
                    RBCK,   32, 
                            Offset (0x54), 
                    CLR,    32, 
                            Offset (0x6C), 
                    ENB,    1, 
                            Offset (0x70), 
                    ACTV,   1, 
                    TFNF,   1, 
                        ,   1, 
                    RFNE,   1, 
                            Offset (0x7C), 
                    HOLD,   32, 
                            Offset (0x9C), 
                    ENSB,   1, 
                            Offset (0x204), 
                    RST,    32
                }

                Store (Add (Timer, 0xC350), Local1)
                Store (0x07, RST)
                Store (Zero, ENB)
                Store (RBCK, Local0)
                Store (CLR, Local0)
                Store (0x001C001C, HOLD)
                Store (0x0210, HCNT)
                Store (0x0280, LCNT)
                Store (Add (EXPA, Arg1), TAR)
                Store (0x65, ICON)
                Store (One, ENB)
                While (LNotEqual (ENSB, One))
                {
                    If (LGreater (Timer, Local1))
                    {
                        Return (Zero)
                    }
                }

                Store (Arg2, DATA)
                Store (Add (END, READ), DATA)
                While (LNotEqual (ACTV, Zero))
                {
                    If (LGreater (Timer, Local1))
                    {
                        Return (Zero)
                    }
                }

                Store (DATA, Local0)
                Store (Zero, ENB)
                While (LNotEqual (ENSB, Zero))
                {
                    If (LGreater (Timer, Local1))
                    {
                        Return (Zero)
                    }
                }

                Return (Local0)
            }

            Method (PS0, 1, Serialized)
            {
                OperationRegion (BAR1, SystemMemory, Arg0, 0x88)
                Field (BAR1, DWordAcc, NoLock, Preserve)
                {
                            Offset (0x84), 
                    D0D3,   2
                }

                Store (Zero, D0D3)
                Store (D0D3, Local0)
            }

            Method (PS3, 1, Serialized)
            {
                OperationRegion (BAR1, SystemMemory, Arg0, 0x88)
                Field (BAR1, DWordAcc, NoLock, Preserve)
                {
                            Offset (0x84), 
                    D0D3,   2
                }

                Store (0x03, D0D3)
                Store (D0D3, Local0)
            }

            Method (CSER, 5, Serialized)
            {
                Name (SB1X, Zero)
                Name (SB0X, Zero)
                Name (SMDX, Zero)
                Name (PINN, Zero)
                Name (REGN, Zero)
                Name (REGA, Zero)
                Name (OLDV, Zero)
                Name (NEWV, Zero)
                Name (RETV, Zero)
                If (LGreater (Arg0, 0x05))
                {
                    Return (Zero)
                }

                If (LEqual (Arg0, Zero))
                {
                    Store (SB10, SB1X)
                    Store (SB00, SB0X)
                    Store (SMD0, SMDX)
                }

                If (LEqual (Arg0, One))
                {
                    Store (SB11, SB1X)
                    Store (SB01, SB0X)
                    Store (SMD1, SMDX)
                }

                If (LEqual (Arg0, 0x02))
                {
                    Store (SB12, SB1X)
                    Store (SB02, SB0X)
                    Store (SMD2, SMDX)
                }

                If (LEqual (Arg0, 0x03))
                {
                    Store (SB13, SB1X)
                    Store (SB03, SB0X)
                    Store (SMD3, SMDX)
                }

                If (LEqual (Arg0, 0x04))
                {
                    Store (SB14, SB1X)
                    Store (SB04, SB0X)
                    Store (SMD4, SMDX)
                }

                If (LEqual (Arg0, 0x05))
                {
                    Store (SB15, SB1X)
                    Store (SB05, SB0X)
                    Store (SMD5, SMDX)
                }

                If (LGreater (Arg0, 0x05))
                {
                    Return (Zero)
                }

                If (LGreater (Arg1, One))
                {
                    Return (Zero)
                }

                If (LGreater (Arg2, 0x17))
                {
                    Return (Zero)
                }

                If (LGreater (Arg3, One))
                {
                    Return (Zero)
                }

                If (LGreater (Arg4, 0x02))
                {
                    Return (Zero)
                }

                If (LNotEqual (SMDX, 0x03))
                {
                    Return (Zero)
                }

                If (LEqual (Arg4, Zero))
                {
                    Store (OUTR, Local0)
                }

                If (LEqual (Arg4, One))
                {
                    Store (CFGR, Local0)
                }

                If (LEqual (Arg4, 0x02))
                {
                    Store (INR, Local0)
                }

                If (LEqual (Arg4, 0x03))
                {
                    Store (POLR, Local0)
                }

                PS0 (SB1X)
                Divide (Arg2, PPR, PINN, REGN)
                Store (DerefOf (Index (Local0, REGN)), REGA)
                Store (RREG (SB0X, Arg1, REGA), OLDV)
                If (LEqual (Arg4, 0x02))
                {
                    Store (And (One, ShiftRight (OLDV, PINN)), RETV)
                }
                Else
                {
                    And (OLDV, Not (ShiftLeft (One, PINN)), NEWV)
                    Or (ShiftLeft (Arg3, PINN), NEWV, NEWV)
                    If (LNotEqual (NEWV, OLDV))
                    {
                        WREG (SB0X, Arg1, REGA, NEWV)
                    }
                }

                PS3 (SB1X)
                Return (RETV)
            }
        }
    }

    Method (PKG1, 1, Serialized)
    {
        Name (PKG, Package (0x01)
        {
            Zero
        })
        Store (Arg0, Index (PKG, Zero))
        Return (PKG)
    }

    Method (PKG3, 3, Serialized)
    {
        Name (PKG, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Store (Arg0, Index (PKG, Zero))
        Store (Arg1, Index (PKG, One))
        Store (Arg2, Index (PKG, 0x02))
        Return (PKG)
    }

    If (USTP)
    {
        Scope (_SB.PCI0.I2C1)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSHI, SSLI, SSDI))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMHI, FMLI, FMDI))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPHI, FPLI, FPDI))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CI))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CI))
            }
        }

        Scope (_SB.PCI0.SPI1)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CS))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CS))
            }
        }

        Scope (_SB.PCI0.UA01)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CU))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CU))
            }
        }
    }

    If (LEqual (PCHV (), SPTL))
    {
        Scope (_SB.PCI0)
        {
            Device (PEMC)
            {
                Name (_ADR, 0x001E0004)
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, WordAcc, NoLock, Preserve)
                {
                            Offset (0x84), 
                    PSTA,   32, 
                            Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)
                {
                    Store (Zero, PGEN)
                    PCRA (0xC0, 0x0600, 0x7FFFFFBA)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x80000045)
                    And (PSTA, 0xFFFFFFFC, PSTA)
                    Store (PSTA, Local0)
                }

                Method (_PS3, 0, Serialized)
                {
                    Store (One, PGEN)
                    Or (PSTA, 0x03, PSTA)
                    Store (PSTA, Local0)
                }

                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    ADBG (Concatenate ("EMH4=", ToDecimalString (EMH4)))
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xA5, 0x3E, 0xC1, 0xF6, 0xCD, 0x65, 0x1F, 0x46, 
                                /* 0008 */    0xAB, 0x7A, 0x29, 0xF7, 0xE8, 0xD5, 0xBD, 0x61
                            }))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            While (One)
                            {
                                Store (Arg2, _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    If (LEqual (EMH4, One))
                                    {
                                        Return (Buffer (One)
                                        {
                                            0x61
                                        })
                                    }

                                    Return (Buffer (One)
                                    {
                                        0x21
                                    })
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x05))
                                    {
                                        Return (Buffer (One)
                                        {
                                            0x03
                                        })
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x06))
                                        {
                                            Return (Buffer (One)
                                            {
                                                0x05
                                            })
                                        }
                                    }
                                }

                                Break
                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x00
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                            0x00
                        })
                    }
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)
                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PSDC)
            {
                Name (_ADR, 0x001E0006)
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, WordAcc, NoLock, Preserve)
                {
                            Offset (0x84), 
                    PSTA,   32, 
                            Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)
                {
                    Store (Zero, PGEN)
                    PCRA (0xC0, 0x0600, 0xFFFFFE7A)
                    Sleep (0x02)
                    PCRO (0xC0, 0x0600, 0x0185)
                    And (PSTA, 0xFFFFFFFC, PSTA)
                    Store (PSTA, Local0)
                }

                Method (_PS3, 0, Serialized)
                {
                    Store (One, PGEN)
                    Or (PSTA, 0x03, PSTA)
                    Store (PSTA, Local0)
                }

                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xA5, 0x3E, 0xC1, 0xF6, 0xCD, 0x65, 0x1F, 0x46, 
                                /* 0008 */    0xAB, 0x7A, 0x29, 0xF7, 0xE8, 0xD5, 0xBD, 0x61
                            }))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            While (One)
                            {
                                Store (Arg2, _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                        0x19
                                    })
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x03))
                                    {
                                        Sleep (0x64)
                                        Return (Buffer (One)
                                        {
                                            0x00
                                        })
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x04))
                                        {
                                            Sleep (0x64)
                                            Return (Buffer (One)
                                            {
                                                0x00
                                            })
                                        }
                                    }
                                }

                                Break
                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x00
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                            0x00
                        })
                    }
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)
                    Method (_RMV, 0, NotSerialized)
                    {
                        Return (One)
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (ISHD)
        {
            Name (_ADR, 0x00130000)
            Method (_DSM, 4, NotSerialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)
            Method (_DSM, 4, NotSerialized)
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
            }
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Scope (\)
    {
        Device (CHUB)
        {
            Name (_HID, EisaId ("INT339B"))
            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (CHEN, One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)
            {
                Name (_T_1, Zero)
                Name (_T_0, Zero)
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x1D, 0xE7, 0x30, 0x17, 0xDD, 0xE5, 0x34, 0x4A, 
                            /* 0008 */    0xBE, 0x57, 0x4D, 0x76, 0xB6, 0xA2, 0xFE, 0x37
                        }))
                {
                    If (LEqual (Zero, ToInteger (Arg1)))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Return (Buffer (One)
                                {
                                    0x03
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_0, One))
                                {
                                    While (One)
                                    {
                                        Store (DerefOf (Index (Arg3, Zero)), _T_1)
                                        If (LEqual (_T_1, Zero)) {}
                                        Break
                                    }
                                }
                            }

                            Break
                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ITSS, SystemMemory, 0xFDC43100, 0x0208)
        Field (ITSS, ByteAcc, NoLock, Preserve)
        {
            PARC,   8, 
            PBRC,   8, 
            PCRC,   8, 
            PDRC,   8, 
            PERC,   8, 
            PFRC,   8, 
            PGRC,   8, 
            PHRC,   8, 
                    Offset (0x200), 
                ,   1, 
                ,   1, 
            SCGE,   1
        }
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If (LEqual (Arg0, Zero))
        {
            Store (Or (And (P80D, 0xFFFFFF00), Arg1), P80D)
        }

        If (LEqual (Arg0, One))
        {
            Store (Or (And (P80D, 0xFFFF00FF), ShiftLeft (Arg1, 0x08)
                ), P80D)
        }

        If (LEqual (Arg0, 0x02))
        {
            Store (Or (And (P80D, 0xFF00FFFF), ShiftLeft (Arg1, 0x10)
                ), P80D)
        }

        If (LEqual (Arg0, 0x03))
        {
            Store (Or (And (P80D, 0x00FFFFFF), ShiftLeft (Arg1, 0x18)
                ), P80D)
        }

        Store (P80D, P80H)
    }

    Method (ADBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG)
            Arg0
        }

        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (_PIC, 1, NotSerialized)
    {
        Store (Arg0, GPIC)
        Store (Arg0, PICM)
    }

    Method (RPTS, 1, NotSerialized)
    {
        Store (Zero, P80D)
        P8XH (Zero, Arg0)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        If (LEqual (Arg0, 0x03))
        {
            If (CondRefOf (\_PR.DTSE))
            {
                If (LAnd (\_PR.DTSE, LGreater (TCNT, One)))
                {
                    TRAP (0x02, 0x1E)
                }
            }
        }

        If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
        {
            If (LAnd (CondRefOf (\_SB.PCI0.LPCB.H_EC.PB10), ECON))
            {
                If (\_SB.PCI0.LPCB.H_EC.ECAV)
                {
                    If (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PB10)))
                    {
                        Or (PB1E, 0x80, PB1E)
                    }
                    Else
                    {
                        And (PB1E, 0x7F, PB1E)
                    }
                }
            }
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If (LOr (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)), LEqual (
            Arg0, 0x05)))
        {
            If (LEqual (PFLV, 0x02))
            {
                \_SB.SGOV (0x02010003, One)
            }
        }
    }

    Method (RWAK, 1, Serialized)
    {
        P8XH (Zero, ShiftLeft (Arg0, 0x04))
        ADBG ("_WAK")
        \_SB.PCI0.GEXP.INVC ()
        If (LEqual (S0ID, One))
        {
            Store (One, \_SB.SCGE)
        }

        If (NEXP)
        {
            If (And (OSCC, 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If (And (OSCC, 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If (LEqual (Arg0, 0x03))
        {
            If (LEqual (Zero, ACTT))
            {
                If (LEqual (ECON, One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PCI0.LPCB.H_EC.CFAN))
                }
            }
        }

        If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
        {
            If (LAnd (CondRefOf (\_SB.PCI0.LPCB.H_EC.PB10), ECON))
            {
                If (And (PB1E, 0x80))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (One, RefOf (\_SB.PCI0.LPCB.H_EC.PB10))
                }
            }

            If (And (GBSX, 0x40))
            {
                \_SB.PCI0.GFX0.IUEH (0x06)
            }

            If (And (GBSX, 0x80))
            {
                \_SB.PCI0.GFX0.IUEH (0x07)
            }

            If (CondRefOf (\_PR.DTSE))
            {
                If (LAnd (\_PR.DTSE, LGreater (TCNT, One)))
                {
                    TRAP (0x02, 0x14)
                }
            }

            If (LNotEqual (\_SB.PCI0.RP01.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP01, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP02.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP02, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP03.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP03, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP04.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP04, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP05.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP05, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP06.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP06, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP07.VDID, 0xFFFFFFFF))
            {
                If (LEqual (DSTS, Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero)
                }
            }

            If (LNotEqual (\_SB.PCI0.RP08.VDID, 0xFFFFFFFF))
            {
                If (LEqual (DSTS, Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero)
                }
            }

            If (LNotEqual (\_SB.PCI0.RP09.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP09, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP10.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP10, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP11.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP11, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP12.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP12, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP13.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP13, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP14.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP14, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP15.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP15, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP16.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP16, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP17.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP17, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP18.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP18, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP19.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP19, Zero)
            }

            If (LNotEqual (\_SB.PCI0.RP20.VDID, 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP20, Zero)
            }
        }

        If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
        {
            If (LEqual (\_SB.PWRB.PBST, One))
            {
                If (PBSS)
                {
                    Notify (\_SB.PWRB, 0x02)
                    Store (One, PBSS)
                }
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Multiply (Arg0, 0x08, Local0)
        Multiply (Arg1, 0x08, Local1)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3)
    }

    Method (PNOT, 0, Serialized)
    {
        If (LGreater (TCNT, One))
        {
            If (And (PDC0, 0x08))
            {
                Notify (\_PR.CPU0, 0x80)
            }

            If (And (PDC1, 0x08))
            {
                Notify (\_PR.CPU1, 0x80)
            }

            If (And (PDC2, 0x08))
            {
                Notify (\_PR.CPU2, 0x80)
            }

            If (And (PDC3, 0x08))
            {
                Notify (\_PR.CPU3, 0x80)
            }

            If (And (PDC4, 0x08))
            {
                Notify (\_PR.CPU4, 0x80)
            }

            If (And (PDC5, 0x08))
            {
                Notify (\_PR.CPU5, 0x80)
            }

            If (And (PDC6, 0x08))
            {
                Notify (\_PR.CPU6, 0x80)
            }

            If (And (PDC7, 0x08))
            {
                Notify (\_PR.CPU7, 0x80)
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80)
        }

        If (LGreater (TCNT, One))
        {
            If (LAnd (And (PDC0, 0x08), And (PDC0, 0x10)))
            {
                Notify (\_PR.CPU0, 0x81)
            }

            If (LAnd (And (PDC1, 0x08), And (PDC1, 0x10)))
            {
                Notify (\_PR.CPU1, 0x81)
            }

            If (LAnd (And (PDC2, 0x08), And (PDC2, 0x10)))
            {
                Notify (\_PR.CPU2, 0x81)
            }

            If (LAnd (And (PDC3, 0x08), And (PDC3, 0x10)))
            {
                Notify (\_PR.CPU3, 0x81)
            }

            If (LAnd (And (PDC4, 0x08), And (PDC4, 0x10)))
            {
                Notify (\_PR.CPU4, 0x81)
            }

            If (LAnd (And (PDC5, 0x08), And (PDC5, 0x10)))
            {
                Notify (\_PR.CPU5, 0x81)
            }

            If (LAnd (And (PDC6, 0x08), And (PDC6, 0x10)))
            {
                Notify (\_PR.CPU6, 0x81)
            }

            If (LAnd (And (PDC7, 0x08), And (PDC7, 0x10)))
            {
                Notify (\_PR.CPU7, 0x81)
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x81)
        }

        If (LEqual (ECON, One))
        {
            Store (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1CC)), B1SC)
            Store (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1ST)), B1SS)
            Store (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2CC)), B2SC)
            Store (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2ST)), B2SS)
            Notify (\_SB.PCI0.LPCB.H_EC.BAT0, 0x81)
            Notify (\_SB.PCI0.LPCB.H_EC.BAT1, 0x81)
            Notify (\_SB.PCI0.LPCB.H_EC.BAT2, 0x81)
        }

        If (LEqual (DPTF, One))
        {
            Notify (\_SB.IETM, 0x86)
            If (LEqual (CHGE, One))
            {
                Notify (\_SB.PCI0.LPCB.H_EC.CHRG, 0x80)
            }
        }
    }

    OperationRegion (MBAR, SystemMemory, Add (\_SB.PCI0.GMHB (), 0x5000), 0x1000)
    Field (MBAR, ByteAcc, NoLock, Preserve)
    {
                Offset (0x938), 
        PWRU,   4, 
                Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If (LEqual (CSEM, One))
        {
            Return (Zero)
        }

        Store (One, CSEM)
        Store (PPL1, PLSV)
        Store (PL1E, PLEN)
        Store (CLP1, CLMP)
        If (LEqual (PWRU, Zero))
        {
            Store (One, PPUU)
        }
        Else
        {
            ShiftLeft (Decrement (PWRU), 0x02, PPUU)
        }

        Multiply (PLVL, PPUU, Local0)
        Divide (Local0, 0x03E8, , Local1)
        Store (Local1, PPL1)
        Store (One, PL1E)
        Store (One, CLP1)
    }

    Method (RPL1, 0, Serialized)
    {
        Store (PLSV, PPL1)
        Store (PLEN, PL1E)
        Store (CLMP, CLP1)
        Store (Zero, CSEM)
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Name (_T_0, Zero)
        If (LGreater (OSYS, 0x07D0))
        {
            Add (PWRV, 0xFC, Local0)
            ADBG ("Loc 0")
            ADBG (Local0)
            OperationRegion (ACTC, SystemMemory, Local0, 0x04)
            Field (ACTC, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                ACTD,   1
            }
        }

        While (One)
        {
            Store (ToInteger (Arg0), _T_0)
            If (LEqual (_T_0, Zero))
            {
                If (LEqual (GLCK, One))
                {
                    Store (Zero, GLCK)
                    P8XH (Zero, 0xC5)
                    P8XH (One, 0xAB)
                    ADBG ("Exit CS")
                    If (LEqual (ECNO, One))
                    {
                        ADBG ("EC Notify")
                        Store (Acquire (EHLD, 0xFFFF), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            \_SB.PCI0.LPCB.H_EC.ECMD (0x2D)
                            If (LEqual (ECLP, One))
                            {
                                Store (One, ECUP)
                            }

                            Release (EHLD)
                        }

                        If (LEqual (ECDB, One))
                        {
                            ADBG ("EC Debug")
                            \_SB.PCI0.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PCI0.LPCB.H_EC.DLED))
                        }
                    }

                    If (LGreaterEqual (OSYS, 0x07DF))
                    {
                        Store (Zero, ACTD)
                    }

                    If (PSCP)
                    {
                        If (CondRefOf (\_PR.CPU0._PPC))
                        {
                            Store (Zero, \_PR.CPPC)
                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Else
            {
                If (LEqual (_T_0, One))
                {
                    If (LEqual (GLCK, Zero))
                    {
                        Store (One, GLCK)
                        P8XH (Zero, 0xC5)
                        P8XH (One, Zero)
                        ADBG ("Enter CS")
                        If (LEqual (ECNO, One))
                        {
                            ADBG ("EC Notify")
                            If (LEqual (ECDB, One))
                            {
                                ADBG ("EC Debug")
                                \_SB.PCI0.LPCB.H_EC.ECWT (One, RefOf (\_SB.PCI0.LPCB.H_EC.DLED))
                            }

                            \_SB.PCI0.LPCB.H_EC.ECMD (0x2C)
                            If (LEqual (ECLP, One))
                            {
                                Store (Zero, ECUP)
                            }
                        }

                        If (LGreaterEqual (OSYS, 0x07DF))
                        {
                            Store (One, ACTD)
                        }

                        If (PSCP)
                        {
                            If (LAnd (CondRefOf (\_PR.CPU0._PSS), CondRefOf (\_PR.CPU0._PPC)))
                            {
                                If (And (PDC0, 0x0400))
                                {
                                    Subtract (SizeOf (\_PR.CPU0.TPSS), One, \_PR.CPPC)
                                }
                                Else
                                {
                                    Subtract (SizeOf (\_PR.CPU0.LPSS), One, \_PR.CPPC)
                                }

                                PNOT ()
                            }
                        }

                        If (PLCS)
                        {
                            SPL1 ()
                        }
                    }
                }
                Else
                {
                    If (LEqual (_T_0, 0x02))
                    {
                        If (LEqual (ECNO, One))
                        {
                            ADBG ("EC Notify")
                            Store (Acquire (EHLD, 0xFFFF), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                \_SB.PCI0.LPCB.H_EC.ECMD (0x2D)
                                If (LEqual (ECLP, One))
                                {
                                    Store (One, ECUP)
                                }

                                Release (EHLD)
                            }

                            If (LEqual (ECDB, One))
                            {
                                ADBG ("EC Debug")
                                \_SB.PCI0.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PCI0.LPCB.H_EC.DLED))
                            }
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Break
        }

        Store (LAnd (Arg0, LNot (PWRS)), UAMS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.PAUD.PUAM))
        {
            \_SB.PCI0.PAUD.PUAM ()
        }

        If (LEqual (OSYS, 0x07DC))
        {
            If (CondRefOf (\_SB.PCI0.XHC.DUAM))
            {
                \_SB.PCI0.XHC.DUAM ()
            }
        }
    }

    Scope (\)
    {
        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }
    }

    Method (TRAP, 2, Serialized)
    {
        Store (Arg1, SMIF)
        If (LEqual (Arg0, 0x02))
        {
            Store (Arg1, \_PR.DTSF)
            Store (Zero, \_PR.TRPD)
            Return (\_PR.DTSF)
        }

        If (LEqual (Arg0, 0x03))
        {
            Store (Zero, TRPH)
        }

        If (LEqual (Arg0, 0x04))
        {
            Store (Zero, \_PR.TRPF)
        }

        Return (SMIF)
    }

    Scope (_SB.PCI0)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (\_PR.BGMA)
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (\_PR.BGMS)
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (\_PR.BGIA)
        }

        Method (_INI, 0, Serialized)
        {
            Store (0x07D0, OSYS)
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    Store (0x03E8, OSYS)
                }

                If (_OSI ("Windows 2001"))
                {
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    Store (0x07D2, OSYS)
                }

                If (_OSI ("Windows 2001.1"))
                {
                    Store (0x07D3, OSYS)
                }

                If (_OSI ("Windows 2006"))
                {
                    Store (0x07D6, OSYS)
                }

                If (_OSI ("Windows 2009"))
                {
                    Store (0x07D9, OSYS)
                }

                If (_OSI ("Windows 2012"))
                {
                    Store (0x07DC, OSYS)
                }

                If (_OSI ("Windows 2013"))
                {
                    Store (0x07DD, OSYS)
                }

                If (_OSI ("Windows 2015"))
                {
                    Store (0x07DF, OSYS)
                }
            }

            If (CondRefOf (\_PR.DTSE))
            {
                If (LGreaterEqual (\_PR.DTSE, One))
                {
                    Store (One, \_PR.DSAE)
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            Store (Zero, ^RP01.HPEX)
            Store (Zero, ^RP02.HPEX)
            Store (Zero, ^RP03.HPEX)
            Store (Zero, ^RP04.HPEX)
            Store (Zero, ^RP05.HPEX)
            Store (Zero, ^RP06.HPEX)
            Store (Zero, ^RP07.HPEX)
            Store (Zero, ^RP08.HPEX)
            Store (Zero, ^RP09.HPEX)
            Store (Zero, ^RP10.HPEX)
            Store (Zero, ^RP11.HPEX)
            Store (Zero, ^RP12.HPEX)
            Store (Zero, ^RP13.HPEX)
            Store (Zero, ^RP14.HPEX)
            Store (Zero, ^RP15.HPEX)
            Store (Zero, ^RP16.HPEX)
            Store (Zero, ^RP17.HPEX)
            Store (Zero, ^RP18.HPEX)
            Store (Zero, ^RP19.HPEX)
            Store (Zero, ^RP20.HPEX)
            Store (One, ^RP01.HPSX)
            Store (One, ^RP02.HPSX)
            Store (One, ^RP03.HPSX)
            Store (One, ^RP04.HPSX)
            Store (One, ^RP05.HPSX)
            Store (One, ^RP06.HPSX)
            Store (One, ^RP07.HPSX)
            Store (One, ^RP08.HPSX)
            Store (One, ^RP09.HPSX)
            Store (One, ^RP10.HPSX)
            Store (One, ^RP11.HPSX)
            Store (One, ^RP12.HPSX)
            Store (One, ^RP13.HPSX)
            Store (One, ^RP14.HPSX)
            Store (One, ^RP15.HPSX)
            Store (One, ^RP16.HPSX)
            Store (One, ^RP17.HPSX)
            Store (One, ^RP18.HPSX)
            Store (One, ^RP19.HPSX)
            Store (One, ^RP20.HPSX)
        }

        Method (NPME, 0, Serialized)
        {
            Store (Zero, ^RP01.PMEX)
            Store (Zero, ^RP02.PMEX)
            Store (Zero, ^RP03.PMEX)
            Store (Zero, ^RP04.PMEX)
            Store (Zero, ^RP05.PMEX)
            Store (Zero, ^RP06.PMEX)
            Store (Zero, ^RP07.PMEX)
            Store (Zero, ^RP08.PMEX)
            Store (Zero, ^RP09.PMEX)
            Store (Zero, ^RP10.PMEX)
            Store (Zero, ^RP11.PMEX)
            Store (Zero, ^RP12.PMEX)
            Store (Zero, ^RP13.PMEX)
            Store (Zero, ^RP14.PMEX)
            Store (Zero, ^RP15.PMEX)
            Store (Zero, ^RP16.PMEX)
            Store (Zero, ^RP17.PMEX)
            Store (Zero, ^RP18.PMEX)
            Store (Zero, ^RP19.PMEX)
            Store (Zero, ^RP20.PMEX)
            Store (One, ^RP01.PMSX)
            Store (One, ^RP02.PMSX)
            Store (One, ^RP03.PMSX)
            Store (One, ^RP04.PMSX)
            Store (One, ^RP05.PMSX)
            Store (One, ^RP06.PMSX)
            Store (One, ^RP07.PMSX)
            Store (One, ^RP08.PMSX)
            Store (One, ^RP09.PMSX)
            Store (One, ^RP10.PMSX)
            Store (One, ^RP11.PMSX)
            Store (One, ^RP12.PMSX)
            Store (One, ^RP13.PMSX)
            Store (One, ^RP14.PMSX)
            Store (One, ^RP15.PMSX)
            Store (One, ^RP16.PMSX)
            Store (One, ^RP17.PMSX)
            Store (One, ^RP18.PMSX)
            Store (One, ^RP19.PMSX)
            Store (One, ^RP20.PMSX)
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            Store (Arg0, Index (PRWP, Zero))
            Store (ShiftLeft (SS1, One), Local0)
            Or (Local0, ShiftLeft (SS2, 0x02), Local0)
            Or (Local0, ShiftLeft (SS3, 0x03), Local0)
            Or (Local0, ShiftLeft (SS4, 0x04), Local0)
            If (And (ShiftLeft (One, Arg1), Local0))
            {
                Store (Arg1, Index (PRWP, One))
            }
            Else
            {
                ShiftRight (Local0, One, Local0)
                FindSetLeftBit (Local0, Index (PRWP, One))
            }

            Return (PRWP)
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If (LEqual (S0ID, One))
            {
                Store (One, SCGE)
            }

            If (LEqual (Arg0, Buffer (0x10)
                    {
                        /* 0000 */    0x6E, 0xB0, 0x11, 0x08, 0x27, 0x4A, 0xF9, 0x44, 
                        /* 0008 */    0x8D, 0x60, 0x3C, 0xBB, 0xC2, 0x2E, 0x7B, 0x48
                    }))
            {
                If (LEqual (Arg1, One))
                {
                    Store (CAP0, OSCP)
                    If (And (CAP0, 0x04))
                    {
                        Store (0x04, OSCO)
                        If (LNotEqual (And (SGMD, 0x0F), 0x02))
                        {
                            If (LEqual (RTD3, Zero))
                            {
                                And (CAP0, 0x3B, CAP0)
                                Or (STS0, 0x10, STS0)
                            }
                        }
                    }
                }
                Else
                {
                    And (STS0, 0xFFFFFF00, STS0)
                    Or (STS0, 0x0A, STS0)
                }
            }
            Else
            {
                And (STS0, 0xFFFFFF00, STS0)
                Or (STS0, 0x06, STS0)
            }

            Return (Arg3)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))
            Name (_MLS, Package (0x01)
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)
            {
                CreateQWordField (RBUF, 0x0E, EMIN)
                CreateQWordField (RBUF, 0x16, EMAX)
                CreateQWordField (RBUF, 0x26, ELEN)
                Store (\_PR.EMNA, EMIN)
                Store (\_PR.ELNG, ELEN)
                Subtract (Add (\_PR.EMNA, \_PR.ELNG), One, EMAX)
                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)
            {
                Name (_T_0, Zero)
                Name (BUFX, Package (0x09)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x0C, 0xAC, 0x0F, 0xC6, 0x9E, 0xFD, 0x73, 0x42, 
                            /* 0008 */    0x9A, 0x3F, 0x93, 0x8F, 0x23, 0x27, 0x03, 0x5E
                        }))
                {
                    If (LEqual (Zero, ToInteger (Arg1)))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                Return (Buffer (One)
                                {
                                    0x02
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_0, One))
                                {
                                    Store (SEC0, Index (BUFX, Zero))
                                    Store (SEC1, Index (BUFX, One))
                                    Store (SEC2, Index (BUFX, 0x02))
                                    Store (SEC3, Index (BUFX, 0x03))
                                    Store (SEC4, Index (BUFX, 0x04))
                                    Store (SEC5, Index (BUFX, 0x05))
                                    Store (SEC6, Index (BUFX, 0x06))
                                    Store (SEC7, Index (BUFX, 0x07))
                                    Store (SEC8, Index (BUFX, 0x08))
                                    Return (BUFX)
                                }
                            }

                            Break
                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (LNotEqual (\_PR.EPCS, Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (BTKL)
        {
            Name (_HID, "INT3420")
            Method (_STA, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_PS0, 0, Serialized)
            {
            }

            Method (_PS3, 0, Serialized)
            {
            }

            Method (PSTS, 0, NotSerialized)
            {
            }
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E"))
            Name (_STA, 0x0B)
        }
    }

    OperationRegion (_SB.PCI0.LPCB.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PCI0.LPCB.LPCR, ByteAcc, NoLock, Preserve)
    {
        CARN,   3, 
            ,   1, 
        CBDR,   3, 
                Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
                Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
                Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
                Offset (0x04)
    }

    Method (UXDV, 1, Serialized)
    {
        Name (_T_0, Zero)
        Store (0xFF, Local0)
        While (One)
        {
            Store (Add (Arg0, Zero), _T_0)
            If (LEqual (_T_0, 0x03F8))
            {
                Store (Zero, Local0)
            }
            Else
            {
                If (LEqual (_T_0, 0x02F8))
                {
                    Store (One, Local0)
                }
                Else
                {
                    If (LEqual (_T_0, 0x0220))
                    {
                        Store (0x02, Local0)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x0228))
                        {
                            Store (0x03, Local0)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x0238))
                            {
                                Store (0x04, Local0)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x02E8))
                                {
                                    Store (0x05, Local0)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x0338))
                                    {
                                        Store (0x06, Local0)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x03E8))
                                        {
                                            Store (0x07, Local0)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Break
        }

        Return (Local0)
    }

    Method (RRIO, 4, Serialized)
    {
        Name (_T_0, Zero)
        While (One)
        {
            Store (Add (Arg0, Zero), _T_0)
            If (LEqual (_T_0, Zero))
            {
                Store (Zero, CALE)
                Store (UXDV (Arg2), Local0)
                If (LNotEqual (Local0, 0xFF))
                {
                    Store (Local0, CARN)
                }

                If (Arg1)
                {
                    Store (One, CALE)
                }
            }
            Else
            {
                If (LEqual (_T_0, One))
                {
                    Store (Zero, CBLE)
                    Store (UXDV (Arg2), Local0)
                    If (LNotEqual (Local0, 0xFF))
                    {
                        Store (Local0, CBDR)
                    }

                    If (Arg1)
                    {
                        Store (One, CBLE)
                    }
                }
                Else
                {
                    If (LEqual (_T_0, 0x02))
                    {
                        Store (Zero, LTLE)
                        If (LEqual (Arg2, 0x0378))
                        {
                            Store (Zero, LTDR)
                        }

                        If (LEqual (Arg2, 0x0278))
                        {
                            Store (One, LTDR)
                        }

                        If (LEqual (Arg2, 0x03BC))
                        {
                            Store (0x02, LTDR)
                        }

                        If (Arg1)
                        {
                            Store (One, LTLE)
                        }
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x03))
                        {
                            Store (Zero, FDLE)
                            If (LEqual (Arg2, 0x03F0))
                            {
                                Store (Zero, FDDR)
                            }

                            If (LEqual (Arg2, 0x0370))
                            {
                                Store (One, FDDR)
                            }

                            If (Arg1)
                            {
                                Store (One, FDLE)
                            }
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x08))
                            {
                                If (LEqual (Arg2, 0x0200))
                                {
                                    If (Arg1)
                                    {
                                        Store (One, GLLE)
                                    }
                                    Else
                                    {
                                        Store (Zero, GLLE)
                                    }
                                }

                                If (LEqual (Arg2, 0x0208))
                                {
                                    If (Arg1)
                                    {
                                        Store (One, GHLE)
                                    }
                                    Else
                                    {
                                        Store (Zero, GHLE)
                                    }
                                }
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x09))
                                {
                                    If (LEqual (Arg2, 0x0200))
                                    {
                                        If (Arg1)
                                        {
                                            Store (One, GLLE)
                                        }
                                        Else
                                        {
                                            Store (Zero, GLLE)
                                        }
                                    }

                                    If (LEqual (Arg2, 0x0208))
                                    {
                                        If (Arg1)
                                        {
                                            Store (One, GHLE)
                                        }
                                        Else
                                        {
                                            Store (Zero, GHLE)
                                        }
                                    }
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x0A))
                                    {
                                        If (LOr (LEqual (Arg2, 0x60), LEqual (Arg2, 0x64)))
                                        {
                                            If (Arg1)
                                            {
                                                Store (One, KCLE)
                                            }
                                            Else
                                            {
                                                Store (Zero, KCLE)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x0B))
                                        {
                                            If (LOr (LEqual (Arg2, 0x62), LEqual (Arg2, 0x66)))
                                            {
                                                If (Arg1)
                                                {
                                                    Store (One, MCLE)
                                                }
                                                Else
                                                {
                                                    Store (Zero, MCLE)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x0C))
                                            {
                                                If (LEqual (Arg2, 0x2E))
                                                {
                                                    If (Arg1)
                                                    {
                                                        Store (One, C1LE)
                                                    }
                                                    Else
                                                    {
                                                        Store (Zero, C1LE)
                                                    }
                                                }

                                                If (LEqual (Arg2, 0x4E))
                                                {
                                                    If (Arg1)
                                                    {
                                                        Store (One, C2LE)
                                                    }
                                                    Else
                                                    {
                                                        Store (Zero, C2LE)
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x0D))
                                                {
                                                    If (LEqual (Arg2, 0x2E))
                                                    {
                                                        If (Arg1)
                                                        {
                                                            Store (One, C1LE)
                                                        }
                                                        Else
                                                        {
                                                            Store (Zero, C1LE)
                                                        }
                                                    }

                                                    If (LEqual (Arg2, 0x4E))
                                                    {
                                                        If (Arg1)
                                                        {
                                                            Store (One, C2LE)
                                                        }
                                                        Else
                                                        {
                                                            Store (Zero, C2LE)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            Break
        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_GPE)
    {
        Method (_L69, 0, Serialized)
        {
            \_SB.PCI0.RP01.HPME ()
            \_SB.PCI0.RP02.HPME ()
            \_SB.PCI0.RP03.HPME ()
            \_SB.PCI0.RP04.HPME ()
            \_SB.PCI0.RP05.HPME ()
            \_SB.PCI0.RP06.HPME ()
            \_SB.PCI0.RP07.HPME ()
            \_SB.PCI0.RP08.HPME ()
            \_SB.PCI0.RP09.HPME ()
            \_SB.PCI0.RP10.HPME ()
            \_SB.PCI0.RP11.HPME ()
            \_SB.PCI0.RP12.HPME ()
            \_SB.PCI0.RP13.HPME ()
            \_SB.PCI0.RP14.HPME ()
            \_SB.PCI0.RP15.HPME ()
            \_SB.PCI0.RP16.HPME ()
            \_SB.PCI0.RP17.HPME ()
            \_SB.PCI0.RP18.HPME ()
            \_SB.PCI0.RP19.HPME ()
            \_SB.PCI0.RP20.HPME ()
            If (LEqual (D1F0, One))
            {
                \_SB.PCI0.PEG0.HPME ()
                Notify (\_SB.PCI0.PEG0, 0x02)
                Notify (\_SB.PCI0.PEG0.PEGP, 0x02)
            }

            If (LEqual (D1F1, One))
            {
                \_SB.PCI0.PEG1.HPME ()
                Notify (\_SB.PCI0.PEG1, 0x02)
            }

            If (LEqual (D1F2, One))
            {
                \_SB.PCI0.PEG2.HPME ()
                Notify (\_SB.PCI0.PEG2, 0x02)
            }
        }

        Method (_L61, 0, NotSerialized)
        {
            Add (L01C, One, L01C)
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (LAnd (LNotEqual (\_SB.PCI0.RP01.VDID, 0xFFFFFFFF), \_SB.PCI0.RP01.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, One)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP01.PDCX)
                {
                    Store (One, \_SB.PCI0.RP01.PDCX)
                    Store (One, \_SB.PCI0.RP01.HPSX)
                    If (LNot (\_SB.PCI0.RP01.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP01.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, One)))
                    {
                        Notify (\_SB.PCI0.RP01, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP01.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP02.VDID, 0xFFFFFFFF), \_SB.PCI0.RP02.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x02)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP02.PDCX)
                {
                    Store (One, \_SB.PCI0.RP02.PDCX)
                    Store (One, \_SB.PCI0.RP02.HPSX)
                    If (LNot (\_SB.PCI0.RP02.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP02.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x02)))
                    {
                        Notify (\_SB.PCI0.RP02, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP02.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP03.VDID, 0xFFFFFFFF), \_SB.PCI0.RP03.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x03)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP03.PDCX)
                {
                    Store (One, \_SB.PCI0.RP03.PDCX)
                    Store (One, \_SB.PCI0.RP03.HPSX)
                    If (LNot (\_SB.PCI0.RP03.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP03.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x03)))
                    {
                        Notify (\_SB.PCI0.RP03, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP03.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP04.VDID, 0xFFFFFFFF), \_SB.PCI0.RP04.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x04)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP04.PDCX)
                {
                    Store (One, \_SB.PCI0.RP04.PDCX)
                    Store (One, \_SB.PCI0.RP04.HPSX)
                    If (LNot (\_SB.PCI0.RP04.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP04.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x04)))
                    {
                        Notify (\_SB.PCI0.RP04, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP04.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP05.VDID, 0xFFFFFFFF), \_SB.PCI0.RP05.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x05)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP05.PDCX)
                {
                    Store (One, \_SB.PCI0.RP05.PDCX)
                    Store (One, \_SB.PCI0.RP05.HPSX)
                    If (LNot (\_SB.PCI0.RP05.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP05.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x05)))
                    {
                        Notify (\_SB.PCI0.RP05, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP05.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP06.VDID, 0xFFFFFFFF), \_SB.PCI0.RP06.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x06)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP06.PDCX)
                {
                    Store (One, \_SB.PCI0.RP06.PDCX)
                    Store (One, \_SB.PCI0.RP06.HPSX)
                    If (LNot (\_SB.PCI0.RP06.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP06.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x06)))
                    {
                        Notify (\_SB.PCI0.RP06, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP06.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP07.VDID, 0xFFFFFFFF), \_SB.PCI0.RP07.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x07)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP07.PDCX)
                {
                    Store (One, \_SB.PCI0.RP07.PDCX)
                    Store (One, \_SB.PCI0.RP07.HPSX)
                    If (LNot (\_SB.PCI0.RP07.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP07.L0SE)
                    }

                    If (LEqual (PFLV, 0x02))
                    {
                        If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x07)))
                        {
                            Notify (\_SB.PCI0.RP07, Zero)
                        }
                    }
                    Else
                    {
                        If (ECON)
                        {
                            If (LEqual (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.DOCK)), Zero))
                            {
                                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x07)))
                                {
                                    Notify (\_SB.PCI0.RP07, Zero)
                                }
                            }
                        }
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP07.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP08.VDID, 0xFFFFFFFF), \_SB.PCI0.RP08.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x08)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP08.PDCX)
                {
                    Store (One, \_SB.PCI0.RP08.PDCX)
                    Store (One, \_SB.PCI0.RP08.HPSX)
                    If (LNot (\_SB.PCI0.RP08.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP08.L0SE)
                    }

                    If (LEqual (PFLV, 0x02))
                    {
                        If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x08)))
                        {
                            Notify (\_SB.PCI0.RP08, Zero)
                        }
                    }
                    Else
                    {
                        If (ECON)
                        {
                            If (LEqual (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.DOCK)), Zero))
                            {
                                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x08)))
                                {
                                    Notify (\_SB.PCI0.RP08, Zero)
                                }
                            }
                        }
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP08.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP09.VDID, 0xFFFFFFFF), \_SB.PCI0.RP09.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x09)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP09.PDCX)
                {
                    Store (One, \_SB.PCI0.RP09.PDCX)
                    Store (One, \_SB.PCI0.RP09.HPSX)
                    If (LNot (\_SB.PCI0.RP09.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP09.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x09)))
                    {
                        Notify (\_SB.PCI0.RP09, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP09.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP10.VDID, 0xFFFFFFFF), \_SB.PCI0.RP10.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0A)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP10.PDCX)
                {
                    Store (One, \_SB.PCI0.RP10.PDCX)
                    Store (One, \_SB.PCI0.RP10.HPSX)
                    If (LNot (\_SB.PCI0.RP10.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP10.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0A)))
                    {
                        Notify (\_SB.PCI0.RP10, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP10.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP11.VDID, 0xFFFFFFFF), \_SB.PCI0.RP11.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0B)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP11.PDCX)
                {
                    Store (One, \_SB.PCI0.RP11.PDCX)
                    Store (One, \_SB.PCI0.RP11.HPSX)
                    If (LNot (\_SB.PCI0.RP11.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP11.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0B)))
                    {
                        Notify (\_SB.PCI0.RP11, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP11.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP12.VDID, 0xFFFFFFFF), \_SB.PCI0.RP12.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0C)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP12.PDCX)
                {
                    Store (One, \_SB.PCI0.RP12.PDCX)
                    Store (One, \_SB.PCI0.RP12.HPSX)
                    If (LNot (\_SB.PCI0.RP12.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP12.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0C)))
                    {
                        Notify (\_SB.PCI0.RP12, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP12.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP13.VDID, 0xFFFFFFFF), \_SB.PCI0.RP13.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0D)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP13.PDCX)
                {
                    Store (One, \_SB.PCI0.RP13.PDCX)
                    Store (One, \_SB.PCI0.RP13.HPSX)
                    If (LNot (\_SB.PCI0.RP13.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP13.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0D)))
                    {
                        Notify (\_SB.PCI0.RP13, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP13.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP14.VDID, 0xFFFFFFFF), \_SB.PCI0.RP14.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0E)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP14.PDCX)
                {
                    Store (One, \_SB.PCI0.RP14.PDCX)
                    Store (One, \_SB.PCI0.RP14.HPSX)
                    If (LNot (\_SB.PCI0.RP14.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP14.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0E)))
                    {
                        Notify (\_SB.PCI0.RP14, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP14.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP15.VDID, 0xFFFFFFFF), \_SB.PCI0.RP15.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0F)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP15.PDCX)
                {
                    Store (One, \_SB.PCI0.RP15.PDCX)
                    Store (One, \_SB.PCI0.RP15.HPSX)
                    If (LNot (\_SB.PCI0.RP15.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP15.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x0F)))
                    {
                        Notify (\_SB.PCI0.RP15, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP15.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP16.VDID, 0xFFFFFFFF), \_SB.PCI0.RP16.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x10)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP16.PDCX)
                {
                    Store (One, \_SB.PCI0.RP16.PDCX)
                    Store (One, \_SB.PCI0.RP16.HPSX)
                    If (LNot (\_SB.PCI0.RP16.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP16.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x10)))
                    {
                        Notify (\_SB.PCI0.RP16, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP16.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP17.VDID, 0xFFFFFFFF), \_SB.PCI0.RP17.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x11)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP17.PDCX)
                {
                    Store (One, \_SB.PCI0.RP17.PDCX)
                    Store (One, \_SB.PCI0.RP17.HPSX)
                    If (LNot (\_SB.PCI0.RP17.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP17.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x11)))
                    {
                        Notify (\_SB.PCI0.RP17, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP17.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP18.VDID, 0xFFFFFFFF), \_SB.PCI0.RP18.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x12)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP18.PDCX)
                {
                    Store (One, \_SB.PCI0.RP18.PDCX)
                    Store (One, \_SB.PCI0.RP18.HPSX)
                    If (LNot (\_SB.PCI0.RP18.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP18.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x12)))
                    {
                        Notify (\_SB.PCI0.RP18, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP18.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP19.VDID, 0xFFFFFFFF), \_SB.PCI0.RP19.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x13)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP19.PDCX)
                {
                    Store (One, \_SB.PCI0.RP19.PDCX)
                    Store (One, \_SB.PCI0.RP19.HPSX)
                    If (LNot (\_SB.PCI0.RP19.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP19.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x13)))
                    {
                        Notify (\_SB.PCI0.RP19, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP19.HPSX)
                }
            }

            If (LAnd (LNotEqual (\_SB.PCI0.RP20.VDID, 0xFFFFFFFF), \_SB.PCI0.RP20.HPSX))
            {
                If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x14)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP20.PDCX)
                {
                    Store (One, \_SB.PCI0.RP20.PDCX)
                    Store (One, \_SB.PCI0.RP20.HPSX)
                    If (LNot (\_SB.PCI0.RP20.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP20.L0SE)
                    }

                    If (LOr (LNotEqual (TBTS, One), LNotEqual (TBSE, 0x14)))
                    {
                        Notify (\_SB.PCI0.RP20, Zero)
                    }
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP20.HPSX)
                }
            }
        }

        Method (_L62, 0, NotSerialized)
        {
            Store (Zero, GPEC)
            If (CondRefOf (\_PR.DTSE))
            {
                If (LGreaterEqual (\_PR.DTSE, One))
                {
                    Notify (\_TZ.TZ00, 0x80)
                    Notify (\_TZ.TZ01, 0x80)
                }
            }

            If (CondRefOf (\_GPE.HLVT))
            {
                HLVT
            }
        }

        Method (_L66, 0, NotSerialized)
        {
            If (LAnd (\_SB.PCI0.GFX0.GSSE, LNot (GSMI)))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L67, 0, NotSerialized)
        {
            Store (0x20, \_SB.PCI0.SBUS.HSTS)
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)
        {
            \_SB.UGPS ()
            If (LEqual (RTD3, One))
            {
                If (CondRefOf (\_GPE.AL6F))
                {
                    AL6F
                }
            }

            If (LEqual (SGGP, One))
            {
                If (CondRefOf (\_GPE.P0L6))
                {
                    P0L6
                    \_SB.CAGS (P0WK)
                }
            }

            If (LEqual (P1GP, One))
            {
                If (CondRefOf (\_GPE.P1L6))
                {
                    P1L6
                    \_SB.CAGS (P1WK)
                }
            }

            If (LEqual (P2GP, One))
            {
                If (CondRefOf (\_GPE.P2L6))
                {
                    P2L6
                    \_SB.CAGS (P2WK)
                }
            }

            \_SB.CGLS ()
        }
    }

    If (LEqual (CAMT, Zero))
    {
        Scope (_SB)
        {
            Device (ICAM)
            {
                Name (_HID, "INT33A3")
                Name (IDFU, Zero)
                Name (IPWR, Zero)
                Method (_STA, 0, Serialized)
                {
                    If (LEqual (IVDF, One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)
                {
                    Name (_T_0, Zero)
                    If (LEqual (Arg0, Buffer (0x10)
                            {
                                /* 0000 */    0xF7, 0x0F, 0xCF, 0xF5, 0x60, 0x5D, 0x42, 0x48, 
                                /* 0008 */    0x82, 0xC0, 0xFA, 0x1A, 0x61, 0xD8, 0x73, 0xF2
                            }))
                    {
                        While (One)
                        {
                            Store (ToInteger (Arg2), _T_0)
                            If (LEqual (_T_0, Zero))
                            {
                                If (LEqual (ToInteger (Arg1), Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                        0x07
                                    })
                                }

                                Return (Buffer (One)
                                {
                                    0x00
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_0, One))
                                {
                                    If (LEqual (DerefOf (Index (Arg3, Zero)), Zero))
                                    {
                                        If (LEqual (BID, 0x20))
                                        {
                                            SGOV (0x02040000, Zero)
                                            Store (Zero, IDFU)
                                        }

                                        If (LOr (LOr (LOr (LEqual (BID, 0x04), LEqual (BID, 0x14)), 
                                            LEqual (BID, 0x0B)), LEqual (BID, 0x1B)))
                                        {
                                            If (CondRefOf (\_SB.PCI0.GEXP.SGEP))
                                            {
                                                ^^PCI0.GEXP.SGEP (Zero, 0x12, Zero)
                                                Store (Zero, IDFU)
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If (LEqual (BID, 0x20))
                                        {
                                            SGOV (0x02040000, One)
                                            Store (One, IDFU)
                                        }

                                        If (LOr (LOr (LOr (LEqual (BID, 0x04), LEqual (BID, 0x14)), 
                                            LEqual (BID, 0x0B)), LEqual (BID, 0x1B)))
                                        {
                                            If (CondRefOf (\_SB.PCI0.GEXP.SGEP))
                                            {
                                                ^^PCI0.GEXP.SGEP (Zero, 0x12, One)
                                                Store (One, IDFU)
                                            }
                                        }
                                    }

                                    Return (Zero)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x02))
                                    {
                                        If (LEqual (DerefOf (Index (Arg3, Zero)), Zero))
                                        {
                                            If (LEqual (BID, 0x20))
                                            {
                                                SGOV (0x02010002, Zero)
                                                Store (One, IPWR)
                                            }

                                            If (LOr (LOr (LOr (LEqual (BID, 0x04), LEqual (BID, 0x14)), 
                                                LEqual (BID, 0x0B)), LEqual (BID, 0x1B)))
                                            {
                                                If (CondRefOf (\_SB.PCI0.GEXP.SGEP))
                                                {
                                                    ^^PCI0.GEXP.SGEP (Zero, 0x11, Zero)
                                                    Store (One, IPWR)
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If (LEqual (BID, 0x20))
                                            {
                                                SGOV (0x02010002, One)
                                                Store (Zero, IPWR)
                                            }

                                            If (LOr (LOr (LOr (LEqual (BID, 0x04), LEqual (BID, 0x14)), 
                                                LEqual (BID, 0x0B)), LEqual (BID, 0x1B)))
                                            {
                                                If (CondRefOf (\_SB.PCI0.GEXP.SGEP))
                                                {
                                                    ^^PCI0.GEXP.SGEP (Zero, 0x11, One)
                                                    Store (Zero, IPWR)
                                                }
                                            }
                                        }

                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                            Break
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                            0x00
                        })
                    }
                }
            }
        }
    }

    If (LEqual (PCHV (), SPTL))
    {
        If (LNotEqual (SDWE, Zero))
        {
            Scope (_SB.PCI0.PSDC)
            {
                Method (_CRS, 0, NotSerialized)
                {
                    If (LLess (OSYS, 0x07DC))
                    {
                        Return (ResourceTemplate ()
                        {
                        })
                    }

                    Name (RBUF, Buffer (0x52)
                    {
                        /* 0000 */    0x8C, 0x25, 0x00, 0x01, 0x00, 0x01, 0x00, 0x1D, 
                        /* 0008 */    0x00, 0x03, 0x00, 0x00, 0x10, 0x27, 0x17, 0x00, 
                        /* 0010 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
                        /* 0018 */    0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                        /* 0020 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                        /* 0028 */    0x8C, 0x25, 0x00, 0x01, 0x01, 0x01, 0x00, 0x09, 
                        /* 0030 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 
                        /* 0038 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 
                        /* 0040 */    0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                        /* 0048 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                        /* 0050 */    0x79, 0x00
                    })
                    CreateWordField (RBUF, 0x17, SDIP)
                    CreateWordField (RBUF, 0x3F, SDGP)
                    If (LEqual (SDWE, One))
                    {
                        Store (GNUM (0x02010011), SDIP)
                        Store (GNUM (0x02010011), SDGP)
                    }

                    If (LEqual (SDWE, 0x02))
                    {
                        Store (GNUM (0x02060005), SDIP)
                        Store (GNUM (0x02060005), SDGP)
                    }

                    Return (RBUF)
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP01.PXSX))
    {
        Scope (_SB.PCI0.RP01.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
                Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
                Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
                Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
                Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
                Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
                Return (SPLX)
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)
                {
                    ADBG ("PXSX _STA")
                }

                Method (_ON, 0, NotSerialized)
                {
                    ADBG ("PXSX _ON")
                }

                Method (_OFF, 0, NotSerialized)
                {
                    ADBG ("PXSX _OFF")
                }

                Method (_RST, 0, NotSerialized)
                {
                    ADBG ("PXSX _RST")
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Name (_PRR, Package (0x01)
            {
                WRST
            })
            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                Return (WANX)
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
                Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
                Return (WRDX)
            }

            Method (WIST, 0, Serialized)
            {
                Name (_T_0, Zero)
                If (CondRefOf (VDID))
                {
                    While (One)
                    {
                        Store (VDID, _T_0)
                        If (LEqual (_T_0, 0x095A8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x095B8086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31658086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x31668086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B18086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B28086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B38086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x08B48086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F38086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F48086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F58086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (_T_0, 0x24F68086))
                                                                    {
                                                                        Return (One)
                                                                    }
                                                                    Else
                                                                    {
                                                                        Return (Zero)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP05.PXSX))
    {
        Scope (_SB.PCI0.RP05.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
                Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
                Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
                Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
                Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
                Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
                Return (SPLX)
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)
                {
                    ADBG ("PXSX _STA")
                }

                Method (_ON, 0, NotSerialized)
                {
                    ADBG ("PXSX _ON")
                }

                Method (_OFF, 0, NotSerialized)
                {
                    ADBG ("PXSX _OFF")
                }

                Method (_RST, 0, NotSerialized)
                {
                    ADBG ("PXSX _RST")
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Name (_PRR, Package (0x01)
            {
                WRST
            })
            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                Return (WANX)
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
                Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
                Return (WRDX)
            }

            Method (WIST, 0, Serialized)
            {
                Name (_T_0, Zero)
                If (CondRefOf (VDID))
                {
                    While (One)
                    {
                        Store (VDID, _T_0)
                        If (LEqual (_T_0, 0x095A8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x095B8086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31658086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x31668086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B18086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B28086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B38086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x08B48086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F38086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F48086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F58086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (_T_0, 0x24F68086))
                                                                    {
                                                                        Return (One)
                                                                    }
                                                                    Else
                                                                    {
                                                                        Return (Zero)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP09.PXSX))
    {
        Scope (_SB.PCI0.RP09.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
                Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
                Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
                Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
                Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
                Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
                Return (SPLX)
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)
                {
                    ADBG ("PXSX _STA")
                }

                Method (_ON, 0, NotSerialized)
                {
                    ADBG ("PXSX _ON")
                }

                Method (_OFF, 0, NotSerialized)
                {
                    ADBG ("PXSX _OFF")
                }

                Method (_RST, 0, NotSerialized)
                {
                    ADBG ("PXSX _RST")
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Name (_PRR, Package (0x01)
            {
                WRST
            })
            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                Return (WANX)
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
                Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
                Return (WRDX)
            }

            Method (WIST, 0, Serialized)
            {
                Name (_T_0, Zero)
                If (CondRefOf (VDID))
                {
                    While (One)
                    {
                        Store (VDID, _T_0)
                        If (LEqual (_T_0, 0x095A8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x095B8086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31658086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x31668086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B18086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B28086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B38086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x08B48086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F38086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F48086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F58086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (_T_0, 0x24F68086))
                                                                    {
                                                                        Return (One)
                                                                    }
                                                                    Else
                                                                    {
                                                                        Return (Zero)
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.RP10.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP11.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP12.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP13.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP14.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP15.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP16.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP17.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP18.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP19.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP20.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Name (SPLX, Package (0x04)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Store (DOM2, Index (DerefOf (Index (SPLX, 0x02)), Zero))
            Store (LIM2, Index (DerefOf (Index (SPLX, 0x02)), One))
            Store (TIM2, Index (DerefOf (Index (SPLX, 0x02)), 0x02))
            Store (DOM3, Index (DerefOf (Index (SPLX, 0x03)), Zero))
            Store (LIM3, Index (DerefOf (Index (SPLX, 0x03)), One))
            Store (TIM3, Index (DerefOf (Index (SPLX, 0x03)), 0x02))
            Return (SPLX)
        }

        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)
            {
                ADBG ("PXSX _STA")
            }

            Method (_ON, 0, NotSerialized)
            {
                ADBG ("PXSX _ON")
            }

            Method (_OFF, 0, NotSerialized)
            {
                ADBG ("PXSX _OFF")
            }

            Method (_RST, 0, NotSerialized)
            {
                ADBG ("PXSX _RST")
                If (And (DCAP, 0x10000000))
                {
                    Store (DCTR, Local0)
                    Or (Local0, 0x8000, Local0)
                    Store (Local0, DCTR)
                }
            }
        }

        Name (_PRR, Package (0x01)
        {
            WRST
        })
        Name (WANX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (WAND, 0, Serialized)
        {
            Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
            Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
            Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
            Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
            Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
            Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
            Return (WANX)
        }

        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
            Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
            Store (WDM2, Index (DerefOf (Index (WRDX, 0x02)), Zero))
            Store (CID2, Index (DerefOf (Index (WRDX, 0x02)), One))
            Return (WRDX)
        }

        Method (WIST, 0, Serialized)
        {
            Name (_T_0, Zero)
            If (CondRefOf (VDID))
            {
                While (One)
                {
                    Store (VDID, _T_0)
                    If (LEqual (_T_0, 0x095A8086))
                    {
                        Return (One)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x095B8086))
                        {
                            Return (One)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x31658086))
                            {
                                Return (One)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x31668086))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x08B18086))
                                    {
                                        Return (One)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x08B28086))
                                        {
                                            Return (One)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x08B38086))
                                            {
                                                Return (One)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x08B48086))
                                                {
                                                    Return (One)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x24F38086))
                                                    {
                                                        Return (One)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x24F48086))
                                                        {
                                                            Return (One)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x24F58086))
                                                            {
                                                                Return (One)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x24F68086))
                                                                {
                                                                    Return (One)
                                                                }
                                                                Else
                                                                {
                                                                    Return (Zero)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (WHIT, 0, NotSerialized)
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    "DockOemId", 
                    "DockSkuId", 
                    Zero, 
                    0x02, 
                    0x02
                }
            })
        }

        Method (SELF, 0, NotSerialized)
        {
            Return (Package (0x02)
            {
                "PcOemId", 
                "PcSkuId"
            })
        }
    }

    Scope (_SB.PCI0.GFX0)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_SB.PCI0.SAT0)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                LNotEqual (And (PEPC, 0x03), Zero)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
    {
        Scope (_SB.PCI0.I2C0)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C1)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C2)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C3)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C4)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C5)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI0)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI1)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA00)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA01)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA02)
        {
            Name (_DEP, Package (0x01)
            {
                PEPD
            })
        }
    }

    Scope (_SB.PCI0.XHC)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00) {})
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP01.PXSX))
    {
        Scope (_SB.PCI0.RP01.PXSX)
        {
            Method (_DEP, 0, NotSerialized)
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                        LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                        ), 0x0800))))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00) {})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If (LEqual (BCCX, One))
                {
                    If (LEqual (SCCX, 0x06))
                    {
                        If (LEqual (PIXX, One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If (LEqual (BCCX, One))
                {
                    If (LEqual (SCCX, 0x08))
                    {
                        If (LEqual (PIXX, 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    If (CondRefOf (\_SB.PCI0.RP05.PXSX))
    {
        Scope (_SB.PCI0.RP05.PXSX)
        {
            Method (_DEP, 0, NotSerialized)
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                        LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                        ), 0x0800))))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00) {})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If (LEqual (BCCX, One))
                {
                    If (LEqual (SCCX, 0x06))
                    {
                        If (LEqual (PIXX, One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If (LEqual (BCCX, One))
                {
                    If (LEqual (SCCX, 0x08))
                    {
                        If (LEqual (PIXX, 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    If (CondRefOf (\_SB.PCI0.RP09.PXSX))
    {
        Scope (_SB.PCI0.RP09.PXSX)
        {
            Method (_DEP, 0, NotSerialized)
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                        LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                        ), 0x0800))))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00) {})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If (LEqual (BCCX, One))
                {
                    If (LEqual (SCCX, 0x06))
                    {
                        If (LEqual (PIXX, One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If (LEqual (BCCX, One))
                {
                    If (LEqual (SCCX, 0x08))
                    {
                        If (LEqual (PIXX, 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP10.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP11.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP12.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP13.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP14.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP15.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP16.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP17.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP18.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP19.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP20.PXSX)
    {
        Method (_DEP, 0, NotSerialized)
        {
            If (LOr (PAHC (), PNVM ()))
            {
                If (LAnd (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)), 
                    LOr (LEqual (And (PEPC, 0x0400), 0x0400), LEqual (And (PEPC, 0x0800
                    ), 0x0800))))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00) {})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x06))
                {
                    If (LEqual (PIXX, One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If (LEqual (BCCX, One))
            {
                If (LEqual (SCCX, 0x08))
                {
                    If (LEqual (PIXX, 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_PR.CPU0)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU0 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU0 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU0 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.CPU1)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU1 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU1 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU1 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.CPU2)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU2 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU2 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU2 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.CPU3)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU3 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU3 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU3 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.CPU4)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU4 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU4 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU4 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.CPU5)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU5 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU5 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU5 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.CPU6)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU6 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU6 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU6 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_PR.CPU7)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("CPU7 DEP Call")
            If (LOr (LEqual (S0ID, One), LGreaterEqual (OSYS, 0x07DF)))
            {
                ADBG ("CPU7 DEP")
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }
            Else
            {
                ADBG ("CPU7 DEP NULL")
                Return (Package (0x00) {})
            }
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1")
            Name (_CID, EisaId ("PNP0D80"))
            Name (_UID, One)
            Name (DEVY, Package (0x29)
            {
                Package (0x03)
                {
                    "\\_PR.CPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.XHC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "INTELAUDIO\\FUNC_01&VEN_10EC*", 
                    One, 
                    Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            Zero, 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PEMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }
            })
            Name (BCCD, Package (0x19)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }
            })
            Method (_STA, 0, NotSerialized)
            {
                If (LOr (LGreaterEqual (OSYS, 0x07DF), LAnd (LGreaterEqual (OSYS, 
                    0x07DC), LEqual (S0ID, One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)
            {
                ADBG (Concatenate ("PEPC = ", ToHexString (PEPC)))
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xA0, 0x40, 0xEB, 0xC4, 0xD2, 0x6C, 0xE2, 0x11, 
                            /* 0008 */    0xBC, 0xFD, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                            0x7F
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        If (LEqual (S0ID, Zero))
                        {
                            Return (Package (0x00) {})
                        }

                        If (LEqual (And (PEPC, 0x03), One))
                        {
                            If (And (SPST, 0x0F))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x05)), One))
                            }

                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (LOr (^^PCI0.RP01.PXSX.PAHC (), ^^PCI0.RP01.PXSX.PNVM ()))
                                {
                                    Store (One, Index (DerefOf (Index (DEVY, 0x15)), One))
                                }
                            }

                            If (LOr (^^PCI0.RP02.PXSX.PAHC (), ^^PCI0.RP02.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x16)), One))
                            }

                            If (LOr (^^PCI0.RP03.PXSX.PAHC (), ^^PCI0.RP03.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x17)), One))
                            }

                            If (LOr (^^PCI0.RP04.PXSX.PAHC (), ^^PCI0.RP04.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x18)), One))
                            }

                            If (CondRefOf (\_SB.PCI0.RP05.PXSX))
                            {
                                If (LOr (^^PCI0.RP05.PXSX.PAHC (), ^^PCI0.RP05.PXSX.PNVM ()))
                                {
                                    Store (One, Index (DerefOf (Index (DEVY, 0x19)), One))
                                }
                            }

                            If (LOr (^^PCI0.RP06.PXSX.PAHC (), ^^PCI0.RP06.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x1A)), One))
                            }

                            If (LOr (^^PCI0.RP07.PXSX.PAHC (), ^^PCI0.RP07.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x1B)), One))
                            }

                            If (LOr (^^PCI0.RP08.PXSX.PAHC (), ^^PCI0.RP08.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x1C)), One))
                            }

                            If (CondRefOf (\_SB.PCI0.RP09.PXSX))
                            {
                                If (LOr (^^PCI0.RP09.PXSX.PAHC (), ^^PCI0.RP09.PXSX.PNVM ()))
                                {
                                    Store (One, Index (DerefOf (Index (DEVY, 0x1D)), One))
                                }
                            }

                            If (LOr (^^PCI0.RP10.PXSX.PAHC (), ^^PCI0.RP10.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x1E)), One))
                            }

                            If (LOr (^^PCI0.RP11.PXSX.PAHC (), ^^PCI0.RP11.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x1F)), One))
                            }

                            If (LOr (^^PCI0.RP12.PXSX.PAHC (), ^^PCI0.RP12.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x20)), One))
                            }

                            If (LOr (^^PCI0.RP13.PXSX.PAHC (), ^^PCI0.RP13.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x21)), One))
                            }

                            If (LOr (^^PCI0.RP14.PXSX.PAHC (), ^^PCI0.RP14.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x22)), One))
                            }

                            If (LOr (^^PCI0.RP15.PXSX.PAHC (), ^^PCI0.RP15.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x23)), One))
                            }

                            If (LOr (^^PCI0.RP16.PXSX.PAHC (), ^^PCI0.RP16.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x24)), One))
                            }

                            If (LOr (^^PCI0.RP17.PXSX.PAHC (), ^^PCI0.RP17.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x25)), One))
                            }

                            If (LOr (^^PCI0.RP18.PXSX.PAHC (), ^^PCI0.RP18.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x26)), One))
                            }

                            If (LOr (^^PCI0.RP19.PXSX.PAHC (), ^^PCI0.RP19.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x27)), One))
                            }

                            If (LOr (^^PCI0.RP20.PXSX.PAHC (), ^^PCI0.RP20.PXSX.PNVM ()))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x28)), One))
                            }
                        }

                        If (LEqual (And (PEPC, 0x04), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x06)), One))
                        }

                        If (LEqual (And (PEPC, 0x08), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x07)), One))
                        }

                        If (LEqual (And (PEPC, 0x10), Zero)) {}
                        If (LEqual (And (PEPC, 0x20), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x08)), One))
                        }

                        If (LEqual (And (PEPC, 0x40), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x09)), One))
                        }

                        If (LEqual (And (PEPC, 0x80), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0A)), One))
                        }

                        If (LEqual (And (PEPC, 0x0100), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0B)), One))
                        }

                        If (LEqual (And (PEPC, 0x0200), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x04)), One))
                        }

                        If (LEqual (And (PEPC, 0x0400), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, Zero)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, One)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x02)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x03)), One))
                        }

                        If (LEqual (And (PEPC, 0x0800), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0C)), One))
                        }

                        If (LEqual (And (PEPC, 0x1000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0D)), One))
                        }

                        If (LEqual (And (PEPC, 0x2000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0E)), One))
                        }

                        If (LEqual (And (PEPC, 0x4000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0F)), One))
                        }

                        If (LEqual (And (PEPC, 0x8000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x10)), One))
                        }

                        If (LEqual (And (PEPC, 0x00010000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x11)), One))
                        }

                        If (LEqual (And (PEPC, 0x00020000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x12)), One))
                        }

                        If (LEqual (And (PEPC, 0x00040000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x13)), One))
                        }

                        If (LEqual (And (PEPC, 0x00080000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x14)), One))
                        }

                        If (LGreaterEqual (OSYS, 0x07DF))
                        {
                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (^^PCI0.RP01.PXSX.WIST ())
                                {
                                    Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                        0x15)), 0x02)), One)), One))
                                    Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                        0x15)), 0x02)), One)), 0x02))
                                    Store (One, Index (DerefOf (Index (DEVY, 0x15)), One))
                                }
                            }

                            If (^^PCI0.RP02.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x16)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x16)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x16)), One))
                            }

                            If (^^PCI0.RP03.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x17)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x17)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x17)), One))
                            }

                            If (^^PCI0.RP04.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x18)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x18)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x18)), One))
                            }

                            If (CondRefOf (\_SB.PCI0.RP05.PXSX))
                            {
                                If (^^PCI0.RP05.PXSX.WIST ())
                                {
                                    Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                        0x19)), 0x02)), One)), One))
                                    Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                        0x19)), 0x02)), One)), 0x02))
                                    Store (One, Index (DerefOf (Index (DEVY, 0x19)), One))
                                }
                            }

                            If (^^PCI0.RP06.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1A)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1A)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x1A)), One))
                            }

                            If (^^PCI0.RP07.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1B)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1B)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x1B)), One))
                            }

                            If (^^PCI0.RP08.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1C)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1C)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x1C)), One))
                            }

                            If (CondRefOf (\_SB.PCI0.RP09.PXSX))
                            {
                                If (^^PCI0.RP09.PXSX.WIST ())
                                {
                                    Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                        0x1D)), 0x02)), One)), One))
                                    Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                        0x1D)), 0x02)), One)), 0x02))
                                    Store (One, Index (DerefOf (Index (DEVY, 0x1D)), One))
                                }
                            }

                            If (^^PCI0.RP10.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1E)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1E)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x1E)), One))
                            }

                            If (^^PCI0.RP11.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1F)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x1F)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x1F)), One))
                            }

                            If (^^PCI0.RP12.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x20)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x20)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x20)), One))
                            }

                            If (^^PCI0.RP13.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x21)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x21)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x21)), One))
                            }

                            If (^^PCI0.RP14.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x22)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x22)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x22)), One))
                            }

                            If (^^PCI0.RP15.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x23)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x23)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x23)), One))
                            }

                            If (^^PCI0.RP16.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x24)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x24)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x24)), One))
                            }

                            If (^^PCI0.RP17.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x25)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x25)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x25)), One))
                            }

                            If (^^PCI0.RP18.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x26)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x26)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x26)), One))
                            }

                            If (^^PCI0.RP19.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x27)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x27)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x27)), One))
                            }

                            If (^^PCI0.RP20.PXSX.WIST ())
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x28)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 
                                    0x28)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x28)), One))
                            }
                        }

                        Return (DEVY)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (BCCD)
                    }

                    If (LEqual (Arg2, 0x03)) {}
                    If (LEqual (Arg2, 0x04)) {}
                    If (LEqual (Arg2, 0x05))
                    {
                        If (LEqual (S0ID, One))
                        {
                            GUAM (One)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LEqual (S0ID, One))
                        {
                            GUAM (Zero)
                        }
                    }
                }

                Return (One)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (IICB, 2, Serialized)
        {
            Name (_T_0, Zero)
            While (One)
            {
                Store (Arg1, _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Name (IIC0, Buffer (0x23)
                    {
                        /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                        /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                        /* 0010 */    0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                        /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x30, 
                        /* 0020 */    0x00, 0x79, 0x00
                    })
                    CreateWordField (IIC0, 0x10, DAD0)
                    Store (Arg0, DAD0)
                    Return (IIC0)
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        Name (IIC1, Buffer (0x23)
                        {
                            /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                            /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                            /* 0010 */    0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                            /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x31, 
                            /* 0020 */    0x00, 0x79, 0x00
                        })
                        CreateWordField (IIC1, 0x10, DAD1)
                        Store (Arg0, DAD1)
                        Return (IIC1)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Name (IIC2, Buffer (0x23)
                            {
                                /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                                /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                                /* 0010 */    0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                                /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x32, 
                                /* 0020 */    0x00, 0x79, 0x00
                            })
                            CreateWordField (IIC2, 0x10, DAD2)
                            Store (Arg0, DAD2)
                            Return (IIC2)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x03))
                            {
                                Name (IIC3, Buffer (0x23)
                                {
                                    /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                                    /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                                    /* 0010 */    0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                                    /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x33, 
                                    /* 0020 */    0x00, 0x79, 0x00
                                })
                                CreateWordField (IIC3, 0x10, DAD3)
                                Store (Arg0, DAD3)
                                Return (IIC3)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x04))
                                {
                                    Name (IIC4, Buffer (0x23)
                                    {
                                        /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                                        /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                                        /* 0010 */    0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                                        /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x34, 
                                        /* 0020 */    0x00, 0x79, 0x00
                                    })
                                    CreateWordField (IIC4, 0x10, DAD4)
                                    Store (Arg0, DAD4)
                                    Return (IIC4)
                                }
                                Else
                                {
                                    Name (IIC5, Buffer (0x23)
                                    {
                                        /* 0000 */    0x8E, 0x1E, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 
                                        /* 0008 */    0x00, 0x01, 0x06, 0x00, 0x80, 0x1A, 0x06, 0x00, 
                                        /* 0010 */    0x00, 0x00, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 
                                        /* 0018 */    0x43, 0x49, 0x30, 0x2E, 0x49, 0x32, 0x43, 0x35, 
                                        /* 0020 */    0x00, 0x79, 0x00
                                    })
                                    CreateWordField (IIC5, 0x10, DAD5)
                                    Store (Arg0, DAD5)
                                    Return (IIC5)
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Method (PINR, 2, Serialized)
        {
            Name (GPIR, Buffer (0x2A)
            {
                /* 0000 */    0x8C, 0x25, 0x00, 0x01, 0x01, 0x01, 0x00, 0x02, 
                /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 
                /* 0010 */    0x00, 0x19, 0x00, 0x28, 0x00, 0x00, 0x00, 0xFF, 
                /* 0018 */    0xFF, 0x5C, 0x5F, 0x53, 0x42, 0x2E, 0x50, 0x43, 
                /* 0020 */    0x49, 0x30, 0x2E, 0x47, 0x50, 0x49, 0x30, 0x00, 
                /* 0028 */    0x79, 0x00
            })
            CreateWordField (GPIR, 0x17, PINF)
            Store (Add (Multiply (0x18, Arg1), Arg0), PINF)
            Return (GPIR)
        }

        Method (DSMI, 4, Serialized)
        {
            ShiftLeft (Arg3, 0x18, Local3)
            ShiftLeft (Arg2, 0x10, Local2)
            ShiftLeft (Arg1, 0x08, Local1)
            Or (Local1, Arg0, Local0)
            Or (Local0, Local2, Local0)
            Or (Local0, Local3, Local0)
            Return (Local0)
        }

        Method (GPPI, 4, Serialized)
        {
            ShiftLeft (Arg3, 0x18, Local3)
            ShiftLeft (Arg2, 0x10, Local2)
            ShiftLeft (Arg1, 0x08, Local1)
            Or (Local1, Arg0, Local0)
            Or (Local0, Local2, Local0)
            Or (Local0, Local3, Local0)
            Return (Local0)
        }

        Method (GRID, 1, Serialized)
        {
            Name (_T_0, Zero)
            Name (BUF, Buffer (0x09) {})
            While (One)
            {
                Store (Arg0, _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Store (L0H0, Index (BUF, Zero))
                    Store (L0H1, Index (BUF, One))
                    Store (L0H2, Index (BUF, 0x02))
                    Store (L0H3, Index (BUF, 0x03))
                    Store (L0H4, Index (BUF, 0x04))
                    Store (L0H5, Index (BUF, 0x05))
                    Store (L0H6, Index (BUF, 0x06))
                    Store (L0H7, Index (BUF, 0x07))
                    Store (L0H8, Index (BUF, 0x08))
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        Store (L1H0, Index (BUF, Zero))
                        Store (L1H1, Index (BUF, One))
                        Store (L1H2, Index (BUF, 0x02))
                        Store (L1H3, Index (BUF, 0x03))
                        Store (L1H4, Index (BUF, 0x04))
                        Store (L1H5, Index (BUF, 0x05))
                        Store (L1H6, Index (BUF, 0x06))
                        Store (L1H7, Index (BUF, 0x07))
                        Store (L1H8, Index (BUF, 0x08))
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (L2H0, Index (BUF, Zero))
                            Store (L2H1, Index (BUF, One))
                            Store (L2H2, Index (BUF, 0x02))
                            Store (L2H3, Index (BUF, 0x03))
                            Store (L2H4, Index (BUF, 0x04))
                            Store (L2H5, Index (BUF, 0x05))
                            Store (L2H6, Index (BUF, 0x06))
                            Store (L2H7, Index (BUF, 0x07))
                            Store (L2H8, Index (BUF, 0x08))
                        }
                        Else
                        {
                            Store (L3H0, Index (BUF, Zero))
                            Store (L3H1, Index (BUF, One))
                            Store (L3H2, Index (BUF, 0x02))
                            Store (L3H3, Index (BUF, 0x03))
                            Store (L3H4, Index (BUF, 0x04))
                            Store (L3H5, Index (BUF, 0x05))
                            Store (L3H6, Index (BUF, 0x06))
                            Store (L3H7, Index (BUF, 0x07))
                            Store (L3H8, Index (BUF, 0x08))
                        }
                    }
                }

                Break
            }

            Return (ToString (BUF, Ones))
        }

        Method (HCID, 1, Serialized)
        {
            Name (_T_1, Zero)
            Name (_T_0, Zero)
            While (One)
            {
                Store (Arg0, _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Store (L0SM, Local0)
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        Store (L1SM, Local0)
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x02))
                        {
                            Store (L2SM, Local0)
                        }
                        Else
                        {
                            Store (L3SM, Local0)
                        }
                    }
                }

                Break
            }

            While (One)
            {
                Store (Local0, _T_1)
                If (LEqual (_T_1, Zero))
                {
                    Return ("INT3471")
                }
                Else
                {
                    If (LEqual (_T_1, One))
                    {
                        Return ("INT33BE")
                    }
                    Else
                    {
                        If (LEqual (_T_1, 0x02))
                        {
                            Return ("INT3476")
                        }
                        Else
                        {
                            If (LEqual (_T_1, 0x03))
                            {
                                Return ("INT3477")
                            }
                            Else
                            {
                                If (LEqual (_T_1, 0x04))
                                {
                                    Return ("INT3474")
                                }
                                Else
                                {
                                    If (LEqual (_T_1, 0x05))
                                    {
                                        Return ("INT3473")
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_1, 0x06))
                                        {
                                            Return ("INT3475")
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_1, 0x07))
                                            {
                                                Return ("INT3478")
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_1, 0x08))
                                                {
                                                    Return ("INT3479")
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_1, 0x09))
                                                    {
                                                        Return ("INT347A")
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_1, 0x0A))
                                                        {
                                                            Return ("INT347B")
                                                        }
                                                        Else
                                                        {
                                                            Return (GRID (Arg0))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Break
            }
        }

        Method (CDEP, 1, Serialized)
        {
            Name (_T_3, Zero)
            Name (_T_2, Zero)
            Name (_T_1, Zero)
            Name (_T_0, Zero)
            If (LEqual (Arg0, Zero))
            {
                If (LEqual (C0TP, One))
                {
                    While (One)
                    {
                        Store (L0BS, _T_0)
                        If (LEqual (_T_0, Zero))
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C0
                            })
                        }
                        Else
                        {
                            If (LEqual (_T_0, One))
                            {
                                Return (Package (0x02)
                                {
                                    DSC0, 
                                    I2C1
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x02))
                                {
                                    Return (Package (0x02)
                                    {
                                        DSC0, 
                                        I2C2
                                    })
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x03))
                                    {
                                        Return (Package (0x02)
                                        {
                                            DSC0, 
                                            I2C3
                                        })
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x04))
                                        {
                                            Return (Package (0x02)
                                            {
                                                DSC0, 
                                                I2C4
                                            })
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x05))
                                            {
                                                Return (Package (0x02)
                                                {
                                                    DSC0, 
                                                    I2C5
                                                })
                                            }
                                            Else
                                            {
                                                Return (Package (0x01)
                                                {
                                                    DSC0
                                                })
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }

                If (LGreater (C0TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP0
                    })
                }
            }

            If (LEqual (Arg0, One))
            {
                If (LEqual (C1TP, One))
                {
                    While (One)
                    {
                        Store (L1BS, _T_1)
                        If (LEqual (_T_1, Zero))
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C0
                            })
                        }
                        Else
                        {
                            If (LEqual (_T_1, One))
                            {
                                Return (Package (0x02)
                                {
                                    DSC1, 
                                    I2C1
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_1, 0x02))
                                {
                                    Return (Package (0x02)
                                    {
                                        DSC1, 
                                        I2C2
                                    })
                                }
                                Else
                                {
                                    If (LEqual (_T_1, 0x03))
                                    {
                                        Return (Package (0x02)
                                        {
                                            DSC1, 
                                            I2C3
                                        })
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_1, 0x04))
                                        {
                                            Return (Package (0x02)
                                            {
                                                DSC1, 
                                                I2C4
                                            })
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_1, 0x05))
                                            {
                                                Return (Package (0x02)
                                                {
                                                    DSC1, 
                                                    I2C5
                                                })
                                            }
                                            Else
                                            {
                                                Return (Package (0x01)
                                                {
                                                    DSC1
                                                })
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }

                If (LGreater (C1TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP1
                    })
                }
            }

            If (LEqual (Arg0, 0x02))
            {
                If (LEqual (C2TP, One))
                {
                    While (One)
                    {
                        Store (L2BS, _T_2)
                        If (LEqual (_T_2, Zero))
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C0
                            })
                        }
                        Else
                        {
                            If (LEqual (_T_2, One))
                            {
                                Return (Package (0x02)
                                {
                                    DSC2, 
                                    I2C1
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_2, 0x02))
                                {
                                    Return (Package (0x02)
                                    {
                                        DSC2, 
                                        I2C2
                                    })
                                }
                                Else
                                {
                                    If (LEqual (_T_2, 0x03))
                                    {
                                        Return (Package (0x02)
                                        {
                                            DSC2, 
                                            I2C3
                                        })
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_2, 0x04))
                                        {
                                            Return (Package (0x02)
                                            {
                                                DSC2, 
                                                I2C4
                                            })
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_2, 0x05))
                                            {
                                                Return (Package (0x02)
                                                {
                                                    DSC2, 
                                                    I2C5
                                                })
                                            }
                                            Else
                                            {
                                                Return (Package (0x01)
                                                {
                                                    DSC2
                                                })
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }

                If (LGreater (C2TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP2
                    })
                }
            }

            If (LEqual (Arg0, 0x03))
            {
                If (LEqual (C3TP, One))
                {
                    While (One)
                    {
                        Store (L3BS, _T_3)
                        If (LEqual (_T_3, Zero))
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C0
                            })
                        }
                        Else
                        {
                            If (LEqual (_T_3, One))
                            {
                                Return (Package (0x02)
                                {
                                    DSC3, 
                                    I2C1
                                })
                            }
                            Else
                            {
                                If (LEqual (_T_3, 0x02))
                                {
                                    Return (Package (0x02)
                                    {
                                        DSC3, 
                                        I2C2
                                    })
                                }
                                Else
                                {
                                    If (LEqual (_T_3, 0x03))
                                    {
                                        Return (Package (0x02)
                                        {
                                            DSC3, 
                                            I2C3
                                        })
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_3, 0x04))
                                        {
                                            Return (Package (0x02)
                                            {
                                                DSC3, 
                                                I2C4
                                            })
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_3, 0x05))
                                            {
                                                Return (Package (0x02)
                                                {
                                                    DSC3, 
                                                    I2C5
                                                })
                                            }
                                            Else
                                            {
                                                Return (Package (0x01)
                                                {
                                                    DSC3
                                                })
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }

                If (LGreater (C3TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP3
                    })
                }
            }

            Return (Package (0x01)
            {
                PCI0
            })
        }

        Device (DSC0)
        {
            Name (_ADR, Zero)
            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Name (_UID, Zero)
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (C0GP, Zero))
                {
                    Store (PINR (C0P0, C0G0), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C0GP, One))
                {
                    Store (PINR (C0P1, C0G1), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C0GP, 0x02))
                {
                    Store (PINR (C0P2, C0G2), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C0GP, 0x03))
                {
                    Store (PINR (C0P3, C0G3), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL00)
                {
                    If (LEqual (C0TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C0TP, Index (PAR, One))
                Store (C0CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x40, 0x46, 0x23, 0x79, 0x10, 0x9E, 0xEA, 0x4F, 
                            /* 0008 */    0xA5, 0xC1, 0xB5, 0xAA, 0x8B, 0x19, 0x75, 0x6F
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x3F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C0GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C0F0, Add (Multiply (0x18, C0G0), C0P0), 
                            C0I0, C0A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C0F1, Add (Multiply (0x18, C0G1), C0P1), 
                            C0I1, C0A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C0F2, Add (Multiply (0x18, C0G2), C0P2), 
                            C0I2, C0A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C0F3, Add (Multiply (0x18, C0G3), C0P3), 
                            C0I3, C0A3))
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }
            }
        }

        Device (DSC1)
        {
            Name (_ADR, Zero)
            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Name (_UID, One)
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (C1GP, Zero))
                {
                    Store (PINR (C1P0, C1G0), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C1GP, One))
                {
                    Store (PINR (C1P1, C1G1), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C1GP, 0x02))
                {
                    Store (PINR (C1P2, C1G2), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C1GP, 0x03))
                {
                    Store (PINR (C1P3, C1G3), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL01)
                {
                    If (LEqual (C1TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C1TP, Index (PAR, One))
                Store (C1CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x40, 0x46, 0x23, 0x79, 0x10, 0x9E, 0xEA, 0x4F, 
                            /* 0008 */    0xA5, 0xC1, 0xB5, 0xAA, 0x8B, 0x19, 0x75, 0x6F
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x3F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C1GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C1F0, Add (Multiply (0x18, C1G0), C1P0), 
                            C1I0, C1A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C1F1, Add (Multiply (0x18, C1G1), C1P1), 
                            C1I1, C1A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C1F2, Add (Multiply (0x18, C1G2), C1P2), 
                            C1I2, C1A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C1F3, Add (Multiply (0x18, C1G3), C1P3), 
                            C1I3, C1A3))
                    }
                }
            }
        }

        Device (DSC2)
        {
            Name (_ADR, Zero)
            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Name (_UID, 0x02)
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (C2GP, Zero))
                {
                    Store (PINR (C2P0, C2G0), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C2GP, One))
                {
                    Store (PINR (C2P1, C2G1), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C2GP, 0x02))
                {
                    Store (PINR (C2P2, C2G2), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C2GP, 0x03))
                {
                    Store (PINR (C2P3, C2G3), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL02)
                {
                    If (LEqual (C2TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C2TP, Index (PAR, One))
                Store (C2CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x40, 0x46, 0x23, 0x79, 0x10, 0x9E, 0xEA, 0x4F, 
                            /* 0008 */    0xA5, 0xC1, 0xB5, 0xAA, 0x8B, 0x19, 0x75, 0x6F
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x3F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C2GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C2F0, Add (Multiply (0x18, C2G0), C2P0), 
                            C2I0, C2A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C2F1, Add (Multiply (0x18, C2G1), C2P1), 
                            C2I1, C2A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C2F2, Add (Multiply (0x18, C2G2), C2P2), 
                            C2I2, C2A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C2F3, Add (Multiply (0x18, C2G3), C2P3), 
                            C2I3, C2A3))
                    }
                }
            }
        }

        Device (DSC3)
        {
            Name (_ADR, Zero)
            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Name (_UID, 0x03)
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (C3GP, Zero))
                {
                    Store (PINR (C3P0, C3G0), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C3GP, One))
                {
                    Store (PINR (C3P1, C3G1), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C3GP, 0x02))
                {
                    Store (PINR (C3P2, C3G2), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (C3GP, 0x03))
                {
                    Store (PINR (C3P3, C3G3), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL03)
                {
                    If (LEqual (C3TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C3TP, Index (PAR, One))
                Store (C3CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x40, 0x46, 0x23, 0x79, 0x10, 0x9E, 0xEA, 0x4F, 
                            /* 0008 */    0xA5, 0xC1, 0xB5, 0xAA, 0x8B, 0x19, 0x75, 0x6F
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x3F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C3GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C3F0, Add (Multiply (0x18, C3G0), C3P0), 
                            C3I0, C3A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C3F1, Add (Multiply (0x18, C3G1), C3P1), 
                            C3I1, C3A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C3F2, Add (Multiply (0x18, C3G2), C3P2), 
                            C3I2, C3A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C3F3, Add (Multiply (0x18, C3G3), C3P3), 
                            C3I3, C3A3))
                    }
                }
            }
        }

        Device (CLP0)
        {
            Name (_ADR, Zero)
            Method (_DEP, 0, NotSerialized)
            {
                If (CL00)
                {
                    If (LEqual (C0IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C0IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_UID, Zero)
            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                ConcatenateResTemplate (Local0, IICB (C0IA, C0IB), Local0)
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL00)
                {
                    If (LGreater (C0TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C0TP, Index (PAR, One))
                Store (C0CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C0PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x07
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C0IA, Zero, C0IB))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C0IA, Zero, C0IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                    0x00
                })
            }
        }

        Device (CLP1)
        {
            Name (_ADR, Zero)
            Method (_DEP, 0, NotSerialized)
            {
                If (CL01)
                {
                    If (LEqual (C1IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C1IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Name (_UID, One)
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                ConcatenateResTemplate (Local0, IICB (C1IA, C1IB), Local0)
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL01)
                {
                    If (LGreater (C1TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C1TP, Index (PAR, One))
                Store (C1CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C1PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x07
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C1IA, Zero, C1IB))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C1IA, Zero, C1IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                    0x00
                })
            }
        }

        Device (CLP2)
        {
            Name (_ADR, Zero)
            Method (_DEP, 0, NotSerialized)
            {
                If (CL02)
                {
                    If (LEqual (C2IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C2IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Name (_UID, 0x02)
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                ConcatenateResTemplate (Local0, IICB (C2IA, C2IB), Local0)
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL02)
                {
                    If (LGreater (C2TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C2TP, Index (PAR, One))
                Store (C2CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C2PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x07
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C2IA, Zero, C2IB))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C2IA, Zero, C2IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                    0x00
                })
            }
        }

        Device (CLP3)
        {
            Name (_ADR, Zero)
            Method (_DEP, 0, NotSerialized)
            {
                If (CL03)
                {
                    If (LEqual (C3IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C3IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")
            Name (_CID, "INT3472")
            Name (_DDN, "PMIC-CRDG")
            Name (_UID, 0x03)
            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                ConcatenateResTemplate (Local0, IICB (C3IA, C3IB), Local0)
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)
            {
                If (CL03)
                {
                    If (LGreater (C3TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0008 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0010 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                })
                Store (C3TP, Index (PAR, One))
                Store (C3CV, Index (PAR, 0x03))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C3PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x07
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C3IA, Zero, C3IB))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C3IA, Zero, C3IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                    0x00
                })
            }
        }

        Device (LNK0)
        {
            Name (_ADR, Zero)
            Method (_STA, 0, NotSerialized)
            {
                If (L0EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)
            {
                If (L0EN)
                {
                    Return (CDEP (L0CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, Zero)
            Method (_HID, 0, NotSerialized)
            {
                Return (HCID (Zero))
            }

            Method (_CID, 0, NotSerialized)
            {
                Return (HCID (Zero))
            }

            Method (_DDN, 0, NotSerialized)
            {
                Name (BUF, Buffer (0x10) {})
                Store (L0M0, Index (BUF, Zero))
                Store (L0M1, Index (BUF, One))
                Store (L0M2, Index (BUF, 0x02))
                Store (L0M3, Index (BUF, 0x03))
                Store (L0M4, Index (BUF, 0x04))
                Store (L0M5, Index (BUF, 0x05))
                Store (L0M6, Index (BUF, 0x06))
                Store (L0M7, Index (BUF, 0x07))
                Store (L0M8, Index (BUF, 0x08))
                Store (L0M9, Index (BUF, 0x09))
                Store (L0MA, Index (BUF, 0x0A))
                Store (L0MB, Index (BUF, 0x0B))
                Store (L0MC, Index (BUF, 0x0C))
                Store (L0MD, Index (BUF, 0x0D))
                Store (L0ME, Index (BUF, 0x0E))
                Store (L0MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (L0PL, BPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (L0DI, Zero))
                {
                    Store (IICB (L0A0, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, One))
                {
                    Store (IICB (L0A1, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x02))
                {
                    Store (IICB (L0A2, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x03))
                {
                    Store (IICB (L0A3, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x04))
                {
                    Store (IICB (L0A4, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x05))
                {
                    Store (IICB (L0A5, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x06))
                {
                    Store (IICB (L0A6, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x07))
                {
                    Store (IICB (L0A7, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x08))
                {
                    Store (IICB (L0A8, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x09))
                {
                    Store (IICB (L0A9, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x0A))
                {
                    Store (IICB (L0AA, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L0DI, 0x0B))
                {
                    Store (IICB (L0AB, L0BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */    0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11, 
                    /* 0008 */    0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5, 
                    /* 0010 */    0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0020 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0028 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0030 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0038 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0040 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0048 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0050 */    0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
                    /* 0058 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0060 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0068 */    0x00, 0x00, 0x00, 0x00
                })
                Store (L0DV, Index (PAR, Zero))
                Store (L0CV, Index (PAR, One))
                Store (CDIV, Index (PAR, 0x18))
                Store (L0LU, Index (PAR, 0x1C))
                Store (L0NL, Index (PAR, 0x1D))
                Store (L0EE, Index (PAR, 0x4E))
                Store (L0VC, Index (PAR, 0x4F))
                Store (L0FS, Index (PAR, 0x52))
                Store (L0DG, Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L0CK, DAT)
                Store (L0CL, Index (PAR, 0x5A))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x8F, 0xCE, 0x2A, 0x82, 0x14, 0x28, 0x74, 0x41, 
                            /* 0008 */    0xA5, 0x6B, 0x5F, 0x02, 0x9F, 0xE0, 0x79, 0xEE
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10) {})
                        Store (L0M0, Index (BUF, Zero))
                        Store (L0M1, Index (BUF, One))
                        Store (L0M2, Index (BUF, 0x02))
                        Store (L0M3, Index (BUF, 0x03))
                        Store (L0M4, Index (BUF, 0x04))
                        Store (L0M5, Index (BUF, 0x05))
                        Store (L0M6, Index (BUF, 0x06))
                        Store (L0M7, Index (BUF, 0x07))
                        Store (L0M8, Index (BUF, 0x08))
                        Store (L0M9, Index (BUF, 0x09))
                        Store (L0MA, Index (BUF, 0x0A))
                        Store (L0MB, Index (BUF, 0x0B))
                        Store (L0MC, Index (BUF, 0x0C))
                        Store (L0MD, Index (BUF, 0x0D))
                        Store (L0ME, Index (BUF, 0x0E))
                        Store (L0MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L0DI, I2CC)
                        Store (DSMI (L0D0, L0A0, Zero, L0BS), DEV0)
                        Store (DSMI (L0D1, L0A1, Zero, L0BS), DEV1)
                        Store (DSMI (L0D2, L0A2, Zero, L0BS), DEV2)
                        Store (DSMI (L0D3, L0A3, Zero, L0BS), DEV3)
                        Store (DSMI (L0D4, L0A4, Zero, L0BS), DEV4)
                        Store (DSMI (L0D5, L0A5, Zero, L0BS), DEV5)
                        Store (DSMI (L0D6, L0A6, Zero, L0BS), DEV6)
                        Store (DSMI (L0D7, L0A7, Zero, L0BS), DEV7)
                        Store (DSMI (L0D8, L0A8, Zero, L0BS), DEV8)
                        Store (DSMI (L0D9, L0A9, Zero, L0BS), DEV9)
                        Store (DSMI (L0DA, L0AA, Zero, L0BS), DEVA)
                        Store (DSMI (L0DB, L0AB, Zero, L0BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                0xFF, 0x1F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L0DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L0DI, Zero))
                        {
                            Return (DSMI (L0D0, L0A0, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L0DI, One))
                        {
                            Return (DSMI (L0D1, L0A1, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L0DI, 0x02))
                        {
                            Return (DSMI (L0D2, L0A2, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L0DI, 0x03))
                        {
                            Return (DSMI (L0D3, L0A3, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L0DI, 0x04))
                        {
                            Return (DSMI (L0D4, L0A4, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L0DI, 0x05))
                        {
                            Return (DSMI (L0D5, L0A5, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L0DI, 0x06))
                        {
                            Return (DSMI (L0D6, L0A6, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L0DI, 0x07))
                        {
                            Return (DSMI (L0D7, L0A7, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L0DI, 0x08))
                        {
                            Return (DSMI (L0D8, L0A8, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L0DI, 0x09))
                        {
                            Return (DSMI (L0D9, L0A9, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L0DI, 0x0A))
                        {
                            Return (DSMI (L0DA, L0AA, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L0DI, 0x0B))
                        {
                            Return (DSMI (L0DB, L0AB, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }
        }

        Device (LNK1)
        {
            Name (_ADR, Zero)
            Method (_STA, 0, NotSerialized)
            {
                If (L1EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)
            {
                If (L1EN)
                {
                    Return (CDEP (L1CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, One)
            Method (_HID, 0, NotSerialized)
            {
                Return (HCID (One))
            }

            Method (_CID, 0, NotSerialized)
            {
                Return (HCID (One))
            }

            Method (_DDN, 0, NotSerialized)
            {
                Name (BUF, Buffer (0x10) {})
                Store (L1M0, Index (BUF, Zero))
                Store (L1M1, Index (BUF, One))
                Store (L1M2, Index (BUF, 0x02))
                Store (L1M3, Index (BUF, 0x03))
                Store (L1M4, Index (BUF, 0x04))
                Store (L1M5, Index (BUF, 0x05))
                Store (L1M6, Index (BUF, 0x06))
                Store (L1M7, Index (BUF, 0x07))
                Store (L1M8, Index (BUF, 0x08))
                Store (L1M9, Index (BUF, 0x09))
                Store (L1MA, Index (BUF, 0x0A))
                Store (L1MB, Index (BUF, 0x0B))
                Store (L1MC, Index (BUF, 0x0C))
                Store (L1MD, Index (BUF, 0x0D))
                Store (L1ME, Index (BUF, 0x0E))
                Store (L1MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (L1PL, BPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (L1DI, Zero))
                {
                    Store (IICB (L1A0, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, One))
                {
                    Store (IICB (L1A1, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x02))
                {
                    Store (IICB (L1A2, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x03))
                {
                    Store (IICB (L1A3, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x04))
                {
                    Store (IICB (L1A4, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x05))
                {
                    Store (IICB (L1A5, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x06))
                {
                    Store (IICB (L1A6, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x07))
                {
                    Store (IICB (L1A7, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x08))
                {
                    Store (IICB (L1A8, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x09))
                {
                    Store (IICB (L1A9, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x0A))
                {
                    Store (IICB (L1AA, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L1DI, 0x0B))
                {
                    Store (IICB (L1AB, L1BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */    0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11, 
                    /* 0008 */    0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5, 
                    /* 0010 */    0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0020 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0028 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0030 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0038 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0040 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0048 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0050 */    0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
                    /* 0058 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0060 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0068 */    0x00, 0x00, 0x00, 0x00
                })
                Store (L1DV, Index (PAR, Zero))
                Store (L1CV, Index (PAR, One))
                Store (CDIV, Index (PAR, 0x18))
                Store (L1LU, Index (PAR, 0x1C))
                Store (L1NL, Index (PAR, 0x1D))
                Store (L1EE, Index (PAR, 0x4E))
                Store (L1VC, Index (PAR, 0x4F))
                Store (L1FS, Index (PAR, 0x52))
                Store (L1DG, Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L1CK, DAT)
                Store (L1CL, Index (PAR, 0x5A))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x8F, 0xCE, 0x2A, 0x82, 0x14, 0x28, 0x74, 0x41, 
                            /* 0008 */    0xA5, 0x6B, 0x5F, 0x02, 0x9F, 0xE0, 0x79, 0xEE
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10) {})
                        Store (L1M0, Index (BUF, Zero))
                        Store (L1M1, Index (BUF, One))
                        Store (L1M2, Index (BUF, 0x02))
                        Store (L1M3, Index (BUF, 0x03))
                        Store (L1M4, Index (BUF, 0x04))
                        Store (L1M5, Index (BUF, 0x05))
                        Store (L1M6, Index (BUF, 0x06))
                        Store (L1M7, Index (BUF, 0x07))
                        Store (L1M8, Index (BUF, 0x08))
                        Store (L1M9, Index (BUF, 0x09))
                        Store (L1MA, Index (BUF, 0x0A))
                        Store (L1MB, Index (BUF, 0x0B))
                        Store (L1MC, Index (BUF, 0x0C))
                        Store (L1MD, Index (BUF, 0x0D))
                        Store (L1ME, Index (BUF, 0x0E))
                        Store (L1MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L1DI, I2CC)
                        Store (DSMI (L1D0, L1A0, Zero, L1BS), DEV0)
                        Store (DSMI (L1D1, L1A1, Zero, L1BS), DEV1)
                        Store (DSMI (L1D2, L1A2, Zero, L1BS), DEV2)
                        Store (DSMI (L1D3, L1A3, Zero, L1BS), DEV3)
                        Store (DSMI (L1D4, L1A4, Zero, L1BS), DEV4)
                        Store (DSMI (L1D5, L1A5, Zero, L1BS), DEV5)
                        Store (DSMI (L1D6, L1A6, Zero, L1BS), DEV6)
                        Store (DSMI (L1D7, L1A7, Zero, L1BS), DEV7)
                        Store (DSMI (L1D8, L1A8, Zero, L1BS), DEV8)
                        Store (DSMI (L1D9, L1A9, Zero, L1BS), DEV9)
                        Store (DSMI (L1DA, L1AA, Zero, L1BS), DEVA)
                        Store (DSMI (L1DB, L1AB, Zero, L1BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                0xFF, 0x1F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L1DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L1DI, Zero))
                        {
                            Return (DSMI (L1D0, L1A0, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L1DI, One))
                        {
                            Return (DSMI (L1D1, L1A1, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L1DI, 0x02))
                        {
                            Return (DSMI (L1D2, L1A2, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L1DI, 0x03))
                        {
                            Return (DSMI (L1D3, L1A3, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L1DI, 0x04))
                        {
                            Return (DSMI (L1D4, L1A4, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L1DI, 0x05))
                        {
                            Return (DSMI (L1D5, L1A5, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L1DI, 0x06))
                        {
                            Return (DSMI (L1D6, L1A6, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L1DI, 0x07))
                        {
                            Return (DSMI (L1D7, L1A7, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L1DI, 0x08))
                        {
                            Return (DSMI (L1D8, L1A8, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L1DI, 0x09))
                        {
                            Return (DSMI (L1D9, L1A9, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L1DI, 0x0A))
                        {
                            Return (DSMI (L1DA, L1AA, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L1DI, 0x0B))
                        {
                            Return (DSMI (L1DB, L1AB, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }
        }

        Device (LNK2)
        {
            Name (_ADR, Zero)
            Method (_STA, 0, NotSerialized)
            {
                If (L2EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)
            {
                If (L2EN)
                {
                    Return (CDEP (L2CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, 0x02)
            Method (_HID, 0, NotSerialized)
            {
                Return (HCID (0x02))
            }

            Method (_CID, 0, NotSerialized)
            {
                Return (HCID (0x02))
            }

            Method (_DDN, 0, NotSerialized)
            {
                Name (BUF, Buffer (0x10) {})
                Store (L2M0, Index (BUF, Zero))
                Store (L2M1, Index (BUF, One))
                Store (L2M2, Index (BUF, 0x02))
                Store (L2M3, Index (BUF, 0x03))
                Store (L2M4, Index (BUF, 0x04))
                Store (L2M5, Index (BUF, 0x05))
                Store (L2M6, Index (BUF, 0x06))
                Store (L2M7, Index (BUF, 0x07))
                Store (L2M8, Index (BUF, 0x08))
                Store (L2M9, Index (BUF, 0x09))
                Store (L2MA, Index (BUF, 0x0A))
                Store (L2MB, Index (BUF, 0x0B))
                Store (L2MC, Index (BUF, 0x0C))
                Store (L2MD, Index (BUF, 0x0D))
                Store (L2ME, Index (BUF, 0x0E))
                Store (L2MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (L2PL, BPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (L2DI, Zero))
                {
                    Store (IICB (L2A0, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, One))
                {
                    Store (IICB (L2A1, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x02))
                {
                    Store (IICB (L2A2, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x03))
                {
                    Store (IICB (L2A3, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x04))
                {
                    Store (IICB (L2A4, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x05))
                {
                    Store (IICB (L2A5, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x06))
                {
                    Store (IICB (L2A6, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x07))
                {
                    Store (IICB (L2A7, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x08))
                {
                    Store (IICB (L2A8, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x09))
                {
                    Store (IICB (L2A9, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x0A))
                {
                    Store (IICB (L2AA, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L2DI, 0x0B))
                {
                    Store (IICB (L2AB, L2BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */    0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11, 
                    /* 0008 */    0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5, 
                    /* 0010 */    0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0020 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0028 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0030 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0038 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0040 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0048 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0050 */    0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
                    /* 0058 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0060 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0068 */    0x00, 0x00, 0x00, 0x00
                })
                Store (L2DV, Index (PAR, Zero))
                Store (L2CV, Index (PAR, One))
                Store (CDIV, Index (PAR, 0x18))
                Store (L2LU, Index (PAR, 0x1C))
                Store (L2NL, Index (PAR, 0x1D))
                Store (L2EE, Index (PAR, 0x4E))
                Store (L2VC, Index (PAR, 0x4F))
                Store (L2FS, Index (PAR, 0x52))
                Store (L2DG, Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L2CK, DAT)
                Store (L2CL, Index (PAR, 0x5A))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x8F, 0xCE, 0x2A, 0x82, 0x14, 0x28, 0x74, 0x41, 
                            /* 0008 */    0xA5, 0x6B, 0x5F, 0x02, 0x9F, 0xE0, 0x79, 0xEE
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10) {})
                        Store (L2M0, Index (BUF, Zero))
                        Store (L2M1, Index (BUF, One))
                        Store (L2M2, Index (BUF, 0x02))
                        Store (L2M3, Index (BUF, 0x03))
                        Store (L2M4, Index (BUF, 0x04))
                        Store (L2M5, Index (BUF, 0x05))
                        Store (L2M6, Index (BUF, 0x06))
                        Store (L2M7, Index (BUF, 0x07))
                        Store (L2M8, Index (BUF, 0x08))
                        Store (L2M9, Index (BUF, 0x09))
                        Store (L2MA, Index (BUF, 0x0A))
                        Store (L2MB, Index (BUF, 0x0B))
                        Store (L2MC, Index (BUF, 0x0C))
                        Store (L2MD, Index (BUF, 0x0D))
                        Store (L2ME, Index (BUF, 0x0E))
                        Store (L2MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L2DI, I2CC)
                        Store (DSMI (L2D0, L2A0, Zero, L2BS), DEV0)
                        Store (DSMI (L2D1, L2A1, Zero, L2BS), DEV1)
                        Store (DSMI (L2D2, L2A2, Zero, L2BS), DEV2)
                        Store (DSMI (L2D3, L2A3, Zero, L2BS), DEV3)
                        Store (DSMI (L2D4, L2A4, Zero, L2BS), DEV4)
                        Store (DSMI (L2D5, L2A5, Zero, L2BS), DEV5)
                        Store (DSMI (L2D6, L2A6, Zero, L2BS), DEV6)
                        Store (DSMI (L2D7, L2A7, Zero, L2BS), DEV7)
                        Store (DSMI (L2D8, L2A8, Zero, L2BS), DEV8)
                        Store (DSMI (L2D9, L2A9, Zero, L2BS), DEV9)
                        Store (DSMI (L2DA, L2AA, Zero, L2BS), DEVA)
                        Store (DSMI (L2DB, L2AB, Zero, L2BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                0xFF, 0x1F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L2DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L2DI, Zero))
                        {
                            Return (DSMI (L2D0, L2A0, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L2DI, One))
                        {
                            Return (DSMI (L2D1, L2A1, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L2DI, 0x02))
                        {
                            Return (DSMI (L2D2, L2A2, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L2DI, 0x03))
                        {
                            Return (DSMI (L2D3, L2A3, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L2DI, 0x04))
                        {
                            Return (DSMI (L2D4, L2A4, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L2DI, 0x05))
                        {
                            Return (DSMI (L2D5, L2A5, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L2DI, 0x06))
                        {
                            Return (DSMI (L2D6, L2A6, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L2DI, 0x07))
                        {
                            Return (DSMI (L2D7, L2A7, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L2DI, 0x08))
                        {
                            Return (DSMI (L2D8, L2A8, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L2DI, 0x09))
                        {
                            Return (DSMI (L2D9, L2A9, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L2DI, 0x0A))
                        {
                            Return (DSMI (L2DA, L2AA, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L2DI, 0x0B))
                        {
                            Return (DSMI (L2DB, L2AB, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }
        }

        Device (LNK3)
        {
            Name (_ADR, Zero)
            Method (_STA, 0, NotSerialized)
            {
                If (L3EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)
            {
                If (L3EN)
                {
                    Return (CDEP (L3CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, 0x03)
            Method (_HID, 0, NotSerialized)
            {
                Return (HCID (0x03))
            }

            Method (_CID, 0, NotSerialized)
            {
                Return (HCID (0x03))
            }

            Method (_DDN, 0, NotSerialized)
            {
                Name (BUF, Buffer (0x10) {})
                Store (L3M0, Index (BUF, Zero))
                Store (L3M1, Index (BUF, One))
                Store (L3M2, Index (BUF, 0x02))
                Store (L3M3, Index (BUF, 0x03))
                Store (L3M4, Index (BUF, 0x04))
                Store (L3M5, Index (BUF, 0x05))
                Store (L3M6, Index (BUF, 0x06))
                Store (L3M7, Index (BUF, 0x07))
                Store (L3M8, Index (BUF, 0x08))
                Store (L3M9, Index (BUF, 0x09))
                Store (L3MA, Index (BUF, 0x0A))
                Store (L3MB, Index (BUF, 0x0B))
                Store (L3MC, Index (BUF, 0x0C))
                Store (L3MD, Index (BUF, 0x0D))
                Store (L3ME, Index (BUF, 0x0E))
                Store (L3MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */    0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                        /* 0008 */    0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
                        /* 0010 */    0xFF, 0xFF, 0xFF, 0xFF
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (L3PL, BPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)
            {
                Store (ResourceTemplate ()
                    {
                    }, Local0)
                If (LGreater (L3DI, Zero))
                {
                    Store (IICB (L3A0, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, One))
                {
                    Store (IICB (L3A1, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x02))
                {
                    Store (IICB (L3A2, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x03))
                {
                    Store (IICB (L3A3, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x04))
                {
                    Store (IICB (L3A4, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x05))
                {
                    Store (IICB (L3A5, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x06))
                {
                    Store (IICB (L3A6, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x07))
                {
                    Store (IICB (L3A7, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x08))
                {
                    Store (IICB (L3A8, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x09))
                {
                    Store (IICB (L3A9, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x0A))
                {
                    Store (IICB (L3AA, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If (LGreater (L3DI, 0x0B))
                {
                    Store (IICB (L3AB, L3BS), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */    0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11, 
                    /* 0008 */    0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5, 
                    /* 0010 */    0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0018 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0020 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0028 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0030 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0038 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0040 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0048 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0050 */    0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
                    /* 0058 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0060 */    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                    /* 0068 */    0x00, 0x00, 0x00, 0x00
                })
                Store (L3DV, Index (PAR, Zero))
                Store (L3CV, Index (PAR, One))
                Store (CDIV, Index (PAR, 0x18))
                Store (L3LU, Index (PAR, 0x1C))
                Store (L3NL, Index (PAR, 0x1D))
                Store (L3EE, Index (PAR, 0x4E))
                Store (L3VC, Index (PAR, 0x4F))
                Store (L3FS, Index (PAR, 0x52))
                Store (L3DG, Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L3CK, DAT)
                Store (L3CL, Index (PAR, 0x5A))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x8F, 0xCE, 0x2A, 0x82, 0x14, 0x28, 0x74, 0x41, 
                            /* 0008 */    0xA5, 0x6B, 0x5F, 0x02, 0x9F, 0xE0, 0x79, 0xEE
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10) {})
                        Store (L3M0, Index (BUF, Zero))
                        Store (L3M1, Index (BUF, One))
                        Store (L3M2, Index (BUF, 0x02))
                        Store (L3M3, Index (BUF, 0x03))
                        Store (L3M4, Index (BUF, 0x04))
                        Store (L3M5, Index (BUF, 0x05))
                        Store (L3M6, Index (BUF, 0x06))
                        Store (L3M7, Index (BUF, 0x07))
                        Store (L3M8, Index (BUF, 0x08))
                        Store (L3M9, Index (BUF, 0x09))
                        Store (L3MA, Index (BUF, 0x0A))
                        Store (L3MB, Index (BUF, 0x0B))
                        Store (L3MC, Index (BUF, 0x0C))
                        Store (L3MD, Index (BUF, 0x0D))
                        Store (L3ME, Index (BUF, 0x0E))
                        Store (L3MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xC8, 0xC5, 0x15, 0x58, 0x7D, 0xC4, 0x7B, 0x47, 
                            /* 0008 */    0x9A, 0x8D, 0x76, 0x17, 0x31, 0x76, 0x41, 0x4B
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34) {})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L3DI, I2CC)
                        Store (DSMI (L3D0, L3A0, Zero, L3BS), DEV0)
                        Store (DSMI (L3D1, L3A1, Zero, L3BS), DEV1)
                        Store (DSMI (L3D2, L3A2, Zero, L3BS), DEV2)
                        Store (DSMI (L3D3, L3A3, Zero, L3BS), DEV3)
                        Store (DSMI (L3D4, L3A4, Zero, L3BS), DEV4)
                        Store (DSMI (L3D5, L3A5, Zero, L3BS), DEV5)
                        Store (DSMI (L3D6, L3A6, Zero, L3BS), DEV6)
                        Store (DSMI (L3D7, L3A7, Zero, L3BS), DEV7)
                        Store (DSMI (L3D8, L3A8, Zero, L3BS), DEV8)
                        Store (DSMI (L3D9, L3A9, Zero, L3BS), DEV9)
                        Store (DSMI (L3DA, L3AA, Zero, L3BS), DEVA)
                        Store (DSMI (L3DB, L3AB, Zero, L3BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                        0x00
                    })
                }

                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0x49, 0x75, 0x25, 0x26, 0x71, 0x92, 0xA4, 0x4C, 
                            /* 0008 */    0xBB, 0x43, 0xC4, 0x89, 0x9D, 0x5A, 0x48, 0x81
                        }))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                0xFF, 0x1F
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                0x01
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L3DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L3DI, Zero))
                        {
                            Return (DSMI (L3D0, L3A0, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L3DI, One))
                        {
                            Return (DSMI (L3D1, L3A1, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L3DI, 0x02))
                        {
                            Return (DSMI (L3D2, L3A2, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L3DI, 0x03))
                        {
                            Return (DSMI (L3D3, L3A3, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L3DI, 0x04))
                        {
                            Return (DSMI (L3D4, L3A4, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L3DI, 0x05))
                        {
                            Return (DSMI (L3D5, L3A5, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L3DI, 0x06))
                        {
                            Return (DSMI (L3D6, L3A6, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L3DI, 0x07))
                        {
                            Return (DSMI (L3D7, L3A7, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L3DI, 0x08))
                        {
                            Return (DSMI (L3D8, L3A8, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L3DI, 0x09))
                        {
                            Return (DSMI (L3D9, L3A9, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L3DI, 0x0A))
                        {
                            Return (DSMI (L3DA, L3AA, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L3DI, 0x0B))
                        {
                            Return (DSMI (L3DB, L3AB, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (WCT0)
        {
            Name (_HID, EisaId ("IWC0001"))
            Name (_UID, Zero)
            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (WIFC, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PCMD, 1, NotSerialized)
            {
                Store (Arg0, ^^PCI0.LPCB.H_EC.IWCW)
                ^^PCI0.LPCB.H_EC.ECMD (0xE1)
            }

            Method (ITPW, 1, NotSerialized)
            {
                Store (Arg0, ^^PCI0.LPCB.H_EC.IWCW)
                ^^PCI0.LPCB.H_EC.ECMD (0xE1)
            }

            Method (ITPR, 0, NotSerialized)
            {
                Return (^^PCI0.LPCB.H_EC.IWCR)
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0xAF6D7018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            DSAF,   32, 
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10) {})
        CreateDWordField (ARBF, Zero, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        OperationRegion (IOB2, SystemIO, SMIP, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }

        Method (ISMI, 1, Serialized)
        {
            Store (Arg0, SMIC)
        }

        Method (GMSR, 1, Serialized)
        {
            If (LEqual (Acquire (MPAR, 0xFFFF), Zero))
            {
                Store (0x80000000, PINX)
                Store (Arg0, PAR0)
                ISMI (0x90)
                Store (Arg0, RECX)
                Store (PAR1, REAX)
                Store (PAR2, REDX)
                Release (MPAR)
                Return (ARBF)
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If (LEqual (Acquire (MPAR, 0xFFFF), Zero))
            {
                CreateDWordField (Arg0, Zero, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                Store (0x80000001, PINX)
                Store (AECX, PAR0)
                Store (AEAX, PAR1)
                Store (AEDX, PAR2)
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (PRID, 1, Serialized)
        {
            If (LEqual (Acquire (MPAR, 0xFFFF), Zero))
            {
                Store (0x80000002, PINX)
                Store (Arg0, PAR0)
                ISMI (0x90)
                Store (PAR1, REAX)
                Store (PAR2, REDX)
                Release (MPAR)
                Return (ARBF)
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            Store (Arg0, PAR0)
            Store (0x80000005, PINX)
            ISMI (0x90)
            Return (PAR0)
        }

        Method (GNVS, 1, Serialized)
        {
            Store (Arg0, PAR0)
            Store (0x80000003, PINX)
            ISMI (0x90)
            Return (PAR1)
        }

        Method (SNVS, 2, Serialized)
        {
            Store (Arg0, PAR0)
            Store (Arg1, PAR1)
            Store (0x80000004, PINX)
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            Store (0x8000000A, PINX)
            ISMI (0x90)
        }

        Method (SRAD, 0, Serialized)
        {
            Store (0x8000000B, PINX)
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (LAnd (LGreater (Arg0, 0x03), LLess (Arg0, 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Scope (\)
    {
        Device (AMW0)
        {
            Name (_HID, EisaId ("PNP0C14"))
            Name (_UID, "ASUSWMI")
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */    0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11, 
                /* 0008 */    0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66, 
                /* 0010 */    0x42, 0x43, 0x01, 0x02, 0xA0, 0x47, 0x67, 0x46, 
                /* 0018 */    0xEC, 0x70, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00, 
                /* 0020 */    0x20, 0x0C, 0x9A, 0x66, 0x42, 0x44, 0x01, 0x02, 
                /* 0028 */    0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11, 
                /* 0030 */    0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00, 
                /* 0038 */    0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05, 
                /* 0040 */    0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0, 
                /* 0048 */    0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00
            })
            Name (CCAC, Zero)
            Name (ECD2, Zero)
            Name (EID2, Zero)
            Method (WED2, 1, NotSerialized)
            {
                Store (Arg0, ECD2)
            }

            Method (WMBC, 3, Serialized)
            {
                Name (_T_0, Zero)
                Store (One, Local0)
                While (One)
                {
                    Store (Arg1, _T_0)
                    If (LEqual (_T_0, 0x43455053))
                    {
                        Return (SPEC (Arg2))
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x50564544))
                        {
                            Return (DEVP (Arg2))
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x50534453))
                            {
                                Return (SDSP (Arg2))
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x50534447))
                                {
                                    Return (GDSP (Arg2))
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x53564544))
                                    {
                                        Return (DEVS (Arg2))
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x53544344))
                                        {
                                            Return (DSTS (Arg2))
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x44495047))
                                            {
                                                Return (GPID ())
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x5446424B))
                                                {
                                                    Return (KBFT (Arg2))
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x59454B48))
                                                    {
                                                        Return (HKEY ())
                                                    }
                                                    Else
                                                    {
                                                        Return (Zero)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }

                Return (Local0)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WMBD, 3, Serialized)
            {
                Name (_T_0, Zero)
                Store (One, Local0)
                While (One)
                {
                    Store (Arg1, _T_0)
                    If (LEqual (_T_0, 0x424D5352))
                    {
                        Return (RSMB (Arg2))
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x424D5357))
                        {
                            Return (WSMB (Arg2))
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x574D5352))
                            {
                                Return (RSMW (Arg2))
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x574D5357))
                                {
                                    Return (WSMW (Arg2))
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x4B4D5352))
                                    {
                                        Return (RSMK (Arg2))
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x4B4D5357))
                                        {
                                            Return (WSMK (Arg2))
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }

                Return (Local0)
            }

            Method (_WED, 1, NotSerialized)
            {
                If (LEqual (Arg0, 0xD2))
                {
                    Return (EID2)
                }

                Return (Zero)
            }

            Method (AMWR, 1, Serialized)
            {
                Store (Zero, Local1)
                If (ECD2)
                {
                    Store (Arg0, EID2)
                    Notify (AMW0, 0xD2)
                    Store (One, Local1)
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Store (AMWR (Arg0), Local0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x09A6)
            {
                /* 0000 */    0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00, 
                /* 0008 */    0x96, 0x09, 0x00, 0x00, 0x42, 0x38, 0x00, 0x00, 
                /* 0010 */    0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54, 
                /* 0018 */    0xA8, 0xD1, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42, 
                /* 0020 */    0x10, 0x07, 0x10, 0x4A, 0x29, 0x86, 0x42, 0x04, 
                /* 0028 */    0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12, 
                /* 0030 */    0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00, 
                /* 0038 */    0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 
                /* 0040 */    0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94, 
                /* 0048 */    0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E, 
                /* 0050 */    0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80, 
                /* 0058 */    0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A, 
                /* 0060 */    0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00, 
                /* 0068 */    0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08, 
                /* 0070 */    0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43, 
                /* 0078 */    0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0, 
                /* 0080 */    0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xE0, 0x4D, 
                /* 0088 */    0x80, 0xB8, 0x61, 0x68, 0x85, 0x07, 0x10, 0xAA, 
                /* 0090 */    0x30, 0x01, 0xB6, 0x60, 0x84, 0x52, 0x1B, 0x8C, 
                /* 0098 */    0x50, 0x1A, 0x43, 0xD0, 0x30, 0x8C, 0x12, 0xF1, 
                /* 00A0 */    0x90, 0x3A, 0x83, 0x15, 0x4A, 0xC4, 0x30, 0x21, 
                /* 00A8 */    0x22, 0x54, 0x86, 0x41, 0x86, 0x15, 0x2A, 0x5A, 
                /* 00B0 */    0xDC, 0x08, 0xED, 0x0F, 0x82, 0x44, 0x5B, 0xB1, 
                /* 00B8 */    0x86, 0xEA, 0x48, 0xA3, 0x41, 0x0D, 0x2F, 0xC1, 
                /* 00C0 */    0xE1, 0x7A, 0xA8, 0xE7, 0xD8, 0xB9, 0x00, 0xE9, 
                /* 00C8 */    0xC0, 0x02, 0x09, 0x7E, 0x16, 0x75, 0x8E, 0x93, 
                /* 00D0 */    0x80, 0x24, 0x30, 0xD6, 0xF1, 0xB3, 0x81, 0xE3, 
                /* 00D8 */    0x5D, 0x03, 0x6A, 0xC6, 0xC7, 0xCB, 0x04, 0xC1, 
                /* 00E0 */    0xA1, 0x86, 0xE8, 0x81, 0x86, 0x3B, 0x81, 0x43, 
                /* 00E8 */    0x64, 0x80, 0x9E, 0xD3, 0xD1, 0x60, 0x0E, 0x00, 
                /* 00F0 */    0x76, 0x38, 0x19, 0xDD, 0x03, 0x4A, 0x15, 0x60, 
                /* 00F8 */    0x76, 0xCC, 0xB2, 0x08, 0xA4, 0xF1, 0x18, 0xFA, 
                /* 0100 */    0x74, 0xCF, 0xE7, 0x84, 0x13, 0x58, 0xFE, 0x20, 
                /* 0108 */    0x50, 0x23, 0x33, 0xB4, 0x0D, 0x4E, 0x4B, 0x98, 
                /* 0110 */    0x21, 0x0F, 0xFF, 0xB0, 0x98, 0x58, 0x08, 0x7D, 
                /* 0118 */    0x10, 0x3C, 0x1E, 0x78, 0xFF, 0xFF, 0xF1, 0x80, 
                /* 0120 */    0x47, 0xF1, 0x99, 0x40, 0x08, 0xAF, 0x04, 0xB1, 
                /* 0128 */    0x3D, 0xA0, 0xE7, 0x04, 0x03, 0x63, 0x07, 0x64, 
                /* 0130 */    0xBF, 0x02, 0x10, 0x82, 0x97, 0x39, 0x22, 0x39, 
                /* 0138 */    0x45, 0xD0, 0x98, 0x8C, 0xD1, 0x2A, 0x84, 0x86, 
                /* 0140 */    0x10, 0xDA, 0x10, 0x67, 0x17, 0xFF, 0xE0, 0x0D, 
                /* 0148 */    0x73, 0xEE, 0x26, 0x28, 0x72, 0x04, 0xA8, 0xCF, 
                /* 0150 */    0x84, 0x47, 0xC0, 0x8F, 0x01, 0xD1, 0x43, 0x9F, 
                /* 0158 */    0x4D, 0xF4, 0xE3, 0x89, 0x72, 0x12, 0x07, 0xE4, 
                /* 0160 */    0x33, 0x83, 0x11, 0x82, 0x97, 0x7B, 0x48, 0x20, 
                /* 0168 */    0x9A, 0xE7, 0xA0, 0x13, 0xC3, 0x39, 0x1D, 0x02, 
                /* 0170 */    0x53, 0xA3, 0x05, 0xA2, 0x09, 0x10, 0x45, 0x59, 
                /* 0178 */    0xAA, 0x6C, 0x2C, 0xD5, 0x83, 0xA0, 0x82, 0x80, 
                /* 0180 */    0x34, 0x77, 0x43, 0x9C, 0xB4, 0x91, 0x03, 0xC7, 
                /* 0188 */    0xA8, 0x7E, 0xD8, 0x54, 0x04, 0x9C, 0x0E, 0x1B, 
                /* 0190 */    0x1E, 0xB7, 0xE3, 0x93, 0x28, 0xFA, 0x80, 0x28, 
                /* 0198 */    0x9C, 0xC3, 0x9E, 0x39, 0x28, 0x88, 0x01, 0x9D, 
                /* 01A0 */    0x04, 0x42, 0x4E, 0x8E, 0x02, 0xA8, 0xBD, 0x68, 
                /* 01A8 */    0x58, 0x1A, 0xD7, 0xA9, 0xBD, 0x09, 0x78, 0x5A, 
                /* 01B0 */    0x8F, 0x05, 0x87, 0x71, 0x5C, 0x67, 0x6D, 0xD1, 
                /* 01B8 */    0x37, 0x06, 0x3A, 0x1F, 0xDF, 0x05, 0xB8, 0x06, 
                /* 01C0 */    0x08, 0xCD, 0xC8, 0xF0, 0x56, 0x03, 0x48, 0xC1, 
                /* 01C8 */    0xF8, 0x49, 0xE0, 0x11, 0xC0, 0x04, 0xD6, 0x75, 
                /* 01D0 */    0x20, 0x80, 0x7E, 0xD9, 0xF0, 0xF0, 0x7D, 0xC2, 
                /* 01D8 */    0x78, 0xBC, 0x48, 0x50, 0xDF, 0x7D, 0x00, 0x14, 
                /* 01E0 */    0x40, 0x3E, 0x00, 0x58, 0xE9, 0x1D, 0x80, 0x8E, 
                /* 01E8 */    0x21, 0x44, 0x98, 0x68, 0x46, 0xE7, 0x12, 0x56, 
                /* 01F0 */    0xAA, 0xFF, 0xFF, 0x68, 0xF9, 0x41, 0xC5, 0xA3, 
                /* 01F8 */    0x35, 0x88, 0x47, 0xEB, 0x40, 0xA3, 0x45, 0x1F, 
                /* 0200 */    0x33, 0xAC, 0x70, 0x54, 0xF2, 0x39, 0x01, 0x0D, 
                /* 0208 */    0x17, 0x06, 0x41, 0xE1, 0x07, 0x0E, 0x68, 0x80, 
                /* 0210 */    0xA7, 0xF7, 0x66, 0xE0, 0x99, 0x18, 0xCE, 0xF3, 
                /* 0218 */    0xE5, 0x70, 0x9E, 0x2F, 0x1F, 0x8E, 0x0F, 0x14, 
                /* 0220 */    0xF0, 0x07, 0x8C, 0x25, 0x28, 0x70, 0xC2, 0x20, 
                /* 0228 */    0x87, 0xC7, 0x08, 0x1E, 0x2C, 0x95, 0x35, 0x2E, 
                /* 0230 */    0xD4, 0xFD, 0xC0, 0x27, 0x1A, 0x86, 0x7D, 0xA8, 
                /* 0238 */    0x47, 0xF3, 0x96, 0x70, 0x86, 0x6F, 0x13, 0x07, 
                /* 0240 */    0xF5, 0xEE, 0x61, 0xA7, 0x42, 0x2D, 0x3A, 0x84, 
                /* 0248 */    0xF5, 0x48, 0x39, 0xAC, 0xD1, 0xC2, 0x1E, 0xF0, 
                /* 0250 */    0x73, 0x87, 0xEF, 0x19, 0xFC, 0x4A, 0xE3, 0x63, 
                /* 0258 */    0x08, 0x5D, 0x85, 0x4E, 0x15, 0x5C, 0x14, 0x84, 
                /* 0260 */    0xE2, 0xAD, 0x45, 0xC3, 0x3F, 0x0B, 0x8F, 0xEB, 
                /* 0268 */    0x15, 0xC3, 0x57, 0x80, 0x87, 0x13, 0x9F, 0x01, 
                /* 0270 */    0xE2, 0x07, 0x3A, 0x82, 0x17, 0x11, 0x9F, 0x7D, 
                /* 0278 */    0x7C, 0x79, 0xF1, 0x21, 0x83, 0x9D, 0x2C, 0x78, 
                /* 0280 */    0x08, 0x0A, 0xC5, 0x38, 0x1C, 0xA0, 0x84, 0xC3, 
                /* 0288 */    0x08, 0xCE, 0x20, 0x1E, 0x9E, 0x83, 0x1C, 0x0E, 
                /* 0290 */    0xD0, 0xE7, 0x20, 0x0F, 0x84, 0x0D, 0xC2, 0x20, 
                /* 0298 */    0xE7, 0xF1, 0xF2, 0xC3, 0x2E, 0x16, 0xF8, 0xFF, 
                /* 02A0 */    0xFF, 0xC5, 0x02, 0x78, 0xA5, 0x19, 0x14, 0x5A, 
                /* 02A8 */    0xCF, 0xA0, 0x20, 0x60, 0x3C, 0x3F, 0x78, 0xBC, 
                /* 02B0 */    0x9E, 0xAD, 0xA7, 0x05, 0xDE, 0x11, 0xFB, 0xFC, 
                /* 02B8 */    0x01, 0x9C, 0xC3, 0x1F, 0x5E, 0x50, 0x71, 0x87, 
                /* 02C0 */    0x44, 0x41, 0x7C, 0x36, 0x70, 0x94, 0xF1, 0xA2, 
                /* 02C8 */    0x67, 0xE2, 0xC3, 0x90, 0x8F, 0x0B, 0x4F, 0x37, 
                /* 02D0 */    0x98, 0xC3, 0x07, 0xB8, 0x47, 0xE2, 0xC3, 0x07, 
                /* 02D8 */    0xF0, 0xF8, 0xFF, 0x1F, 0x3E, 0x80, 0x9F, 0x44, 
                /* 02E0 */    0x8B, 0x5A, 0x85, 0x1E, 0x3E, 0xC0, 0x15, 0xE4, 
                /* 02E8 */    0x84, 0x84, 0x96, 0x73, 0xF8, 0x40, 0x4E, 0x24, 
                /* 02F0 */    0x4C, 0x74, 0x9F, 0x91, 0x5E, 0x3C, 0x2C, 0xE1, 
                /* 02F8 */    0xE0, 0x81, 0x0A, 0x4F, 0xA2, 0xF8, 0xA7, 0x02, 
                /* 0300 */    0x54, 0xE0, 0x53, 0x01, 0x05, 0x31, 0xA0, 0x0F, 
                /* 0308 */    0x15, 0x70, 0x66, 0xF0, 0xEC, 0x85, 0x99, 0x07, 
                /* 0310 */    0x8C, 0x33, 0x12, 0x60, 0xEB, 0x50, 0x01, 0xDE, 
                /* 0318 */    0xFF, 0xFF, 0xA1, 0x02, 0x38, 0x1C, 0x90, 0x00, 
                /* 0320 */    0x59, 0x12, 0x2F, 0x48, 0x0F, 0x15, 0xE0, 0x3A, 
                /* 0328 */    0x70, 0xFA, 0x50, 0xC1, 0x0F, 0x9A, 0x16, 0x05, 
                /* 0330 */    0xA4, 0x23, 0x9E, 0x0F, 0x15, 0x30, 0x2E, 0x42, 
                /* 0338 */    0x86, 0x7F, 0xAD, 0x3B, 0x96, 0xE7, 0x30, 0x72, 
                /* 0340 */    0xAE, 0x40, 0xC7, 0x3E, 0x18, 0xA0, 0x82, 0x8E, 
                /* 0348 */    0x9E, 0x82, 0x18, 0xD0, 0x29, 0x0E, 0x06, 0x68, 
                /* 0350 */    0x1D, 0xE7, 0x0A, 0xD4, 0x31, 0x0E, 0xF8, 0xFD, 
                /* 0358 */    0xFF, 0xCF, 0x14, 0xC0, 0x49, 0xC4, 0xD1, 0x0A, 
                /* 0360 */    0x35, 0x5C, 0x8F, 0xD5, 0x20, 0x1E, 0xAB, 0x8F, 
                /* 0368 */    0xA1, 0x1E, 0x2B, 0xEE, 0x1B, 0xE0, 0x23, 0x00, 
                /* 0370 */    0xFE, 0xE8, 0x84, 0x03, 0x7B, 0xAE, 0x00, 0x4C, 
                /* 0378 */    0x7B, 0x3C, 0x57, 0x80, 0x4E, 0xDA, 0xD9, 0x07, 
                /* 0380 */    0x1D, 0x70, 0xAD, 0x3A, 0x89, 0xE1, 0xCF, 0x71, 
                /* 0388 */    0x8C, 0x60, 0xA8, 0xC3, 0x1B, 0x85, 0x70, 0x1C, 
                /* 0390 */    0x0A, 0x85, 0x39, 0x19, 0xD0, 0xFF, 0xFF, 0x11, 
                /* 0398 */    0x96, 0xC0, 0x51, 0x10, 0x0F, 0xCD, 0x61, 0xCE, 
                /* 03A0 */    0x70, 0xA0, 0x39, 0x16, 0xC0, 0xBB, 0x55, 0xB0, 
                /* 03A8 */    0x63, 0x01, 0x6C, 0x02, 0x1F, 0x0B, 0xC0, 0x17, 
                /* 03B0 */    0x67, 0x58, 0xE8, 0xD1, 0xFA, 0xFE, 0x87, 0xBB, 
                /* 03B8 */    0x3F, 0x44, 0x79, 0x29, 0xF6, 0x21, 0x07, 0xEE, 
                /* 03C0 */    0xB8, 0xC0, 0x71, 0x7A, 0x00, 0x5C, 0x1D, 0xC4, 
                /* 03C8 */    0xE4, 0xF4, 0xF4, 0x00, 0xAE, 0x24, 0xA7, 0x07, 
                /* 03D0 */    0xD4, 0x80, 0xFD, 0xFF, 0xD7, 0x03, 0xA4, 0x73, 
                /* 03D8 */    0x02, 0xF6, 0xA2, 0xCD, 0x20, 0x4E, 0xF4, 0x79, 
                /* 03E0 */    0xC4, 0x0A, 0x8E, 0x38, 0xA8, 0xEC, 0x24, 0x4A, 
                /* 03E8 */    0x7E, 0xC4, 0x41, 0x65, 0x1D, 0x3B, 0x05, 0x31, 
                /* 03F0 */    0xA0, 0x4F, 0x94, 0x80, 0x8F, 0x3B, 0x0E, 0xB0, 
                /* 03F8 */    0xD8, 0xA8, 0x27, 0xCB, 0x23, 0x4F, 0x96, 0x82, 
                /* 0400 */    0x78, 0xB2, 0xBE, 0x54, 0x00, 0x87, 0x1B, 0x0E, 
                /* 0408 */    0xB0, 0xFF, 0xFF, 0x5F, 0x2A, 0x80, 0x92, 0x43, 
                /* 0410 */    0xA9, 0x97, 0x0A, 0x90, 0xC9, 0xBB, 0xE1, 0xA0, 
                /* 0418 */    0x43, 0xAE, 0x55, 0xF7, 0x3A, 0x76, 0x6C, 0xF5, 
                /* 0420 */    0xB8, 0x7D, 0x93, 0xC6, 0x04, 0xBB, 0xE1, 0xA0, 
                /* 0428 */    0x22, 0x51, 0x28, 0xD0, 0xB9, 0x00, 0x15, 0x01, 
                /* 0430 */    0x8E, 0x82, 0x78, 0x68, 0x3E, 0x17, 0x58, 0xC9, 
                /* 0438 */    0xB9, 0x00, 0xED, 0xFD, 0x42, 0x41, 0x06, 0xE7, 
                /* 0440 */    0x7B, 0x81, 0x61, 0x8A, 0x1F, 0x8A, 0xEE, 0x3D, 
                /* 0448 */    0x3E, 0x17, 0x80, 0xFB, 0x8A, 0x03, 0x2E, 0x63, 
                /* 0450 */    0x02, 0xB4, 0x41, 0x92, 0x7B, 0xB8, 0xC7, 0x85, 
                /* 0458 */    0x1B, 0x87, 0x47, 0x75, 0x4C, 0x31, 0x9F, 0xE3, 
                /* 0460 */    0x82, 0x3C, 0xC7, 0x79, 0x5E, 0xB8, 0xF3, 0x03, 
                /* 0468 */    0x70, 0xFB, 0xFF, 0x0F, 0x0C, 0xD6, 0x85, 0x0B, 
                /* 0470 */    0x88, 0x0B, 0x35, 0x29, 0xF1, 0xFC, 0x00, 0xAE, 
                /* 0478 */    0x5B, 0xB7, 0xEF, 0x85, 0x38, 0x29, 0x77, 0x57, 
                /* 0480 */    0x14, 0xC6, 0x2B, 0x49, 0x0C, 0xDF, 0x53, 0x8D, 
                /* 0488 */    0x6D, 0x98, 0x03, 0x38, 0x15, 0xE3, 0x24, 0x18, 
                /* 0490 */    0xFC, 0xEC, 0x40, 0xC7, 0xE5, 0xC8, 0x24, 0xBA, 
                /* 0498 */    0xED, 0xFB, 0x08, 0xC1, 0x63, 0x8E, 0x9E, 0x82, 
                /* 04A0 */    0x18, 0xD0, 0x19, 0x4E, 0x2A, 0x68, 0x15, 0x20, 
                /* 04A8 */    0x9A, 0x02, 0xE6, 0xE6, 0x0A, 0xF8, 0xFB, 0xFF, 
                /* 04B0 */    0xDF, 0x5C, 0x01, 0x56, 0xB8, 0x54, 0xA8, 0x51, 
                /* 04B8 */    0xEA, 0x91, 0x02, 0x5C, 0x77, 0x40, 0xDF, 0xC2, 
                /* 04C0 */    0x70, 0x92, 0x80, 0x74, 0x65, 0x3D, 0x8D, 0x07, 
                /* 04C8 */    0x00, 0x5F, 0x29, 0x60, 0x5C, 0x3C, 0xD9, 0x11, 
                /* 04D0 */    0x87, 0xDF, 0xAE, 0x7D, 0x2C, 0x00, 0xE6, 0xFF, 
                /* 04D8 */    0xFF, 0x2B, 0x21, 0x58, 0x8F, 0x05, 0xC0, 0x5B, 
                /* 04E0 */    0xA4, 0x4B, 0x8B, 0x66, 0x8F, 0x05, 0xE0, 0x12, 
                /* 04E8 */    0xBF, 0x0A, 0x7A, 0x50, 0xB1, 0x5C, 0x18, 0x94, 
                /* 04F0 */    0x84, 0xB1, 0x43, 0x19, 0xCD, 0xC1, 0x1C, 0x43, 
                /* 04F8 */    0x70, 0x76, 0x86, 0x31, 0x1C, 0x1F, 0xA8, 0xA7, 
                /* 0500 */    0xFE, 0x58, 0x7B, 0x1A, 0xAF, 0x68, 0xBE, 0xE2, 
                /* 0508 */    0xF9, 0x3E, 0x4A, 0x87, 0x88, 0xBA, 0xEA, 0x79, 
                /* 0510 */    0xAC, 0x6F, 0x05, 0xA7, 0xF6, 0xAC, 0xE7, 0x6B, 
                /* 0518 */    0x8B, 0x61, 0x12, 0x78, 0x88, 0x0C, 0x8D, 0x13, 
                /* 0520 */    0xBC, 0x23, 0x19, 0x9A, 0xCB, 0x80, 0xD0, 0x5D, 
                /* 0528 */    0xE9, 0x35, 0xC0, 0x73, 0x33, 0x41, 0xF7, 0x43, 
                /* 0530 */    0x97, 0x42, 0x04, 0x9D, 0x00, 0xDE, 0x09, 0x6A, 
                /* 0538 */    0x14, 0xE0, 0xED, 0x2A, 0x20, 0x5B, 0x02, 0xC4, 
                /* 0540 */    0x8D, 0x5E, 0x58, 0x6F, 0x45, 0x51, 0x42, 0x44, 
                /* 0548 */    0x08, 0x1A, 0xC5, 0x78, 0x11, 0x42, 0x85, 0x88, 
                /* 0550 */    0x12, 0xB5, 0x39, 0x10, 0x5D, 0x8E, 0xA2, 0x06, 
                /* 0558 */    0x89, 0x16, 0xCC, 0x08, 0xCC, 0xFE, 0x20, 0x88, 
                /* 0560 */    0xF4, 0x67, 0x80, 0x2E, 0x33, 0xBE, 0x0C, 0x7B, 
                /* 0568 */    0x34, 0xFC, 0x2C, 0xC5, 0x87, 0x7A, 0x8E, 0x8F, 
                /* 0570 */    0x8A, 0xEC, 0xFF, 0x0F, 0xF2, 0x5A, 0x68, 0x9D, 
                /* 0578 */    0xE3, 0x24, 0x87, 0x1C, 0x83, 0xEB, 0x0C, 0x01, 
                /* 0580 */    0xCD, 0x35, 0xA0, 0x8E, 0xFD, 0x1E, 0xAF, 0xBF, 
                /* 0588 */    0x1A, 0x86, 0xE3, 0x43, 0xF4, 0xA1, 0xC2, 0x13, 
                /* 0590 */    0x38, 0x44, 0x06, 0xE8, 0x43, 0x04, 0xFC, 0xF1, 
                /* 0598 */    0x18, 0xFA, 0x29, 0xC2, 0x13, 0x7E, 0xA1, 0x25, 
                /* 05A0 */    0x83, 0x40, 0x9D, 0x34, 0xF8, 0x48, 0x5F, 0xB8, 
                /* 05A8 */    0xD9, 0xED, 0xC3, 0x04, 0x16, 0x7B, 0x76, 0xA0, 
                /* 05B0 */    0xE3, 0x01, 0xBF, 0xE2, 0x33, 0x81, 0xAE, 0x71, 
                /* 05B8 */    0xC6, 0xF6, 0xC9, 0xC8, 0x11, 0x0E, 0x22, 0x50, 
                /* 05C0 */    0x40, 0x9F, 0x4D, 0xF8, 0xCD, 0x83, 0x1D, 0x2D, 
                /* 05C8 */    0xB8, 0xA8, 0xA3, 0x05, 0xEA, 0xB4, 0xE0, 0x83, 
                /* 05D0 */    0x02, 0x43, 0x7C, 0xF8, 0x34, 0xC4, 0x93, 0x05, 
                /* 05D8 */    0x3B, 0xEA, 0x80, 0x53, 0xDE, 0x21, 0x04, 0x14, 
                /* 05E0 */    0x20, 0x3E, 0x59, 0xB0, 0x79, 0x61, 0x08, 0x2C, 
                /* 05E8 */    0x12, 0x1E, 0x75, 0xE8, 0x30, 0x3C, 0x3F, 0x25, 
                /* 05F0 */    0x3C, 0x8E, 0x30, 0xEC, 0x37, 0x12, 0x4F, 0xE1, 
                /* 05F8 */    0x70, 0x7C, 0xA4, 0x30, 0x42, 0xF0, 0x72, 0x4F, 
                /* 0600 */    0x16, 0xE4, 0x62, 0x73, 0x74, 0xFF, 0xFF, 0x27, 
                /* 0608 */    0x18, 0xCC, 0x50, 0x3D, 0x04, 0x7E, 0x5E, 0xF0, 
                /* 0610 */    0x10, 0xF8, 0x00, 0x5A, 0x9D, 0x1D, 0x39, 0x9F, 
                /* 0618 */    0x9C, 0x13, 0x6E, 0xBC, 0x7C, 0x4C, 0xD8, 0x01, 
                /* 0620 */    0xF0, 0xE0, 0x4B, 0xF2, 0x59, 0x84, 0xC6, 0x58, 
                /* 0628 */    0xBE, 0x8F, 0x23, 0x80, 0x9C, 0x49, 0x3C, 0x81, 
                /* 0630 */    0x44, 0x78, 0x19, 0x09, 0x12, 0xE2, 0x58, 0x5E, 
                /* 0638 */    0x43, 0x0C, 0x12, 0xE3, 0xED, 0xC8, 0xC7, 0x11, 
                /* 0640 */    0x0E, 0xF3, 0x4C, 0x62, 0xB8, 0x87, 0x83, 0x57, 
                /* 0648 */    0x91, 0x17, 0x12, 0xC3, 0x3C, 0x8A, 0xF8, 0x7C, 
                /* 0650 */    0x10, 0xC3, 0x98, 0xA1, 0xA2, 0x9D, 0x80, 0x8F, 
                /* 0658 */    0x23, 0xEC, 0x58, 0xE9, 0xA1, 0xFA, 0x38, 0x02, 
                /* 0660 */    0x58, 0xFA, 0xFF, 0x1F, 0x47, 0x80, 0xF9, 0x11, 
                /* 0668 */    0x01, 0x77, 0xDA, 0x80, 0x7B, 0x9F, 0x08, 0xF1, 
                /* 0670 */    0xA4, 0xF1, 0x92, 0xF0, 0xAC, 0x01, 0x5C, 0x84, 
                /* 0678 */    0x6A, 0x39, 0xF7, 0xB0, 0x34, 0x8F, 0x01, 0x1D, 
                /* 0680 */    0xCF, 0x38, 0x87, 0x35, 0x01, 0x69, 0x98, 0xFC, 
                /* 0688 */    0xCA, 0xED, 0x73, 0xC1, 0xD9, 0x3D, 0x72, 0x1B, 
                /* 0690 */    0x26, 0xC8, 0x13, 0xC1, 0x6B, 0x94, 0xC1, 0x05, 
                /* 0698 */    0xA9, 0xF3, 0x23, 0x4F, 0x4F, 0x21, 0xDD, 0x27, 
                /* 06A0 */    0x5A, 0x94, 0xD2, 0x63, 0x1A, 0x05, 0xF1, 0x19, 
                /* 06A8 */    0xC1, 0x21, 0xCE, 0x31, 0xE8, 0xE1, 0x7B, 0x0E, 
                /* 06B0 */    0x67, 0x74, 0x20, 0xEF, 0x01, 0xEC, 0xFE, 0x08, 
                /* 06B8 */    0x3C, 0x4F, 0x3A, 0x78, 0x74, 0xDF, 0x14, 0xCE, 
                /* 06C0 */    0xF3, 0x4C, 0xFF, 0xFF, 0x47, 0x04, 0xDE, 0x99, 
                /* 06C8 */    0xFA, 0x82, 0x09, 0x9C, 0x43, 0xDC, 0x05, 0x50, 
                /* 06D0 */    0xB2, 0xEF, 0x02, 0x14, 0xC4, 0x13, 0xF3, 0xD5, 
                /* 06D8 */    0x0F, 0x0E, 0xFE, 0xAB, 0x1F, 0x30, 0xB9, 0x2C, 
                /* 06E0 */    0xF8, 0x9A, 0x04, 0xBE, 0x53, 0x3F, 0xFE, 0xC2, 
                /* 06E8 */    0xE0, 0xDB, 0xC0, 0xC3, 0x13, 0x1B, 0x14, 0xF8, 
                /* 06F0 */    0xA1, 0x7C, 0x3D, 0x04, 0xFF, 0xFF, 0xFF, 0x7A, 
                /* 06F8 */    0x08, 0x3C, 0x95, 0x3A, 0xB5, 0xA9, 0xF0, 0x7A, 
                /* 0700 */    0x08, 0xAE, 0x28, 0xD7, 0x12, 0xD4, 0xAD, 0xC9, 
                /* 0708 */    0x82, 0x80, 0x74, 0x3F, 0x7F, 0xBE, 0x31, 0xA6, 
                /* 0710 */    0xCF, 0x25, 0xF0, 0xEE, 0xA0, 0x5A, 0x95, 0xEE, 
                /* 0718 */    0x25, 0x3C, 0x38, 0x85, 0xA2, 0x1F, 0x1E, 0x50, 
                /* 0720 */    0x61, 0x0F, 0x0F, 0x14, 0xC4, 0x17, 0x23, 0xDF, 
                /* 0728 */    0x4B, 0x00, 0x0E, 0xFC, 0xFF, 0x47, 0xC4, 0x6F, 
                /* 0730 */    0xDA, 0x70, 0x8E, 0x16, 0x98, 0x19, 0x81, 0xF5, 
                /* 0738 */    0x44, 0xE0, 0x9B, 0x36, 0xE0, 0xE8, 0xE4, 0x02, 
                /* 0740 */    0x5C, 0x4E, 0x25, 0x80, 0x2B, 0xAF, 0xA7, 0x12, 
                /* 0748 */    0xFD, 0xFF, 0x4F, 0x25, 0xE0, 0xBA, 0x7B, 0x81, 
                /* 0750 */    0xE9, 0x6A, 0x72, 0x26, 0xD1, 0x82, 0xFB, 0xEE, 
                /* 0758 */    0x05, 0xF0, 0xF3, 0xFF, 0x7F, 0xF7, 0x02, 0x88, 
                /* 0760 */    0xE9, 0xF5, 0xEE, 0x05, 0xBC, 0xCE, 0x25, 0x98, 
                /* 0768 */    0xBB, 0x97, 0xFF, 0xFF, 0x77, 0x2F, 0x80, 0xFF, 
                /* 0770 */    0xFF, 0xFF, 0xBB, 0x17, 0x40, 0x96, 0x53, 0x09, 
                /* 0778 */    0xC8, 0xB2, 0x9D, 0x4A, 0xD0, 0x0A, 0xCF, 0xD1, 
                /* 0780 */    0x50, 0x27, 0x70, 0x28, 0x4F, 0x18, 0xAF, 0xEA, 
                /* 0788 */    0x09, 0xAC, 0xE7, 0xF2, 0x85, 0x52, 0x02, 0xA3, 
                /* 0790 */    0xCB, 0x17, 0xB0, 0xFB, 0xFF, 0x5F, 0xBE, 0x00, 
                /* 0798 */    0x3E, 0x04, 0xBA, 0x0B, 0xA0, 0x22, 0xDC, 0x05, 
                /* 07A0 */    0x28, 0x88, 0x2F, 0x5F, 0x80, 0x97, 0x50, 0x10, 
                /* 07A8 */    0x32, 0x72, 0x93, 0xA0, 0x97, 0x2F, 0x38, 0x17, 
                /* 07B0 */    0x07, 0xDF, 0x8F, 0x3C, 0x28, 0x78, 0xFF, 0xFF, 
                /* 07B8 */    0x41, 0xC1, 0x19, 0xCC, 0x79, 0x17, 0x7B, 0x52, 
                /* 07C0 */    0xA4, 0xD7, 0x13, 0xB8, 0x77, 0x0E, 0x8F, 0x0D, 
                /* 07C8 */    0x1C, 0xE2, 0xAE, 0x60, 0xC0, 0xDE, 0xE5, 0xED, 
                /* 07D0 */    0x04, 0x5C, 0xDA, 0xD6, 0xAE, 0xDB, 0x09, 0x2E, 
                /* 07D8 */    0xE1, 0x71, 0x1A, 0xF2, 0xF1, 0x04, 0x93, 0xE7, 
                /* 07E0 */    0x76, 0x82, 0x4A, 0x02, 0xA3, 0x2C, 0x24, 0x3A, 
                /* 07E8 */    0x42, 0x70, 0xF5, 0x37, 0x31, 0x0A, 0x62, 0x0B, 
                /* 07F0 */    0xB7, 0x13, 0x40, 0xC7, 0xFF, 0xFF, 0x76, 0x02, 
                /* 07F8 */    0xFC, 0xC7, 0x0C, 0x67, 0x44, 0xEF, 0x15, 0x86, 
                /* 0800 */    0xF4, 0x19, 0x0C, 0x98, 0x06, 0x3A, 0x82, 0xA0, 
                /* 0808 */    0x2F, 0x69, 0xD8, 0x04, 0x37, 0x10, 0x3A, 0x23, 
                /* 0810 */    0x78, 0x17, 0x10, 0xB8, 0x13, 0x83, 0x75, 0x00, 
                /* 0818 */    0x01, 0xDF, 0x59, 0x0D, 0x78, 0xFD, 0xFF, 0xCF, 
                /* 0820 */    0x6A, 0xC0, 0xF4, 0x00, 0xE0, 0xB3, 0x1A, 0xA0, 
                /* 0828 */    0xEA, 0xF6, 0x02, 0x32, 0x85, 0x36, 0x7D, 0x6A, 
                /* 0830 */    0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D, 0x32, 0x0D, 
                /* 0838 */    0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0x31, 0xBB, 0x60, 
                /* 0840 */    0x8A, 0x71, 0x7B, 0xA2, 0x22, 0x96, 0x23, 0x10, 
                /* 0848 */    0xEB, 0xA6, 0x90, 0x91, 0xCB, 0x86, 0x41, 0x04, 
                /* 0850 */    0x64, 0xD9, 0x8B, 0x16, 0x10, 0x01, 0x11, 0x90, 
                /* 0858 */    0x85, 0xBC, 0x1B, 0x04, 0x64, 0x55, 0x20, 0x02, 
                /* 0860 */    0x72, 0x2A, 0x20, 0x1A, 0x11, 0x88, 0xC6, 0xF1, 
                /* 0868 */    0x00, 0xC4, 0xC2, 0x81, 0x08, 0xC8, 0xEA, 0x4C, 
                /* 0870 */    0x00, 0x31, 0xA9, 0x20, 0xBA, 0x43, 0x90, 0xCF, 
                /* 0878 */    0x85, 0x80, 0x2C, 0x12, 0x44, 0x40, 0xCE, 0xB8, 
                /* 0880 */    0x3E, 0x01, 0x39, 0x30, 0x88, 0x80, 0x1C, 0xF2, 
                /* 0888 */    0x1B, 0x22, 0x20, 0x47, 0x06, 0x11, 0x90, 0x05, 
                /* 0890 */    0xEB, 0x00, 0xF2, 0xFF, 0x9F, 0xA0, 0x7C, 0x10, 
                /* 0898 */    0x01, 0x39, 0x3E, 0x10, 0x15, 0xE3, 0xE3, 0xAE, 
                /* 08A0 */    0x45, 0x1F, 0x03, 0x02, 0x72, 0x2E, 0x10, 0x01, 
                /* 08A8 */    0x39, 0x07, 0x8D, 0x80, 0x9C, 0x8A, 0x42, 0x40, 
                /* 08B0 */    0x56, 0xF5, 0x76, 0x10, 0x90, 0x35, 0x82, 0x08, 
                /* 08B8 */    0xC8, 0x29, 0x81, 0x68, 0x66, 0x20, 0x2A, 0xD8, 
                /* 08C0 */    0x0A, 0x10, 0x53, 0x0F, 0x22, 0x20, 0x2B, 0xD5, 
                /* 08C8 */    0x02, 0xC4, 0x74, 0x83, 0x08, 0xC8, 0xA9, 0xBD, 
                /* 08D0 */    0x00, 0x31, 0x0D, 0xEF, 0x00, 0x01, 0x59, 0xEB, 
                /* 08D8 */    0xD3, 0x43, 0x20, 0x4E, 0x0A, 0x42, 0xB5, 0xBA, 
                /* 08E0 */    0x01, 0x61, 0x39, 0xED, 0x80, 0x30, 0x95, 0x7A, 
                /* 08E8 */    0x40, 0x58, 0x1E, 0x3F, 0x43, 0xA6, 0x20, 0x02, 
                /* 08F0 */    0xB2, 0xA2, 0x97, 0x88, 0x80, 0x2C, 0x0F, 0x44, 
                /* 08F8 */    0x40, 0x96, 0x62, 0x08, 0x88, 0x09, 0x03, 0x11, 
                /* 0900 */    0x90, 0x23, 0x01, 0xD1, 0x80, 0x40, 0x54, 0x9E, 
                /* 0908 */    0x23, 0x20, 0xA6, 0x15, 0x44, 0x40, 0x0E, 0x08, 
                /* 0910 */    0x44, 0xD3, 0x02, 0x51, 0x8D, 0xBF, 0x25, 0x01, 
                /* 0918 */    0x59, 0x30, 0x88, 0x80, 0x2C, 0xCE, 0xD2, 0x51, 
                /* 0920 */    0x80, 0x82, 0x08, 0xC8, 0x31, 0x35, 0x0D, 0x95, 
                /* 0928 */    0x82, 0x08, 0xC8, 0x42, 0x3D, 0x01, 0x31, 0xD5, 
                /* 0930 */    0x20, 0x02, 0xB2, 0x42, 0x51, 0x40, 0x4C, 0x2F, 
                /* 0938 */    0x88, 0x06, 0x49, 0x80, 0x68, 0x6E, 0x20, 0xAA, 
                /* 0940 */    0x5A, 0x15, 0x10, 0x8B, 0x00, 0x22, 0x20, 0xE7, 
                /* 0948 */    0x06, 0xA2, 0x22, 0x5C, 0x01, 0x31, 0xE9, 0x20, 
                /* 0950 */    0x02, 0x72, 0x0E, 0x20, 0xAA, 0xF9, 0x49, 0x21, 
                /* 0958 */    0x20, 0x27, 0x00, 0x11, 0x90, 0xF3, 0xDB, 0x3A, 
                /* 0960 */    0x1A, 0xD0, 0x87, 0x8E, 0x80, 0x9C, 0x00, 0x44, 
                /* 0968 */    0x40, 0x8E, 0x03, 0x44, 0xA5, 0xFB, 0x02, 0x62, 
                /* 0970 */    0x41, 0x40, 0x04, 0x64, 0x41, 0xAF, 0x11, 0x0D, 
                /* 0978 */    0x9C, 0x80, 0x08, 0xC8, 0xD1, 0x8C, 0x01, 0xB1, 
                /* 0980 */    0x9C, 0x20, 0x02, 0xFA, 0xFF, 0x1F, 0xA8, 0xBE, 
                /* 0988 */    0x22, 0x02, 0xB2, 0x52, 0x10, 0x0D, 0x9A, 0x00, 
                /* 0990 */    0xD1, 0xB4, 0x40, 0x54, 0xF1, 0x9B, 0xE4, 0xD1, 
                /* 0998 */    0x81, 0x81, 0xE8, 0x88, 0x40, 0xA4, 0x1D, 0x11, 
                /* 09A0 */    0x28, 0x88, 0x80, 0xFC, 0xFF, 0x07
            })
            Method (SPEC, 1, Serialized)
            {
                Return (AMWV)
            }

            Method (DEVP, 1, Serialized)
            {
                Name (_T_1, Zero)
                Name (_T_0, Zero)
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, PARA)
                If (LEqual (PARA, One))
                {
                    While (One)
                    {
                        Store (DVID, _T_0)
                        If (LEqual (_T_0, 0x00010011))
                        {
                            Or (\_SB.DSAF, One, \_SB.DSAF)
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x00010013))
                            {
                                Or (\_SB.DSAF, 0x02, \_SB.DSAF)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x00010023))
                                {
                                    Or (\_SB.DSAF, 0x04, \_SB.DSAF)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x00060013))
                                    {
                                        Or (\_SB.DSAF, 0x08, \_SB.DSAF)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x00060015))
                                        {
                                            Or (\_SB.DSAF, 0x10, \_SB.DSAF)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x00010015))
                                            {
                                                Or (\_SB.DSAF, 0x20, \_SB.DSAF)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x00090011))
                                                {
                                                    Or (\_SB.DSAF, 0x40, \_SB.DSAF)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x00070011))
                                                    {
                                                        Or (\_SB.DSAF, 0x80, \_SB.DSAF)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_0, 0x00080013))
                                                        {
                                                            Or (\_SB.DSAF, 0x0100, \_SB.DSAF)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_0, 0x00010019))
                                                            {
                                                                Or (\_SB.DSAF, 0x0200, \_SB.DSAF)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_0, 0x00010017))
                                                                {
                                                                    Or (\_SB.DSAF, 0x0400, \_SB.DSAF)
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (_T_0, 0x00050011))
                                                                    {
                                                                        Or (\_SB.DSAF, 0x0800, \_SB.DSAF)
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LEqual (_T_0, 0x00050012))
                                                                        {
                                                                            Or (\_SB.DSAF, 0x1000, \_SB.DSAF)
                                                                        }
                                                                        Else
                                                                        {
                                                                            If (LEqual (_T_0, 0x00060017))
                                                                            {
                                                                                Or (\_SB.DSAF, 0x2000, \_SB.DSAF)
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LEqual (_T_0, 0x00080021))
                                                                                {
                                                                                    Or (\_SB.DSAF, 0x4000, \_SB.DSAF)
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If (LEqual (_T_0, 0x00100011))
                                                                                    {
                                                                                        Or (\_SB.DSAF, 0x8000, \_SB.DSAF)
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If (LEqual (_T_0, 0x00050001))
                                                                                        {
                                                                                            Or (\_SB.DSAF, 0x00010000, \_SB.DSAF)
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (LEqual (_T_0, 0x00120000))
                                                                                            {
                                                                                                Or (\_SB.DSAF, 0x00020000, \_SB.DSAF)
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If (LEqual (_T_0, 0x00120021))
                                                                                                {
                                                                                                    Or (\_SB.DSAF, 0x00040000, \_SB.DSAF)
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    If (LEqual (_T_0, 0x00120011))
                                                                                                    {
                                                                                                        Or (\_SB.DSAF, 0x00080000, \_SB.DSAF)
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        If (LEqual (_T_0, 0x00120023))
                                                                                                        {
                                                                                                            Or (\_SB.DSAF, 0x00100000, \_SB.DSAF)
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            Return (Zero)
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Break
                    }
                }
                Else
                {
                    If (LEqual (PARA, Zero))
                    {
                        While (One)
                        {
                            Store (DVID, _T_1)
                            If (LEqual (_T_1, 0x00010011))
                            {
                                And (\_SB.DSAF, 0xFFFFFFFFFFFFFFFE, \_SB.DSAF)
                            }
                            Else
                            {
                                If (LEqual (_T_1, 0x00010013))
                                {
                                    And (\_SB.DSAF, 0xFFFFFFFFFFFFFFFD, \_SB.DSAF)
                                }
                                Else
                                {
                                    If (LEqual (_T_1, 0x00010023))
                                    {
                                        And (\_SB.DSAF, 0xFFFFFFFFFFFFFFFB, \_SB.DSAF)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_1, 0x00060013))
                                        {
                                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFF7, \_SB.DSAF)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_1, 0x00060015))
                                            {
                                                And (\_SB.DSAF, 0xFFFFFFFFFFFFFFEF, \_SB.DSAF)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_1, 0x00010015))
                                                {
                                                    And (\_SB.DSAF, 0xFFFFFFFFFFFFFFDF, \_SB.DSAF)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_1, 0x00090011))
                                                    {
                                                        And (\_SB.DSAF, 0xFFFFFFFFFFFFFFBF, \_SB.DSAF)
                                                    }
                                                    Else
                                                    {
                                                        If (LEqual (_T_1, 0x00070011))
                                                        {
                                                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFF7F, \_SB.DSAF)
                                                        }
                                                        Else
                                                        {
                                                            If (LEqual (_T_1, 0x00080013))
                                                            {
                                                                And (\_SB.DSAF, 0xFFFFFFFFFFFFFEFF, \_SB.DSAF)
                                                            }
                                                            Else
                                                            {
                                                                If (LEqual (_T_1, 0x00010019))
                                                                {
                                                                    And (\_SB.DSAF, 0xFFFFFFFFFFFFFDFF, \_SB.DSAF)
                                                                }
                                                                Else
                                                                {
                                                                    If (LEqual (_T_1, 0x00010017))
                                                                    {
                                                                        And (\_SB.DSAF, 0xFFFFFFFFFFFFFBFF, \_SB.DSAF)
                                                                    }
                                                                    Else
                                                                    {
                                                                        If (LEqual (_T_1, 0x00050011))
                                                                        {
                                                                            And (\_SB.DSAF, 0xFFFFFFFFFFFFF7FF, \_SB.DSAF)
                                                                        }
                                                                        Else
                                                                        {
                                                                            If (LEqual (_T_1, 0x00050012))
                                                                            {
                                                                                And (\_SB.DSAF, 0xFFFFFFFFFFFFEFFF, \_SB.DSAF)
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (LEqual (_T_1, 0x00060017))
                                                                                {
                                                                                    And (\_SB.DSAF, 0xFFFFFFFFFFFFDFFF, \_SB.DSAF)
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If (LEqual (_T_1, 0x00080021))
                                                                                    {
                                                                                        And (\_SB.DSAF, 0xFFFFFFFFFFFFBFFF, \_SB.DSAF)
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If (LEqual (_T_1, 0x00100011))
                                                                                        {
                                                                                            And (\_SB.DSAF, 0xFFFFFFFFFFFF7FFF, \_SB.DSAF)
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (LEqual (_T_1, 0x00050001))
                                                                                            {
                                                                                                And (\_SB.DSAF, 0xFFFFFFFFFFFEFFFF, \_SB.DSAF)
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If (LEqual (_T_1, 0x00120000))
                                                                                                {
                                                                                                    And (\_SB.DSAF, 0xFFFFFFFFFFFDFFFF, \_SB.DSAF)
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    If (LEqual (_T_1, 0x00120021))
                                                                                                    {
                                                                                                        And (\_SB.DSAF, 0xFFFFFFFFFFFBFFFF, \_SB.DSAF)
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        If (LEqual (_T_1, 0x00120011))
                                                                                                        {
                                                                                                            And (\_SB.DSAF, 0xFFFFFFFFFFF7FFFF, \_SB.DSAF)
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            If (LEqual (_T_1, 0x00120023))
                                                                                                            {
                                                                                                                And (\_SB.DSAF, 0xFFFFFFFFFFEFFFFF, \_SB.DSAF)
                                                                                                            }
                                                                                                            Else
                                                                                                            {
                                                                                                                Return (Zero)
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Break
                        }
                    }
                }

                Return (One)
            }

            Method (SDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (GDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (DEVS, 1, Serialized)
            {
                Name (_T_0, Zero)
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                While (One)
                {
                    Store (DVID, _T_0)
                    If (LEqual (_T_0, Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (Zero)
                    }

                    Break
                }
            }

            Method (DSTS, 1, Serialized)
            {
                Name (_T_0, Zero)
                CreateDWordField (Arg0, Zero, DVID)
                While (One)
                {
                    Store (DVID, _T_0)
                    If (LEqual (_T_0, 0xA0000000))
                    {
                        Store (One, Local0)
                    }
                    Else
                    {
                        If (LEqual (_T_0, Zero))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Break
                }

                And (Local0, 0x0007FFFF, Local0)
                Return (Local0)
            }

            Method (GPID, 0, Serialized)
            {
                Return (Zero)
            }

            Method (KBFT, 1, Serialized)
            {
                Return (Zero)
            }

            Method (HKEY, 0, Serialized)
            {
                Return (Zero)
            }

            Method (CFVS, 1, Serialized)
            {
            }

            Method (CFVG, 0, Serialized)
            {
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (FWHD)
        {
            Name (_HID, EisaId ("INT0800"))
            Name (_CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
            })
        }

        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103"))
            Name (_UID, Zero)
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, 0x04, HPT0)
                    Store (HPTB, HPT0)
                }

                Return (BUF0)
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000"))
            Name (_CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04"))
            Name (_CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (PCHV (), SPTH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02"))
            Name (_UID, 0x02)
            Name (_CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0xFFFF,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x1800,             // Range Minimum
                    0x1800,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (LDR2)
        {
            Name (_HID, EisaId ("PNP0C02"))
            Name (_UID, "LPC_DEV")
            Name (_CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0800,             // Range Minimum
                    0x0800,             // Range Maximum
                    0x01,               // Alignment
                    0x80,               // Length
                    )
            })
            Method (_STA, 0, NotSerialized)
            {
                If (LEqual (PCHV (), SPTH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00"))
            Name (_CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100"))
            Name (_CRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, EisaId ("INT3F0D"))
            Name (_CID, EisaId ("PNP0C02"))
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x1854,             // Range Minimum
                    0x1854,             // Range Maximum
                    0x04,               // Alignment
                    0x04,               // Length
                    )
            })
            Method (_STA, 0, Serialized)
            {
                Return (0x0F)
            }

            Method (_CRS, 0, Serialized)
            {
                Return (BUF0)
            }
        }
    }

    Device (ALSD)
    {
        Name (_HID, "ACPI0008")
        Method (_STA, 0, NotSerialized)
        {
            If (LEqual (ALSE, 0x02))
            {
                Return (0x0B)
            }

            Return (Zero)
        }

        Method (_ALI, 0, NotSerialized)
        {
            Return (Or (ShiftLeft (LHIH, 0x08), LLOW))
        }

        Name (_ALR, Package (0x05)
        {
            Package (0x02)
            {
                0x46, 
                Zero
            }, 

            Package (0x02)
            {
                0x49, 
                0x0A
            }, 

            Package (0x02)
            {
                0x55, 
                0x50
            }, 

            Package (0x02)
            {
                0x64, 
                0x012C
            }, 

            Package (0x02)
            {
                0x96, 
                0x03E8
            }
        })
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C"))
            Name (PBST, One)
            Method (_STA, 0, NotSerialized)
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (H_EC)
        {
            Name (_HID, EisaId ("PNP0C09"))
            Name (_UID, One)
            Method (_STA, 0, NotSerialized)
            {
                Store (0x03, ^^^GFX0.CLID)
                Return (Zero)
            }

            Name (B1CC, Zero)
            Name (B1ST, Zero)
            Name (B2CC, Zero)
            Name (B2ST, Zero)
            Name (CFAN, Zero)
            Name (CMDR, Zero)
            Name (DOCK, Zero)
            Name (EJET, Zero)
            Name (MCAP, Zero)
            Name (PLMX, Zero)
            Name (PECH, Zero)
            Name (PECL, Zero)
            Name (PENV, Zero)
            Name (PINV, Zero)
            Name (PPSH, Zero)
            Name (PPSL, Zero)
            Name (PSTP, Zero)
            Name (RPWR, Zero)
            Name (LIDS, Zero)
            Name (LSTE, Zero)
            Name (SLPC, Zero)
            Name (VPWR, Zero)
            Name (WTMS, Zero)
            Name (AWT2, Zero)
            Name (AWT1, Zero)
            Name (AWT0, Zero)
            Name (DLED, Zero)
            Name (IBT1, Zero)
            Name (ECAV, Zero)
            Name (SPT2, Zero)
            Name (PB10, Zero)
            Name (IWCW, Zero)
            Name (IWCR, Zero)
            Method (ECMD, 1, Serialized)
            {
                If (ECON)
                {
                    While (CMDR)
                    {
                        Stall (0x14)
                    }

                    Store (Arg0, CMDR)
                }
            }

            Method (ECRD, 1, Serialized)
            {
                Return (DerefOf (Arg0))
            }

            Method (ECWT, 2, Serialized)
            {
                Store (Arg0, Arg1)
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A"))
                Name (_UID, Zero)
                Method (_STA, 0, NotSerialized)
                {
                    Return (Zero)
                }
            }

            Scope (\)
            {
                Field (GNVS, AnyAcc, Lock, Preserve)
                {
                            Offset (0x1E), 
                    BNUM,   8, 
                            Offset (0x20), 
                    B1SC,   8, 
                            Offset (0x23), 
                    B1SS,   8
                }
            }

            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A"))
                Name (_UID, One)
                Method (_STA, 0, NotSerialized)
                {
                    Return (Zero)
                }
            }

            Scope (\)
            {
                Field (GNVS, AnyAcc, Lock, Preserve)
                {
                            Offset (0x21), 
                    B2SC,   8, 
                            Offset (0x24), 
                    B2SS,   8
                }
            }

            Device (BAT2)
            {
                Name (_HID, EisaId ("PNP0C0A"))
                Name (_UID, 0x02)
                Method (_STA, 0, NotSerialized)
                {
                    Return (Zero)
                }
            }
        }
    }

    Device (_SB.PCI0.DOCK)
    {
        Name (_HID, "ABCD0000")
        Name (_CID, EisaId ("PNP0C15"))
        Name (_UID, 0x02)
        Method (_STA, 0, NotSerialized)
        {
            Return (Zero)
        }
    }

    Scope (_SB)
    {
        Method (PWPR, 0, Serialized)
        {
        }

        Method (PWRR, 0, Serialized)
        {
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D"))
            Method (_STA, 0, NotSerialized)
            {
                Return (Zero)
            }
        }
    }

    OperationRegion (ABNV, SystemMemory, 0xFFFF0000, 0xAA55)
    Field (ABNV, AnyAcc, Lock, Preserve)
    {
        ABMA,   64, 
        ABMS,   8, 
        ABIA,   16, 
        ABIL,   16, 
        ABRA,   32, 
        ABRS,   16
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            Else
            {
                If (LEqual (TTDP, Zero))
                {
                    Return (0x310CD041)
                }
                Else
                {
                    Return ("MSFT0101")
                }
            }
        }

        Method (_STR, 0, NotSerialized)
        {
            If (LEqual (TTDP, Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                )
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Method (_CRS, 0, Serialized)
        {
            If (LEqual (AMDT, One))
            {
                CreateDWordField (CRST, 0x04, MTFB)
                CreateDWordField (CRST, 0x08, LTFB)
                Store (TPMB, MTFB)
                Store (0x1000, LTFB)
                CreateDWordField (CRST, 0x10, MTFC)
                CreateDWordField (CRST, 0x14, LTFC)
                Store (TPMC, MTFC)
                Store (0x1000, LTFC)
                Return (CRST)
            }
            Else
            {
                If (LEqual (DTPT, One))
                {
                    CreateDWordField (CRSD, 0x04, MTFE)
                    CreateDWordField (CRSD, 0x08, LTFE)
                    Store (0xFED40000, MTFE)
                    Store (0x0880, LTFE)
                    Return (CRSD)
                }
                Else
                {
                    If (LEqual (TTPF, One))
                    {
                        CreateDWordField (CRSI, 0x04, MTFD)
                        CreateDWordField (CRSI, 0x08, LTFD)
                        Store (0xFED40000, MTFD)
                        Store (0x5000, LTFD)
                        Return (CRSI)
                    }
                    Else
                    {
                        If (LEqual (TTPF, Zero))
                        {
                            CreateDWordField (CRSI, 0x04, MTFF)
                            Store (TPMM, MTFF)
                            Return (CRSI)
                        }
                    }
                }
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
                    Offset (0x04), 
            LCST,   32, 
                    Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
                    Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
                    Offset (0x04), 
            HERR,   32, 
                    Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)
        {
            If (LEqual (TTDP, Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            Else
            {
                If (LEqual (TTDP, One))
                {
                    If (TPMF)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }
        }

        Method (STRT, 3, Serialized)
        {
            Name (_T_0, Zero)
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                        Offset (0x04), 
                FERR,   32, 
                        Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            While (One)
            {
                Store (ToInteger (Arg1), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Return (Buffer (One)
                    {
                        0x03
                    })
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        Store (Zero, TIMR)
                        If (LEqual (AMDT, One))
                        {
                            While (LAnd (LEqual (BEGN, One), LLess (TIMR, 0x0200)))
                            {
                                If (LEqual (BEGN, One))
                                {
                                    Sleep (One)
                                    Increment (TIMR)
                                }
                            }

                            Return (Zero)
                        }
                        Else
                        {
                            If (LEqual (Or (And (HSTS, 0x02), And (HSTS, One
                                )), 0x03))
                            {
                                Store (One, HCMD)
                            }
                            Else
                            {
                                Store (One, FERR)
                                Store (Zero, BEGN)
                            }

                            Return (Zero)
                        }
                    }
                }

                Break
            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            Name (_T_0, Zero)
            While (One)
            {
                Store (ToInteger (Arg1), _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Return (Buffer (One)
                    {
                        0x03
                    })
                }
                Else
                {
                    If (LEqual (_T_0, One))
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                One, 
                                0x20
                            }
                        })
                        If (LEqual (_STA (), Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV)
                    }
                }

                Break
            }

            Return (Buffer (One)
            {
                0x00
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        Method (_DSM, 4, Serialized)
        {
            Name (_T_1, Zero)
            Name (_T_0, Zero)
            If (LEqual (Arg0, Buffer (0x10)
                    {
                        /* 0000 */    0xA6, 0xFA, 0xDD, 0x3D, 0x1B, 0x36, 0xB4, 0x4E, 
                        /* 0008 */    0xA4, 0x24, 0x8D, 0x10, 0x08, 0x9D, 0x16, 0x53
                    }))
            {
                While (One)
                {
                    Store (ToInteger (Arg2), _T_0)
                    If (LEqual (_T_0, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                            0xFF, 0x01
                        })
                    }
                    Else
                    {
                        If (LEqual (_T_0, One))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            If (LEqual (_T_0, 0x02))
                            {
                                ToInteger (DerefOf (Index (Arg3, Zero)), TMF2)
                                Store (OFST, TMF1)
                                Or (0x1200, TMF1, TMF1)
                                Store (TMF1, SMI)
                                Store (SMI, TMF1)
                                ShiftRight (TMF1, 0x08, TMF1)
                                If (LEqual (TMF1, 0xFF))
                                {
                                    Return (0x02)
                                }

                                ShiftLeft (TMF2, 0x08, TMF2)
                                Or (OFST, TMF2, TMF2)
                                Store (TMF2, SMI)
                                Store (SMI, TMF1)
                                ShiftRight (TMF1, 0x08, TMF1)
                                If (LEqual (TMF1, 0xFF))
                                {
                                    Return (0x02)
                                }

                                If (LEqual (TMF1, 0xFF))
                                {
                                    Return (One)
                                }

                                Return (Zero)
                            }
                            Else
                            {
                                If (LEqual (_T_0, 0x03))
                                {
                                    Name (PPI1, Package (0x02)
                                    {
                                        Zero, 
                                        Zero
                                    })
                                    Store (OFST, TMF1)
                                    Or (0x1100, TMF1, TMF1)
                                    Store (TMF1, SMI)
                                    Store (SMI, TMF1)
                                    ShiftRight (TMF1, 0x08, TMF1)
                                    If (LEqual (TMF1, 0xFF))
                                    {
                                        Return (One)
                                    }

                                    Store (TMF1, Index (PPI1, One))
                                    Return (PPI1)
                                }
                                Else
                                {
                                    If (LEqual (_T_0, 0x04))
                                    {
                                        Return (TRST)
                                    }
                                    Else
                                    {
                                        If (LEqual (_T_0, 0x05))
                                        {
                                            Name (PPI2, Package (0x03)
                                            {
                                                Zero, 
                                                Zero, 
                                                Zero
                                            })
                                            Store (OFST, TMF1)
                                            Or (0x2100, TMF1, TMF1)
                                            Store (TMF1, SMI)
                                            Store (SMI, TMF1)
                                            ShiftRight (TMF1, 0x08, TMF1)
                                            If (LEqual (TMF1, 0xFF))
                                            {
                                                Return (0x02)
                                            }

                                            Store (TMF1, Index (PPI2, One))
                                            Store (OFST, TMF1)
                                            Or (0x3100, TMF1, TMF1)
                                            Store (TMF1, SMI)
                                            Store (SMI, TMF1)
                                            ShiftRight (TMF1, 0x08, TMF1)
                                            If (LEqual (TMF1, 0xFF))
                                            {
                                                Return (0x02)
                                            }

                                            If (LEqual (TMF1, 0xF0))
                                            {
                                                Store (OFST, TMF1)
                                                Or (0x5100, TMF1, TMF1)
                                                Store (TMF1, SMI)
                                                Store (SMI, TMF1)
                                                ShiftRight (TMF1, 0x08, TMF1)
                                                If (LEqual (TMF1, 0xFF))
                                                {
                                                    Store (0xFFFFFFF0, Index (PPI2, 0x02))
                                                    Return (PPI2)
                                                }
                                            }
                                            Else
                                            {
                                                If (LEqual (TMF1, 0xF1))
                                                {
                                                    Store (OFST, TMF1)
                                                    Or (0x5100, TMF1, TMF1)
                                                    Store (TMF1, SMI)
                                                    Store (SMI, TMF1)
                                                    ShiftRight (TMF1, 0x08, TMF1)
                                                    If (LEqual (TMF1, 0xFF))
                                                    {
                                                        Store (0xFFFFFFF1, Index (PPI2, 0x02))
                                                        Return (PPI2)
                                                    }
                                                }
                                                Else
                                                {
                                                    Store (TMF1, Index (PPI2, 0x02))
                                                }
                                            }

                                            Return (PPI2)
                                        }
                                        Else
                                        {
                                            If (LEqual (_T_0, 0x06))
                                            {
                                                Return (0x03)
                                            }
                                            Else
                                            {
                                                If (LEqual (_T_0, 0x07))
                                                {
                                                    ToInteger (DerefOf (Index (Arg3, Zero)), TMF2)
                                                    Store (OFST, TMF1)
                                                    Or (0x1200, TMF1, TMF1)
                                                    Store (TMF1, SMI)
                                                    Store (SMI, TMF1)
                                                    ShiftRight (TMF1, 0x08, TMF1)
                                                    If (LEqual (TMF1, 0xFF))
                                                    {
                                                        Return (0x02)
                                                    }

                                                    ShiftLeft (TMF2, 0x08, TMF2)
                                                    Or (OFST, TMF2, TMF2)
                                                    Store (TMF2, SMI)
                                                    Store (SMI, TMF1)
                                                    ShiftRight (TMF1, 0x08, TMF1)
                                                    If (LEqual (TMF1, 0xFF))
                                                    {
                                                        Return (0x02)
                                                    }

                                                    If (LEqual (TMF1, 0xF1))
                                                    {
                                                        Return (One)
                                                    }

                                                    Return (Zero)
                                                }
                                                Else
                                                {
                                                    If (LEqual (_T_0, 0x08))
                                                    {
                                                        ToInteger (DerefOf (Index (Arg3, Zero)), TMF2)
                                                        Store (OFST, TMF1)
                                                        Or (0x4300, TMF1, TMF1)
                                                        Store (TMF1, SMI)
                                                        Store (SMI, TMF1)
                                                        ShiftLeft (TMF2, 0x08, TMF2)
                                                        Or (OFST, TMF2, TMF2)
                                                        Store (TMF2, SMI)
                                                        Store (SMI, TMF1)
                                                        ShiftRight (TMF1, 0x08, TMF1)
                                                        Return (TMF1)
                                                    }
                                                    Else
                                                    {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    Break
                }
            }
            Else
            {
                If (LEqual (Arg0, Buffer (0x10)
                        {
                            /* 0000 */    0xED, 0x54, 0x60, 0x37, 0x13, 0xCC, 0x75, 0x46, 
                            /* 0008 */    0x90, 0x1C, 0x47, 0x56, 0xD7, 0xF2, 0xD4, 0x5D
                        }))
                {
                    While (One)
                    {
                        Store (ToInteger (Arg2), _T_1)
                        If (LEqual (_T_1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                0x03
                            })
                        }
                        Else
                        {
                            If (LEqual (_T_1, One))
                            {
                                Store (OFST, TMF1)
                                Or (0x2200, TMF1, TMF1)
                                Store (TMF1, SMI)
                                Store (SMI, TMF1)
                                ShiftRight (TMF1, 0x08, TMF1)
                                If (LEqual (TMF1, 0xFF))
                                {
                                    Return (0x02)
                                }

                                ToInteger (DerefOf (Index (Arg3, Zero)), TMF1)
                                ShiftLeft (TMF1, 0x08, TMF1)
                                Or (OFST, TMF1, TMF1)
                                Store (TMF1, SMI)
                                Store (SMI, TMF1)
                                ShiftRight (TMF1, 0x08, TMF1)
                                If (LEqual (TMF1, 0xFF))
                                {
                                    Return (0x02)
                                }

                                Return (Zero)
                            }
                            Else
                            {
                            }
                        }

                        Break
                    }
                }
            }

            Return (Buffer (One)
            {
                0x00
            })
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "604046193538Genuine NVIDIA Certified SLI Ready Motherboard for ASUS TEMP KEY       6fde-Copyright 2015 NVIDIA Corporation All Rights Reserved-916326924403(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14")
            Name (_UID, "MXM2")
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */    0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E, 
                /* 0008 */    0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0, 
                /* 0010 */    0x4D, 0x58, 0x01, 0x02
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If (LEqual (FUNC, 0x41494C53))
                {
                    Return (SLIC)
                }

                Return (Zero)
            }
        }
    }
}

